<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MoonMonsters</title>
  
  <subtitle>Do Not Repeat Yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-06-20T07:05:54.675Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_Tao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[网络] --- vegeta压测工具使用</title>
    <link href="http://yoursite.com/2021/06/20/%E7%BD%91%E7%BB%9C-vegeta%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/06/20/%E7%BD%91%E7%BB%9C-vegeta%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-20T07:05:00.000Z</published>
    <updated>2021-06-20T07:05:54.675Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Vegeta 是一个用 Go 语言编写的多功能的 HTTP 负载测试工具，它提供了命令行工具和一个开发库。</p><p>官方地址：<a href="https://github.com/tsenart/vegeta" target="_blank" rel="noopener">https://github.com/tsenart/vegeta</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>mac版本:<code>brew install vegeta</code><br>其他版本没试过, 去上面的github看</p><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-cpus int:    使用 CPU 的数量 (默认为 4 个)</span><br><span class="line">-profile string:    指定在执行期间启用哪个分析器，支持 cpu 和 heap。</span><br><span class="line">-version:    打印版本并退出。attack command:</span><br><span class="line">-body string:    指定请求主体文件里的内容。</span><br><span class="line">-cert string:    指定用于 HTTPS 请求的 PEM 格式的客户端证书文件。如果 -key 未指定，它会被设置为这个标志的值。</span><br><span class="line">-connections int:    指定每个目标主机打开的空闲连接的最大数目，默认值为 10000。</span><br><span class="line">-duration duration:    指定发送请求到目标主机的时长，用 0 表示永久。</span><br><span class="line">-header value:    指定目标的请求头，可以重复指定多个请求头。</span><br><span class="line">-http2:    指定是否向支持的服务器发送 HTTP&#x2F;2 请求，默认为：true。</span><br><span class="line">-insecure:    指定是否忽略无效的服务器 TLS 证书。</span><br><span class="line">-keepalive:    指定是否使用持久链接，默认值为：true。</span><br><span class="line">-key string:    指定 HTTPS 请求中使用的 PEM 编码的 SSL 客户端证书私钥文件。</span><br><span class="line">-laddr value:    指定要使用的本地 I P地址，默认值为：0.0.0.0。</span><br><span class="line">-lazy:    指定是否使用延迟模式读取目标。</span><br><span class="line">-output string:    指定输出文件的位置，默认为标准输出。</span><br><span class="line">-rate uint:    指定每秒钟对目标发送的请求数，默认值为：50。</span><br><span class="line">-redirects int:    指定每个请求的重定向的最大次数，默认为 10 次。当值为 -1, 不会遵循重定向但响应标记为成功。</span><br><span class="line">-root-certs value:    指定可信的 TLS 根证书文件，多个的情况下使用逗号分隔。如果未指定，使用系统默认的 CA 证书。</span><br><span class="line">-targets string:    指定目标文件，默认为标准输入。</span><br><span class="line">-timeout duration:    指定每个请求的超时时间，默认值为 30s。</span><br><span class="line">-workers uint:    指定初始化进程数量，默认值为 10。</span><br><span class="line">-inputs string:    指定报告输入文件，默认为标准输入。</span><br><span class="line">-output string:    指定报告输出文件，默认为标准输出。</span><br><span class="line">-reporter string:    指定要生成的报告的格式，支持 text，json, plot, hist[buckets]。默认为文本。dump command:</span><br><span class="line">-dumper string:    指定转存文件，支持 json, csv 格式。默认为 json 格式。</span><br><span class="line">-inputs string:    指定要转存的输入文件，默认为标准输入，指定多个用逗号分隔。</span><br><span class="line">-output string:    指定要转存的输出文件，默认为标准输出。</span><br></pre></td></tr></table></figure><h3 id="输出介绍"><a href="#输出介绍" class="headerlink" title="输出介绍"></a>输出介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#使用标准输入进行压测并生成报告</span><br><span class="line">[root@localhost1]echo &quot;GET http:&#x2F;&#x2F;10.0.0.141&quot;| vegeta attack -rate&#x3D;500 -connections&#x3D;1 -duration&#x3D;1s | tee results.bin | vegeta report</span><br><span class="line">Requests（请求）      [total（请求总数）, rate（请求速度）]            500, 501.00</span><br><span class="line">Duration（攻击）      [total（总共攻击与等待的时间）, attack（攻击的时间）, wait（等待时间）]    998.571503ms, 997.999647ms, 571.856µs</span><br><span class="line">Latencies（执行时间）     [mean（单个请求的平均值）, 50（50%请求达到的时间）, 95, 99, max（单个最大请求时间）]  1.088556ms, 561.997µs, 2.414125ms, 12.116341ms, 22.107566ms</span><br><span class="line">Bytes In（请求的大小（字节））      [total（请求总大小）, mean（请求平均大小）]            306000, 612.00</span><br><span class="line">Bytes Out（字节输出）     [total（总输出）, mean（平均输出）]            0, 0.00</span><br><span class="line">Success（请求成功率）       [ratio（请求成功率）]                  100.00%</span><br><span class="line">Status Codes  [code（状态码）:count（请求次数）]             200:500 </span><br><span class="line">Error Set:（错误集）</span><br></pre></td></tr></table></figure><p>举例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">❯ echo &quot;GET http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;2&quot; | vegeta attack -duration&#x3D;20s  -rate&#x3D;0 -max-workers&#x3D;200 -workers&#x3D;200 | tee results.bin | vegeta report</span><br><span class="line">Requests      [total, rate, throughput]         376, 18.74, 6.51</span><br><span class="line">Duration      [total, attack, wait]             32.885s, 20.064s, 12.821s</span><br><span class="line">Latencies     [min, mean, 50, 90, 95, 99, max]  533.233µs, 13.995s, 16.971s, 24.209s, 30s, 30.003s, 30.003s</span><br><span class="line">Bytes In      [total, mean]                     3638, 9.68</span><br><span class="line">Bytes Out     [total, mean]                     0, 0.00</span><br><span class="line">Success       [ratio]                           56.91%</span><br><span class="line">Status Codes  [code:count]                      0:162  200:214</span><br><span class="line">Error Set:</span><br><span class="line">Get &quot;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;2&quot;: read tcp 127.0.0.1:50213-&gt;127.0.0.1:8888: read: connection reset by peer</span><br><span class="line">Get &quot;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;2&quot;: read tcp 127.0.0.1:50217-&gt;127.0.0.1:8888: read: connection reset by peer</span><br><span class="line">Get &quot;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;2&quot;: read tcp 127.0.0.1:50218-&gt;127.0.0.1:8888: read: connection reset by peer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;Vegeta 是一个用 Go 语言编写的多功能的 HTTP 负载测试工具，它提供了命令行工具和一个开发库。&lt;/p&gt;
&lt;p&gt;官方地址：&lt;a h
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 一文搞懂CIDR地址块及其子网划分</title>
    <link href="http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82CIDR%E5%9C%B0%E5%9D%80%E5%9D%97%E5%8F%8A%E5%85%B6%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/"/>
    <id>http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82CIDR%E5%9C%B0%E5%9D%80%E5%9D%97%E5%8F%8A%E5%85%B6%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/</id>
    <published>2021-06-05T13:11:00.000Z</published>
    <updated>2021-06-05T13:11:14.020Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/iryUdWwfM8icgUvolPGJXw" target="_blank" rel="noopener">一文搞懂CIDR地址块及其子网划分</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/zego/20210601185953.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/iryUdWwfM8icgUvolPGJXw&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 分析ARP协议、图文拆解交换机、路由器转发原理</title>
    <link href="http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E5%88%86%E6%9E%90ARP%E5%8D%8F%E8%AE%AE%E3%80%81%E5%9B%BE%E6%96%87%E6%8B%86%E8%A7%A3%E4%BA%A4%E6%8D%A2%E6%9C%BA%E3%80%81%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BD%AC%E5%8F%91%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E5%88%86%E6%9E%90ARP%E5%8D%8F%E8%AE%AE%E3%80%81%E5%9B%BE%E6%96%87%E6%8B%86%E8%A7%A3%E4%BA%A4%E6%8D%A2%E6%9C%BA%E3%80%81%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BD%AC%E5%8F%91%E5%8E%9F%E7%90%86/</id>
    <published>2021-06-05T13:10:00.000Z</published>
    <updated>2021-06-05T13:10:43.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://blog.51cto.com/ganbing/1210952" target="_blank" rel="noopener">几句话让你明白：分析ARP协议、图文拆解交换机/路由器转发原理</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/zego/20210602111212.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.51cto.com/ganbing/1210952&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 万字详解BGP路由技术原理及配置命令！</title>
    <link href="http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3BGP%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%EF%BC%81/"/>
    <id>http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3BGP%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%EF%BC%81/</id>
    <published>2021-06-05T13:09:00.000Z</published>
    <updated>2021-06-05T13:09:20.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="">【干货】万字详解BGP路由技术原理及配置命令！</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/zego/20210531142221.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;【干货】万字详解BGP路由技术原理及配置命令！&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; c
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- IPv4地址表示法详解</title>
    <link href="http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-IPv4%E5%9C%B0%E5%9D%80%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-IPv4%E5%9C%B0%E5%9D%80%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-06-05T13:09:00.000Z</published>
    <updated>2021-06-05T13:10:00.208Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://bbs.huaweicloud.com/blogs/154835" target="_blank" rel="noopener">IPv4地址表示法详解</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/zego/20210601103005.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://bbs.huaweicloud.com/blogs/154835&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 网络排查工具 MTR 介绍</title>
    <link href="http://yoursite.com/2021/05/30/%E8%BD%AC-%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2021/05/30/%E8%BD%AC-%E7%BD%91%E7%BB%9C/</id>
    <published>2021-05-30T07:34:00.000Z</published>
    <updated>2021-06-05T13:15:44.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/pwjC33dHluktpZPxSNZ-BQ" target="_blank" rel="noopener">网络排查工具 MTR 介绍</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210530153209.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/pwjC33dHluktpZPxSNZ-BQ&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]Vue -- Vue项目启动代码执行流程分析</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-vue-Vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-vue-Vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</id>
    <published>2021-05-29T06:11:00.000Z</published>
    <updated>2021-05-29T06:57:01.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://blog.csdn.net/IT__learning/article/details/114294180" target="_blank" rel="noopener">Vue文件加载执行流程</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一般一个初步的Vue项目创建好之后都会有这三个文件：<code>index.html</code> 、<code>main.js</code> 和<code>App.js</code>。</p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>Vue是单页面形式开发，index.html文件在其中起着特别重要的作用。所有组件（后缀名为.vue都被视为组件）都会通过此文件进行渲染加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>y<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在body体中只有一个div标签，其id为app,这个id将会连接到src/main.js内容</p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>相当于一个C/Java中的入口函数，控制着初次启动Vue项目要加载的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> lhj <span class="keyword">from</span> <span class="string">'./components/lhj'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">"vue-axios"</span>;</span><br><span class="line">Vue.use(VueAxios,axios)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  watch:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在main.js中，新建了一个vue实例，并使用el：#app链接到index.html中的app，并使用template引入组件和路由相关的内容，也就是说通过main.js我们关联到App.vue组件。</p><p>（1）import A from ‘B’ <br/><br>这类语句相当于引入B（这一般是路径）然后给它起个名字叫做A；<br/><br>（2）Vue.use（C）<br/><br>这个意思是全局方法定义C。也就是说，定义以后你可以在这个Vue项目的任意地方使用该组件。<br/><br>（3）el: ‘#app’<br/><br>这个和index.html中的相挂钩。<br/></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板将会替换挂载的元素，挂载元素的内容都将被忽略。</p><p>也就是说:template: ‘&lt; App/&gt;’ 表示用&lt; app&gt;&lt; /app&gt;替换index.html里面的&lt; div id=“app”&gt;，然后index.html文件被初步解析为这种形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myapp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）watch ： 用来监听路由的变化，可以用来定义页面切换时过渡效果。</p><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>标准的App.vue模板的形式，包含了<code>&lt;template&gt;&lt;/template&gt;</code>、<code>&lt;script&gt;&lt;/script&gt;</code>、<code>&lt;style&gt;&lt;/style&gt;</code>三部分。<br>（1）export中的name属性，相当于给这个组件定义一个名字，便于识别和使用。<br/><br>（2）&lt; template&gt;标签下，除了&lt; img&gt;标签外，还有&lt; router-view&gt;标签，&lt; router-view&gt;标签将会把路由相关内容渲染在这个地方。路由的内容定义在src/router/index.js文件中。<br/></p><h3 id="src-router-index-js"><a href="#src-router-index-js" class="headerlink" title="src/router/index.js"></a>src/router/index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在index.js的代码中，建立了路由相关的内容，也就会渲染到app.vue下面的&lt; router-view&gt;中。<br/><br>（1）引入组件的代码<br/><br>引入的时候注意好格式、路径就行。<br/><br>（2）routes定义<br/><br>● path：页面间路由跳转的路径；<br/><br>● name：该路由的名称；<br/><br>● component：组件名，要和你引入组件时定义的名字保持一致。<br/></p><h3 id="Vue加载时文件的执行顺序"><a href="#Vue加载时文件的执行顺序" class="headerlink" title="Vue加载时文件的执行顺序"></a>Vue加载时文件的执行顺序</h3><p>1、执行index.html文件 <br/><br>2、执行main.js文件 <br/><br>3、main.js挂载了app.vue文件，用app.vue的templete替换index.html中的<br/><br>4、main.js中注入了路由文件，将对应的组件渲染到router-view中<br/> 5、router-view中加载Layout文件<br/><br>6、Layout 加载Navbar, Sidebar, AppMain</p><h3 id="Vue内部页面的执行顺序"><a href="#Vue内部页面的执行顺序" class="headerlink" title="Vue内部页面的执行顺序"></a>Vue内部页面的执行顺序</h3><p>Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。但是模板毕竟是模板，不是真实的dom节点。从模板到真实dom节点还需要经过一些步骤：<br/></p><p>1、把模板编译为render函数 <br/><br>2、实例进行挂载,根据根节点render函数的调用，递归的生成虚拟dom<br/><br>3、对比虚拟dom，渲染到真实dom<br/><br>4、组件内部data发生变化，组件和子组件引用data作为props重新调用render函数，生成虚拟dom, 返回到步骤3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/IT__learning/article/details/114294180&quot;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]Vue -- axios拦截器</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-vue-axios%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-vue-axios%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2021-05-29T06:09:00.000Z</published>
    <updated>2021-05-29T06:56:53.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://hupeip.github.io/2018/10/08/axios%E6%8B%A6%E6%88%AA%E5%99%A8/" target="_blank" rel="noopener">axios拦截器</a></p><h3 id="axios拦截器简单介绍"><a href="#axios拦截器简单介绍" class="headerlink" title="axios拦截器简单介绍"></a>axios拦截器简单介绍</h3><p>页面发送http请求，很多情况我们要对请求和其响应进行特定的处理；如果请求数非常多，单独对每一个请求进行处理会变得非常麻烦，程序的优雅性也会大打折扣。好在强大的axios为开发者提供了这样一个API：拦截器。拦截器分为 请求（request）拦截器和 响应（response）拦截器。</p><h4 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发起请求请做一些业务处理</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求失败做处理</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做处理</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做处理</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="vue添加axios拦截器"><a href="#vue添加axios拦截器" class="headerlink" title="vue添加axios拦截器"></a>vue添加axios拦截器</h3><h4 id="安装-axios"><a href="#安装-axios" class="headerlink" title="安装 axios"></a>安装 axios</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios –save-dev</span><br></pre></td></tr></table></figure><h4 id="新建文件-axios-js"><a href="#新建文件-axios-js" class="headerlink" title="新建文件 axios.js"></a>新建文件 axios.js</h4><p>开始统一封装axios， 首先引入axios、qs依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">"qs"</span>;</span><br></pre></td></tr></table></figure><p>然后创建一个axios实例，这个process.env.BASE_URL在config/dev.evn.js、prod.evn.js里面进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** 创建axios实例 ******/</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: process.env.BASE_URL,  <span class="comment">// api的base_url</span></span><br><span class="line">    timeout: <span class="number">5000</span>  <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用request拦截器对axios请求配置做统一处理"><a href="#使用request拦截器对axios请求配置做统一处理" class="headerlink" title="使用request拦截器对axios请求配置做统一处理"></a>使用request拦截器对axios请求配置做统一处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;    </span><br><span class="line">    app.$vux.loading.show(&#123;        </span><br><span class="line">        text: <span class="string">'数据加载中……'</span>    </span><br><span class="line">    &#125;);     </span><br><span class="line">    config.method === <span class="string">'post'</span>        </span><br><span class="line">        ? config.data = qs.stringify(&#123;...config.data&#125;)        </span><br><span class="line">        : config.params = &#123;...config.params&#125;;    </span><br><span class="line">    config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;     </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">    &#125;, error =&gt; &#123;  <span class="comment">//请求错误处理   </span></span><br><span class="line">        app.$vux.toast.show(&#123;        </span><br><span class="line">            type: <span class="string">'warn'</span>,        </span><br><span class="line">            text: error   </span><br><span class="line">        &#125;);    </span><br><span class="line">        <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="对response做统一处理"><a href="#对response做统一处理" class="headerlink" title="对response做统一处理"></a>对response做统一处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.response.use(    </span><br><span class="line">    response =&gt; &#123;  <span class="comment">//成功请求到数据        </span></span><br><span class="line">        app.$vux.loading.hide();        </span><br><span class="line">        <span class="comment">//这里根据后端提供的数据进行对应的处理        </span></span><br><span class="line">        <span class="keyword">if</span> (response.data.result === <span class="string">'TRUE'</span>) &#123;            </span><br><span class="line">            <span class="keyword">return</span> response.data;        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            app.$vux.toast.show(&#123;  </span><br><span class="line">                <span class="comment">//常规错误处理                </span></span><br><span class="line">                type: <span class="string">'warn'</span>,                </span><br><span class="line">                text: response.data.data.msg            </span><br><span class="line">            &#125;);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    error =&gt; &#123;  <span class="comment">//响应错误处理console.log('error');        </span></span><br><span class="line">        <span class="built_in">console</span>.log(error);        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error));         </span><br><span class="line">        <span class="keyword">let</span> text = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(error)).response.status === <span class="number">404</span>            </span><br><span class="line">            ? <span class="string">'404'</span>            </span><br><span class="line">            : <span class="string">'网络异常，请重试'</span>;        </span><br><span class="line">        app.$vux.toast.show(&#123;            </span><br><span class="line">            type: <span class="string">'warn'</span>,            </span><br><span class="line">            text: text        </span><br><span class="line">        &#125;);         </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)   </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="将axios实例暴露出去"><a href="#将axios实例暴露出去" class="headerlink" title="将axios实例暴露出去"></a>将axios实例暴露出去</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><p>这样一个简单的拦截器就完成了</p><h4 id="在main-js中进行引用，并配置一个别名（-ajax）来进行调用"><a href="#在main-js中进行引用，并配置一个别名（-ajax）来进行调用" class="headerlink" title="在main.js中进行引用，并配置一个别名（$ajax）来进行调用"></a>在main.js中进行引用，并配置一个别名（$ajax）来进行调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../axios.js'</span>    <span class="comment">//axios.js的路径</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$ajax = axios</span><br></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h4 id="应用：一个简单的登录接口"><a href="#应用：一个简单的登录接口" class="headerlink" title="应用：一个简单的登录接口"></a>应用：一个简单的登录接口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ajax(&#123;</span><br><span class="line">　　method: <span class="string">'post'</span>,</span><br><span class="line">　　url: <span class="string">'/login'</span>,</span><br><span class="line">　　data: &#123;</span><br><span class="line">　　　　<span class="string">'userName'</span>: <span class="string">'haha'</span>,</span><br><span class="line">　　　　<span class="string">'password'</span>: <span class="string">'123456'</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">　　<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h4><p>在定义路由的时候就需要多添加一个自定义字段requireAuth，用于判断该路由的访问是否需要登录。如果用户已经登录，则顺利进入路由，否则就进入登录页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'/'</span>,</span><br><span class="line">        component: Index</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/repository'</span>,</span><br><span class="line">        name: <span class="string">'repository'</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            requireAuth: <span class="literal">true</span>,  <span class="comment">// 添加该字段，表示进入这个路由是需要登录的</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: Repository</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        name: <span class="string">'login'</span>,</span><br><span class="line">        component: Login</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>定义完路由后，我们主要是利用vue-router提供的钩子函数beforeEach()对路由进行判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.meta.requireAuth) &#123;  <span class="comment">// 判断该路由是否需要登录权限</span></span><br><span class="line">        <span class="keyword">if</span> (token) &#123;  <span class="comment">// 判断当前的token是否存在</span></span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            next(&#123;</span><br><span class="line">                path: <span class="string">'/login'</span>,</span><br><span class="line">                query: &#123;<span class="attr">redirect</span>: to.fullPath&#125;  <span class="comment">// 将跳转的路由path作为参数，登录成功后跳转到该路由</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>to.meta中是我们自定义的数据，其中就包括我们刚刚定义的requireAuth字段<br>通过这个字段来判断该路由是否需要登录权限<br>需要的话，同时当前应用不存在token，则跳转到登录页面，进行登录。登录成功后跳转到目标路由。</p><p>这种方式只是简单的前端路由控制，并不能阻止用户访问，假设有一种情况：当前token失效了，但是token依然保存在本地。这时候你去访问需要登录权限的路由时，实际上应该让用户重新登录。这时候就需要结合 http 拦截器 + 后端接口返回的http 状态码来判断。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>要想统一处理所有http请求和响应，就得用上 axios 的拦截器。通过配置http response inteceptor，当后端接口返回401 Unauthorized（未授权），让用户重新登录。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (stoken) &#123;  <span class="comment">// 判断是否存在token，如果存在的话，则每个http header都加上token</span></span><br><span class="line">            config.headers.Authorization = <span class="string">`token <span class="subst">$&#123;store.state.token&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    err =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http response 拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">                    <span class="comment">// 返回 401 清除token信息并跳转到登录页面</span></span><br><span class="line">                    </span><br><span class="line">                    router.replace(&#123;</span><br><span class="line">                        path: <span class="string">'login'</span>,</span><br><span class="line">                        query: &#123;<span class="attr">redirect</span>: router.currentRoute.fullPath&#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response.data)   <span class="comment">// 返回接口返回的错误信息</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hupeip.github.io/2018/10/08/axios%E6%8B%A6%E6%88%AA%E
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue -- axios请求携带cookie</title>
    <link href="http://yoursite.com/2021/05/29/vue-axios%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6cookie/"/>
    <id>http://yoursite.com/2021/05/29/vue-axios%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6cookie/</id>
    <published>2021-05-29T06:08:00.000Z</published>
    <updated>2021-05-29T06:56:42.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改vue-config-js文件"><a href="#修改vue-config-js文件" class="headerlink" title="修改vue.config.js文件"></a>修改vue.config.js文件</h3><p>在该文件中, 添加<code>disableHostCheck: true</code>, 不需要host检查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: port,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: <span class="string">'http://localhost:5000'</span>,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装axios时-加上withCredentials"><a href="#封装axios时-加上withCredentials" class="headerlink" title="封装axios时, 加上withCredentials"></a>封装axios时, 加上withCredentials</h3><p>在封装axios时, 加上<code>withCredentials: true</code><br/><br>跨源请求不提供凭据(cookie、HTTP认证及客户端SSL证明等)。通过将withCredentials属性设置为true，可以指定某个请求应该发送凭据。<br/><br>默认值为false。<br/><br>true：在跨域请求时，会携带用户凭证<br/><br>false：在跨域请求时，不会携带用户凭证；返回的 response 里也会忽略 cookie<br/></p><h3 id="后端返回的数据中-修改请求头"><a href="#后端返回的数据中-修改请求头" class="headerlink" title="后端返回的数据中, 修改请求头"></a>后端返回的数据中, 修改请求头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_cors_response</span><span class="params">(response, status=<span class="number">200</span>)</span>:</span></span><br><span class="line">    resp = make_response(response, status)</span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Credentials'</span>] = <span class="string">'true'</span></span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Origin'</span>] = <span class="string">'http://key-ui.oa.zego.im:9528'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p>需要注意的是:</p><ol><li>传入的是<code>true</code>字符串, 不是<code>True</code>布尔类型</li><li>origin不能是<code>*</code>, 必须是完整的域名</li><li>可以修改hosts文件, 来将<code>127.0.0.1</code>指向测试的域名</li><li>正式环境中, 这部分操作将由nginx完成, 不在代码中写死</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修改vue-config-js文件&quot;&gt;&lt;a href=&quot;#修改vue-config-js文件&quot; class=&quot;headerlink&quot; title=&quot;修改vue.config.js文件&quot;&gt;&lt;/a&gt;修改vue.config.js文件&lt;/h3&gt;&lt;p&gt;在该文件中, 添加&lt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 互联网网络协议</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E4%BA%92%E8%81%94%E7%BD%91%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E4%BA%92%E8%81%94%E7%BD%91%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-05-29T06:07:00.000Z</published>
    <updated>2021-05-29T06:56:33.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="互联网协议入门（一）"><a href="#互联网协议入门（一）" class="headerlink" title="互联网协议入门（一）"></a><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">互联网协议入门（一）</a></h3><h3 id="互联网协议入门（二）"><a href="#互联网协议入门（二）" class="headerlink" title="互联网协议入门（二）"></a><a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="noopener">互联网协议入门（二）</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;互联网协议入门（一）&quot;&gt;&lt;a href=&quot;#互联网协议入门（一）&quot; class=&quot;headerlink&quot; title=&quot;互联网协议入门（一）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 探究！一个数据包在网络中的心路历程</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E6%8E%A2%E7%A9%B6%EF%BC%81%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E6%8E%A2%E7%A9%B6%EF%BC%81%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/</id>
    <published>2021-05-29T06:03:00.000Z</published>
    <updated>2021-05-29T06:56:24.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247483989&idx=1&sn=7e2ed852770743d3955ef9d5561fcef3&scene=21#wechat_redirect" target="_blank" rel="noopener">探究！一个数据包在网络中的心路历程</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529135026.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;mid=2247483
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- ping和数据包发送流程</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-ping%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-ping%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/</id>
    <published>2021-05-29T05:59:00.000Z</published>
    <updated>2021-05-29T06:56:05.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://www.cnblogs.com/iwehdio/p/14231935.html" target="_blank" rel="noopener">ping和数据包发送流程</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529122853.png" alt="ping和数据包发送流程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/iwehdio/p/14231935.html&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 听说你 ping 用的很 6 ？给我图解一下 ping 的工作原理！</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%90%AC%E8%AF%B4%E4%BD%A0-ping-%E7%94%A8%E7%9A%84%E5%BE%88-6-%EF%BC%9F%E7%BB%99%E6%88%91%E5%9B%BE%E8%A7%A3%E4%B8%80%E4%B8%8B-ping-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%81/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%90%AC%E8%AF%B4%E4%BD%A0-ping-%E7%94%A8%E7%9A%84%E5%BE%88-6-%EF%BC%9F%E7%BB%99%E6%88%91%E5%9B%BE%E8%A7%A3%E4%B8%80%E4%B8%8B-ping-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%81/</id>
    <published>2021-05-29T05:59:00.000Z</published>
    <updated>2021-05-29T06:56:15.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247483999&idx=1&sn=63825d7e7a94c0e03f8f250bbae3e88e&scene=21#wechat_redirect" target="_blank" rel="noopener">听说你 ping 用的很 6 ？给我图解一下 ping 的工作原理！</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529131237.png" alt=""></p><hr/><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529131339.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;mid=2247483
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 ---【科普】IP地址详解, 计算方式</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E3%80%90%E7%A7%91%E6%99%AE%E3%80%91IP%E5%9C%B0%E5%9D%80%E8%AF%A6%E8%A7%A3-%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E3%80%90%E7%A7%91%E6%99%AE%E3%80%91IP%E5%9C%B0%E5%9D%80%E8%AF%A6%E8%A7%A3-%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/</id>
    <published>2021-05-29T05:58:00.000Z</published>
    <updated>2021-05-29T06:55:53.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://zhuanlan.zhihu.com/p/26098552" target="_blank" rel="noopener">【科普】IP地址详解-你,是谁？(二）-超有趣学网络</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529120402.png" alt="【科普】IP地址详解-你,是谁？(二）-超有趣学网络"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26098552&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 子网掩码</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/</id>
    <published>2021-05-29T05:57:00.000Z</published>
    <updated>2021-05-29T06:55:40.951Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">转载</a></p><p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p><p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p><p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p><p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p><p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p><p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”子网掩码”（subnet mask）。</p><p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p><p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p><p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p><p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;规定网络地址的
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Bug --- vue add axios报错</title>
    <link href="http://yoursite.com/2021/05/02/bug-vue-add-axios%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2021/05/02/bug-vue-add-axios%E6%8A%A5%E9%94%99/</id>
    <published>2021-05-02T12:08:00.000Z</published>
    <updated>2021-05-29T07:05:34.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">🚀  Invoking generator for vue-cli-plugin-axios...</span><br><span class="line">⠋  Running completion hooks...error: &#39;options&#39; is defined but never used (no-unused-vars) at src&#x2F;plugins&#x2F;axios.js:42:32:</span><br><span class="line">  40 | );</span><br><span class="line">  41 |</span><br><span class="line">&gt; 42 | Plugin.install &#x3D; function(Vue, options) &#123;</span><br><span class="line">     |                                ^</span><br><span class="line">  43 |   Vue.axios &#x3D; _axios;</span><br><span class="line">  44 |   window.axios &#x3D; _axios;</span><br><span class="line">  45 |   Object.defineProperties(Vue.prototype, &#123;</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>原因:该项目安装了<code>eslint</code>规范，<code>ESLint</code> 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。但有时也会由于过于严谨,导致错误提醒<br>解决方案:<br>在package.json文件中添加如下代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"rules": &#123;</span><br><span class="line">    "generator-star-spacing": "off",</span><br><span class="line">    "no-tabs":"off",</span><br><span class="line">    "no-unused-vars":"off",</span><br><span class="line">    "no-console":"off",</span><br><span class="line">    "no-irregular-whitespace":"off",</span><br><span class="line">    "no-debugger": "off"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;报错&quot;&gt;&lt;a href=&quot;#报错&quot; class=&quot;headerlink&quot; title=&quot;报错&quot;&gt;&lt;/a&gt;报错&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Bug" scheme="http://yoursite.com/categories/Bug/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode --- 144. 二叉树的前序遍历</title>
    <link href="http://yoursite.com/2021/04/18/leetcode-144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2021/04/18/leetcode-144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2021-04-18T08:54:00.000Z</published>
    <updated>2021-05-29T07:13:44.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">二叉树的前序遍历</a></p><p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p><p>示例 1：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210418165503.png" alt=""></p><blockquote><p>输入：root = [1,null,2,3]<br/><br>输出：[1,2,3]</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, left=None, right=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; list:</span></span><br><span class="line">        rv = list()</span><br><span class="line">        self._pre2(root, rv)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pre</span><span class="params">(self, root, rv)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        递归做法</span></span><br><span class="line"><span class="string">        leetcode运行时间:40ms, 内存消耗:14.9mb</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            rv.append(root.val)</span><br><span class="line">            self._pre(root.left, rv)</span><br><span class="line">            self._pre(root.right, rv)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pre2</span><span class="params">(self, root, rv: list)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        非递归做法</span></span><br><span class="line"><span class="string">        运行时间:36ms, 内存消耗: 14.9mb</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        n = root</span><br><span class="line">        <span class="keyword">while</span> n <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> n:</span><br><span class="line">                rv.append(n.val)</span><br><span class="line">                stack.append(n)</span><br><span class="line">                n = n.left</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                t = stack.pop()</span><br><span class="line">                n = t.right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = TreeNode(<span class="number">1</span>)</span><br><span class="line">t2 = TreeNode(<span class="number">2</span>)</span><br><span class="line">t3 = TreeNode(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">t1.right = t2</span><br><span class="line">t2.left = t3</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.preorderTraversal(t1))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-preorder-travers
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode --- 2. 两数相加</title>
    <link href="http://yoursite.com/2021/04/18/leetcode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2021/04/18/leetcode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-04-18T06:06:00.000Z</published>
    <updated>2021-05-29T07:11:39.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">两数相加</a></p><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 <code>一位</code> 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210418140849.png" alt=""></p><blockquote><p>输入：l1 = [2,4,3], l2 = [5,6,4] <br/><br>输出：[7,0,8]    <br/><br>解释：342 + 465 = 807.</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        head = <span class="literal">None</span></span><br><span class="line">        tail = <span class="literal">None</span></span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            val = l1.val + l2.val + tmp</span><br><span class="line">            tmp = val // <span class="number">10</span></span><br><span class="line">            l1 = l1.next</span><br><span class="line">            l2 = l2.next</span><br><span class="line"></span><br><span class="line">            n = ListNode(val % <span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                head = n</span><br><span class="line">                tail = n</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.next = n</span><br><span class="line">                tail = n</span><br><span class="line"></span><br><span class="line">        m = l1 <span class="keyword">if</span> l1 <span class="keyword">else</span> l2</span><br><span class="line">        <span class="keyword">while</span> m:</span><br><span class="line">            val = m.val + tmp</span><br><span class="line">            n = ListNode(val % <span class="number">10</span>)</span><br><span class="line">            tail.next = n</span><br><span class="line">            tail = n</span><br><span class="line">            tmp = val // <span class="number">10</span></span><br><span class="line">            m = m.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tmp &gt; <span class="number">0</span>:</span><br><span class="line">            n = ListNode(tmp)</span><br><span class="line">            tail.next = n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># l1_2 = ListNode(2)</span></span><br><span class="line"><span class="comment"># l1_4 = ListNode(4)</span></span><br><span class="line"><span class="comment"># l1_3 = ListNode(3)</span></span><br><span class="line"><span class="comment"># l1_2.next = l1_4</span></span><br><span class="line"><span class="comment"># l1_4.next = l1_3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># l2_5 = ListNode(5)</span></span><br><span class="line"><span class="comment"># l2_6 = ListNode(6)</span></span><br><span class="line"><span class="comment"># l2_4 = ListNode(4)</span></span><br><span class="line"><span class="comment"># l2_5.next = l2_6</span></span><br><span class="line"><span class="comment"># l2_6.next = l2_4</span></span><br><span class="line"></span><br><span class="line">l1_1 = ListNode(<span class="number">9</span>)</span><br><span class="line">l1_2 = ListNode(<span class="number">9</span>)</span><br><span class="line">l1_3 = ListNode(<span class="number">1</span>)</span><br><span class="line">l1_1.next = l1_2</span><br><span class="line">l1_2.next = l1_3</span><br><span class="line"></span><br><span class="line">l2_1 = ListNode(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">cur = s.addTwoNumbers(l1_1, l2_1)</span><br><span class="line"><span class="keyword">while</span> cur:</span><br><span class="line">    print(<span class="string">"cur: %s"</span> % cur.val)</span><br><span class="line">    cur = cur.next</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers/&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- TCP和UDP是否可以绑定同一端口进行通信</title>
    <link href="http://yoursite.com/2021/04/12/%E8%BD%AC-TCP%E5%92%8CUDP%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E7%BB%91%E5%AE%9A%E5%90%8C%E4%B8%80%E7%AB%AF%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2021/04/12/%E8%BD%AC-TCP%E5%92%8CUDP%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E7%BB%91%E5%AE%9A%E5%90%8C%E4%B8%80%E7%AB%AF%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1/</id>
    <published>2021-04-12T10:01:00.000Z</published>
    <updated>2021-05-29T06:54:42.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://blog.csdn.net/m0_37564426/article/details/89294852" target="_blank" rel="noopener">TCP和UDP是否可以绑定同一端口进行通信</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>TCP、UDP可以绑定同一端口来进行通信： </p><p>网络中可以被命名和寻址的通信端口，是操作系统可分配的一种资源。 </p><p>按照OSI七层协议的描述，传输层与网络层在功能上的最大区别是传输层提供进程通信能力。从这个意义上讲，网络通信的最终地址就不仅仅是主机地址了，还包括可以描述进程的某种标识符。为此，TCP/IP协议提出了协议端口（protocol   port，简称端口）的概念，用于标识通信的进程。 </p><p>端口是一种抽象的软件结构（包括一些数据结构和I/O缓冲区）。应用程序（即进程）通过系统调用与某端口建立连接（binding）后，传输层传给该端口的数据都被相应进程所接收，相应进程发给传输层的数据都通过该端口输出。在TCP/IP协议的实现中，端口操作类似于一般的I/O操作，进程获取一个端口，相当于获取本地唯一的I/O文件，可以用一般的读写原语访问之。 </p><p>类似于文件描述符，每个端口都拥有一个叫端口号（port   number）的整数型标识符，用于区别不同端口。由于TCP/IP传输层的两个协议TCP和UDP是完全独立的两个软件模块，因此各自的端口号也相互独立，如TCP有一个255号端口，UDP也可以有一个255号端口，二者并不冲突。 </p><p>端口号的分配是一个重要问题。有两种基本分配方式：第一种叫全局分配，这是一种集中控制方式，由一个公认的中央机构根据用户需要进行统一分配，并将结果公布于众。第二种是本地分配，又称动态连接，即进程需要访问传输层服务时，向本地操作系统提出申请，操作系统返回一个本地唯一的端口号，进程再通过合适的系统调用将自己与该端口号联系起来（绑扎）。TCP/IP端口号的分配中综合了上述两种方式。TCP/IP将端口号分为两部分，少量的作为保留端口，以全局方式分配给服务进程。因此，每一个标准服务器都拥有一个全局公认的端口（即周知口，well-known   port），即使在不同机器上，其端口号也相同。剩余的为自由端口，以本地方式进行分配。TCP和UDP均规定，小于256的端口号才能作保留端口。</p><p>· 再讨论一下，一个服务器监控一个端口，比如80端口，它为什么可以建立上成千上万的连接？</p><p>首先， 一个TCP连接需要由四元组来形成，即(src_ip,src_port,dst_ip,dst_port)。当一个连接请求过来的时候，服务端调用accept函数，新生成一个socket，这个socket所占用的本地端口依然是80端口。由四元组就很容易分析到了，同一个(src_ip,src_port)，它所对应的(dst_ip,dst_port)可以无穷变化，这样就可以建立很多个客户端的请求了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_37564426/article/details/89294852&quot; t
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构 --- 使用数组保存层序遍历二叉树并后续遍历输出</title>
    <link href="http://yoursite.com/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E4%BF%9D%E5%AD%98%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B6%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E4%BF%9D%E5%AD%98%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B6%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E8%BE%93%E5%87%BA/</id>
    <published>2021-04-09T17:23:00.000Z</published>
    <updated>2021-05-29T06:54:24.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>将一颗二叉树层序遍历, 存入到数组中, 并后序遍历输出数据</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归写法</span></span><br><span class="line"><span class="comment"># class Solution(object):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def traverse(self, nums):</span></span><br><span class="line"><span class="comment">#         rv = list()</span></span><br><span class="line"><span class="comment">#         index = 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         self._post(nums, index, rv)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         return rv</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def _post(self, nums: list, index: int, rv: list):</span></span><br><span class="line"><span class="comment">#         if index &lt; len(nums) and nums[index] is not None:</span></span><br><span class="line"><span class="comment">#             self._post(nums, index * 2 + 1, rv)</span></span><br><span class="line"><span class="comment">#             self._post(nums, index * 2 + 2, rv)</span></span><br><span class="line"><span class="comment">#             rv.append(nums[index])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        q = [<span class="number">0</span>]</span><br><span class="line">        rv = list()</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 用来判断该索引是否已遍历过</span></span><br><span class="line">        done = set()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            <span class="keyword">while</span> index * <span class="number">2</span> + <span class="number">1</span> &lt; len(nums) <span class="keyword">and</span> index <span class="keyword">not</span> <span class="keyword">in</span> done:</span><br><span class="line">                index = index * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">                q.append(index)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 不能pop掉, 后续遍历, 父节点需要最后访问</span></span><br><span class="line">            index = q[<span class="number">-1</span>]</span><br><span class="line">            <span class="comment"># 访问条件</span></span><br><span class="line">            <span class="comment"># 1. 没有访问过</span></span><br><span class="line">            <span class="comment"># 2. 没有右子节点</span></span><br><span class="line">            <span class="comment"># 3. 左右子节点都已经访问过</span></span><br><span class="line">            <span class="keyword">if</span> index <span class="keyword">not</span> <span class="keyword">in</span> done \</span><br><span class="line">                    <span class="keyword">and</span> (index * <span class="number">2</span> + <span class="number">2</span> &gt;= len(nums) <span class="keyword">or</span> nums[index * <span class="number">2</span> + <span class="number">2</span>] <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line">                         <span class="keyword">or</span> (index * <span class="number">2</span> + <span class="number">1</span> <span class="keyword">in</span> done <span class="keyword">and</span> index * <span class="number">2</span> + <span class="number">2</span> <span class="keyword">in</span> done)):</span><br><span class="line">                <span class="comment"># 访问</span></span><br><span class="line">                rv.append(nums[index])</span><br><span class="line">                <span class="comment"># 节点已访问了</span></span><br><span class="line">                done.add(index)</span><br><span class="line">                <span class="comment"># 从栈中pop处理</span></span><br><span class="line">                q.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果无法访问, 那就把右子节点加入到栈中, 遍历右子树</span></span><br><span class="line">                index = index * <span class="number">2</span> + <span class="number">2</span></span><br><span class="line">                q.append(index)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tree = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">s = Solution()</span><br><span class="line">print(s.traverse(tree))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;将一颗二叉树层序遍历, 存入到数组中, 并后序遍历输出数据&lt;/p&gt;
&lt;h3 id=&quot;解法&quot;&gt;&lt;a href=&quot;#解法&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
</feed>
