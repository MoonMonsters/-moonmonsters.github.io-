<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MoonMonsters</title>
  
  <subtitle>Do Not Repeat Yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-08-07T11:38:04.591Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_Tao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]Flask --- RuntimeError, Working outside of application context.</title>
    <link href="http://yoursite.com/2021/07/24/%E8%BD%AC-Flask-RuntimeError-Working-outside-of-application-context/"/>
    <id>http://yoursite.com/2021/07/24/%E8%BD%AC-Flask-RuntimeError-Working-outside-of-application-context/</id>
    <published>2021-07-24T12:01:00.000Z</published>
    <updated>2021-08-07T11:38:04.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://blog.csdn.net/weixin_35993084/article/details/80609131" target="_blank" rel="noopener">flask：RuntimeError: Working outside of application context.</a></p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>新建测试文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,current_app</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">a = current_app</span><br><span class="line">b = current_app.config[<span class="string">'DEBUG'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>当运行文件时会报错：<br><code>RuntimeError: Working outside of application context.</code></p><p>查看current_app源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># context locals</span></span><br><span class="line">_request_ctx_stack = LocalStack()</span><br><span class="line">_app_ctx_stack = LocalStack()</span><br><span class="line">current_app = LocalProxy(_find_app)</span><br><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">'request'</span>))</span><br><span class="line">session = LocalProxy(partial(_lookup_req_object, <span class="string">'session'</span>))</span><br><span class="line">g = LocalProxy(partial(_lookup_app_object, <span class="string">'g'</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">current_app,request,session三者都是localProxy对象</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>查看localProxy源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@implements_bool</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalProxy</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'__local'</span>, <span class="string">'__dict__'</span>, <span class="string">'__name__'</span>, <span class="string">'__wrapped__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, local, name=None)</span>:</span></span><br><span class="line">        object.__setattr__(self, <span class="string">'_LocalProxy__local'</span>, local)</span><br><span class="line">        object.__setattr__(self, <span class="string">'__name__'</span>, name)</span><br><span class="line">        <span class="keyword">if</span> callable(local) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(local, <span class="string">'__release_local__'</span>):</span><br><span class="line">            <span class="comment"># "local" is a callable that is not an instance of Local or</span></span><br><span class="line">            <span class="comment"># LocalManager: mark it as a wrapped function.</span></span><br><span class="line">            object.__setattr__(self, <span class="string">'__wrapped__'</span>, local)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_current_object</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self.__local, <span class="string">'__release_local__'</span>):</span><br><span class="line">            <span class="keyword">return</span> self.__local()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(self.__local, self.__name__)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'no object bound to %s'</span> % self.__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dict__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._get_current_object().__dict__</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'__dict__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = self._get_current_object()</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;%s unbound&gt;'</span> % self.__class__.__name__</span><br><span class="line">        <span class="keyword">return</span> repr(obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> bool(self._get_current_object())</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> unicode(self._get_current_object())  <span class="comment"># noqa</span></span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> repr(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dir__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> dir(self._get_current_object())</span><br><span class="line">        <span class="keyword">except</span> RuntimeError:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'__members__'</span>:</span><br><span class="line">            <span class="keyword">return</span> dir(self._get_current_object())</span><br><span class="line">        <span class="keyword">return</span> getattr(self._get_current_object(), name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self._get_current_object()[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._get_current_object()[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> PY2:</span><br><span class="line">        __getslice__ = <span class="keyword">lambda</span> x, i, j: x._get_current_object()[i:j]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__setslice__</span><span class="params">(self, i, j, seq)</span>:</span></span><br><span class="line">            self._get_current_object()[i:j] = seq</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__delslice__</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">            <span class="keyword">del</span> self._get_current_object()[i:j]</span><br><span class="line"></span><br><span class="line">    __setattr__ = <span class="keyword">lambda</span> x, n, v: setattr(x._get_current_object(), n, v)</span><br><span class="line">    __delattr__ = <span class="keyword">lambda</span> x, n: delattr(x._get_current_object(), n)</span><br><span class="line">    __str__ = <span class="keyword">lambda</span> x: str(x._get_current_object())</span><br><span class="line">    __lt__ = <span class="keyword">lambda</span> x, o: x._get_current_object() &lt; o</span><br><span class="line">    __le__ = <span class="keyword">lambda</span> x, o: x._get_current_object() &lt;= o</span><br><span class="line">    __eq__ = <span class="keyword">lambda</span> x, o: x._get_current_object() == o</span><br><span class="line">    __ne__ = <span class="keyword">lambda</span> x, o: x._get_current_object() != o</span><br><span class="line">    __gt__ = <span class="keyword">lambda</span> x, o: x._get_current_object() &gt; o</span><br><span class="line">    __ge__ = <span class="keyword">lambda</span> x, o: x._get_current_object() &gt;= o</span><br><span class="line">    __cmp__ = <span class="keyword">lambda</span> x, o: cmp(x._get_current_object(), o)  <span class="comment"># noqa</span></span><br><span class="line">    __hash__ = <span class="keyword">lambda</span> x: hash(x._get_current_object())</span><br><span class="line">    __call__ = <span class="keyword">lambda</span> x, *a, **kw: x._get_current_object()(*a, **kw)</span><br><span class="line">    __len__ = <span class="keyword">lambda</span> x: len(x._get_current_object())</span><br><span class="line">    __getitem__ = <span class="keyword">lambda</span> x, i: x._get_current_object()[i]</span><br><span class="line">    __iter__ = <span class="keyword">lambda</span> x: iter(x._get_current_object())</span><br><span class="line">    __contains__ = <span class="keyword">lambda</span> x, i: i <span class="keyword">in</span> x._get_current_object()</span><br><span class="line">    __add__ = <span class="keyword">lambda</span> x, o: x._get_current_object() + o</span><br><span class="line">    __sub__ = <span class="keyword">lambda</span> x, o: x._get_current_object() - o</span><br><span class="line">    __mul__ = <span class="keyword">lambda</span> x, o: x._get_current_object() * o</span><br><span class="line">    __floordiv__ = <span class="keyword">lambda</span> x, o: x._get_current_object() // o</span><br><span class="line">    __mod__ = <span class="keyword">lambda</span> x, o: x._get_current_object() % o</span><br><span class="line">    __divmod__ = <span class="keyword">lambda</span> x, o: x._get_current_object().__divmod__(o)</span><br><span class="line">    __pow__ = <span class="keyword">lambda</span> x, o: x._get_current_object() ** o</span><br><span class="line">    __lshift__ = <span class="keyword">lambda</span> x, o: x._get_current_object() &lt;&lt; o</span><br><span class="line">    __rshift__ = <span class="keyword">lambda</span> x, o: x._get_current_object() &gt;&gt; o</span><br><span class="line">    __and__ = <span class="keyword">lambda</span> x, o: x._get_current_object() &amp; o</span><br><span class="line">    __xor__ = <span class="keyword">lambda</span> x, o: x._get_current_object() ^ o</span><br><span class="line">    __or__ = <span class="keyword">lambda</span> x, o: x._get_current_object() | o</span><br><span class="line">    __div__ = <span class="keyword">lambda</span> x, o: x._get_current_object().__div__(o)</span><br><span class="line">    __truediv__ = <span class="keyword">lambda</span> x, o: x._get_current_object().__truediv__(o)</span><br><span class="line">    __neg__ = <span class="keyword">lambda</span> x: -(x._get_current_object())</span><br><span class="line">    __pos__ = <span class="keyword">lambda</span> x: +(x._get_current_object())</span><br><span class="line">    __abs__ = <span class="keyword">lambda</span> x: abs(x._get_current_object())</span><br><span class="line">    __invert__ = <span class="keyword">lambda</span> x: ~(x._get_current_object())</span><br><span class="line">    __complex__ = <span class="keyword">lambda</span> x: complex(x._get_current_object())</span><br><span class="line">    __int__ = <span class="keyword">lambda</span> x: int(x._get_current_object())</span><br><span class="line">    __long__ = <span class="keyword">lambda</span> x: long(x._get_current_object())  <span class="comment"># noqa</span></span><br><span class="line">    __float__ = <span class="keyword">lambda</span> x: float(x._get_current_object())</span><br><span class="line">    __oct__ = <span class="keyword">lambda</span> x: oct(x._get_current_object())</span><br><span class="line">    __hex__ = <span class="keyword">lambda</span> x: hex(x._get_current_object())</span><br><span class="line">    __index__ = <span class="keyword">lambda</span> x: x._get_current_object().__index__()</span><br><span class="line">    __coerce__ = <span class="keyword">lambda</span> x, o: x._get_current_object().__coerce__(x, o)</span><br><span class="line">    __enter__ = <span class="keyword">lambda</span> x: x._get_current_object().__enter__()</span><br><span class="line">    __exit__ = <span class="keyword">lambda</span> x, *a, **kw: x._get_current_object().__exit__(*a, **kw)</span><br><span class="line">    __radd__ = <span class="keyword">lambda</span> x, o: o + x._get_current_object()</span><br><span class="line">    __rsub__ = <span class="keyword">lambda</span> x, o: o - x._get_current_object()</span><br><span class="line">    __rmul__ = <span class="keyword">lambda</span> x, o: o * x._get_current_object()</span><br><span class="line">    __rdiv__ = <span class="keyword">lambda</span> x, o: o / x._get_current_object()</span><br><span class="line">    <span class="keyword">if</span> PY2:</span><br><span class="line">        __rtruediv__ = <span class="keyword">lambda</span> x, o: x._get_current_object().__rtruediv__(o)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        __rtruediv__ = __rdiv__</span><br><span class="line">    __rfloordiv__ = <span class="keyword">lambda</span> x, o: o // x._get_current_object()</span><br><span class="line">    __rmod__ = <span class="keyword">lambda</span> x, o: o % x._get_current_object()</span><br><span class="line">    __rdivmod__ = <span class="keyword">lambda</span> x, o: x._get_current_object().__rdivmod__(o)</span><br><span class="line">    __copy__ = <span class="keyword">lambda</span> x: copy.copy(x._get_current_object())</span><br><span class="line">    __deepcopy__ = <span class="keyword">lambda</span> x, memo: copy.deepcopy(x._get_current_object(), memo)</span><br></pre></td></tr></table></figure><h3 id="探究以下问题"><a href="#探究以下问题" class="headerlink" title="探究以下问题"></a>探究以下问题</h3><p>AppContext、RequestContext、Flask与Request之间的关系</p><p>flask中上下文机制：<br>flask中上下文是一种对象<br>‘’’<br><em>应用上下文： 对象   Flask</em><br><em>请求上下文： 对象   Request</em><br>Flask  –&gt; Appcontext<br>Request –&gt; RequestContext<br>‘’’<br>#Appcontext是对Flask的封装，将Flask的外部操作封装到Appcontext对象中<br>#Request同上</p><p>通过<br><code>from flask import current_app,request</code><br>实际是通过LocalProxy方法找到flask核心对象和Request类</p><p>flask核心机制图解<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/feenlyn/20210524195007.png" alt=""></p><p>flask实现栈的对象是LocalStack<br>falsk实例化两个栈：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_app_ctx_stack = LocalStack()</span><br><span class="line">_request_ctx_stack = LocalStack()</span><br></pre></td></tr></table></figure><p>当请求进入时，<code>RequestContext</code>先被实例化，实例化后推入<code>_reuqest_ctx_stack</code>栈中，此时flask会检测<code>_app_ctx_stack</code>栈顶是否为空，如果为空flask会将当前应用对象AppContext实例化后推入<code>_app_ctx_stack</code>栈顶</p><p><code>current_app=LoaclProxy(find_app)</code>中find_app源码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_app</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#取栈顶对象</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="comment">#返回栈顶AppContext中的app对象</span></span><br><span class="line">    <span class="keyword">return</span> top.app</span><br></pre></td></tr></table></figure><p>此时current_app返回应用上下文AppContext中app对象</p><p><code>request=LocalProxy(partial(_lookup_req_object,’request’))</code>中<code>_lookup_req_objext</code>源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="comment">#获取request栈顶对象</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="comment">#返回栈顶对象的name</span></span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br></pre></td></tr></table></figure><p><code>current_app</code>和<code>request</code>永远指向两个栈的栈顶对象<br/><br>以上可看出，当请求通过flask访问时，会先生成Request请求上下文对象的实例化，并通过request代理指向request对象。然后由flask来实例化AppContext 对象，并推入栈中，从而让current_app有指向对象<br/><br>当进行离线应用、单元测试时，因为没有触发request请求，需要自行将应用上下文推入栈中。再手动弹出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">ctx = app.app_context()</span><br><span class="line">ctx.push()</span><br><span class="line">a = current_app</span><br><span class="line">curent_app.config[<span class="string">'DEBUG'</span>]</span><br><span class="line">ctx.pop()</span><br></pre></td></tr></table></figure><p>可以优化成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,current_app</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    a = current_app</span><br><span class="line">    b = current_app.config[<span class="string">'DEBUG'</span>]</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">app_context()方法返回一个AppContext应用上下文管理器</span></span><br><span class="line"><span class="string">在AppContext中定义了__enter__和__exit__方法</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>Appcontext中上下文管理器部分源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.push()</span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, tb)</span>:</span></span><br><span class="line">    self.pop(exc_value)</span><br></pre></td></tr></table></figure><p>因此在with语句中，AppContext中定义了<strong>exit</strong>方法，所以当current_app离开with语句中时，_app_ctx_stack栈顶的AppContext已被弹出，current_app没有任何指向对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_35993084/article/details/8060913
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>[转]Flask --- Flask + Vue 生成漂亮的词云</title>
    <link href="http://yoursite.com/2021/07/24/%E8%BD%AC-Flask-Python%E7%9A%84Web%E6%A1%86%E6%9E%B6Flask-Vue-%E7%94%9F%E6%88%90%E6%BC%82%E4%BA%AE%E7%9A%84%E8%AF%8D%E4%BA%91/"/>
    <id>http://yoursite.com/2021/07/24/%E8%BD%AC-Flask-Python%E7%9A%84Web%E6%A1%86%E6%9E%B6Flask-Vue-%E7%94%9F%E6%88%90%E6%BC%82%E4%BA%AE%E7%9A%84%E8%AF%8D%E4%BA%91/</id>
    <published>2021-07-24T12:00:00.000Z</published>
    <updated>2021-07-24T12:01:26.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://cloud.tencent.com/developer/article/1592758" target="_blank" rel="noopener">Python的Web框架Flask + Vue 生成漂亮的词云</a></p><h3 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h3><ul><li>编写完前端代码后, 打包生成dist文件</li><li>flask后端, 返回dist文件中的首页</li><li>完成了</li></ul><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br><span class="line">npm install --save axios</span><br></pre></td></tr></table></figure><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'App'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="pages-WordCloud-vue"><a href="#pages-WordCloud-vue" class="headerlink" title="pages/WordCloud.vue"></a>pages/WordCloud.vue</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>小词云<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"word-text-area"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"textarea"</span> <span class="attr">:rows</span>=<span class="string">"10"</span> <span class="attr">placeholder</span>=<span class="string">"请输入内容"</span> <span class="attr">v-model</span>=<span class="string">"textarea"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"word-img"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-image</span> <span class="attr">:src</span>=<span class="string">"'data:image/png;base64,'+pic"</span> <span class="attr">:fit</span>=<span class="string">"fit"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"error"</span> <span class="attr">class</span>=<span class="string">"image-slot"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-picture-outline"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"word-operation"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"onSubmit"</span> <span class="attr">round</span>&gt;</span>生成词云<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"success"</span> @<span class="attr">click</span>=<span class="string">"onDownload"</span> <span class="attr">round</span>&gt;</span>下载图片<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">'wordcloud'</span>,</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                textarea: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                pic: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">                pageTitle: <span class="string">'Flask Vue Word Cloud'</span>,</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            onSubmit() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> param = &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="string">"word"</span>: <span class="keyword">this</span>.textarea</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.axios.post(<span class="string">"/word/cloud/generate"</span>, param).then(</span></span><br><span class="line">                    res =&gt; &#123;</span><br><span class="line"><span class="actionscript">                        <span class="keyword">this</span>.pic = res.data</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(res.data)</span></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                ).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(res.data.res)</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            onDownload() &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> imgUrl = <span class="string">'data:image/png;base64,'</span> + <span class="keyword">this</span>.pic</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span></span><br><span class="line">                a.href = imgUrl</span><br><span class="line"><span class="actionscript">                a.setAttribute(<span class="string">'download'</span>, <span class="string">'word-cloud'</span>)</span></span><br><span class="line">                a.click()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line">Vue.prototype.axios = axios</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="router-index-js"><a href="#router-index-js" class="headerlink" title="router/index.js"></a>router/index.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> WordCloud <span class="keyword">from</span> <span class="string">'@/pages/WordCloud'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'index'</span>,</span><br><span class="line">      component: WordCloud</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><h4 id="routers-py"><a href="#routers-py" class="headerlink" title="routers.py"></a>routers.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">"../frontend/dist"</span>, static_folder=<span class="string">"../frontend/dist/static"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 真正调用词云库生成图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_word_cloud</span><span class="params">(text)</span>:</span></span><br><span class="line">    font = <span class="string">"backend/SimHei.ttf"</span></span><br><span class="line">    <span class="comment"># pil_img = WordCloud(width=500, height=500, font_path=font).generate(text=text).to_image()</span></span><br><span class="line"></span><br><span class="line">    pil_img = WordCloud(width=<span class="number">800</span>, height=<span class="number">300</span>, background_color=<span class="string">"white"</span>, font_path=font).generate(text=text).to_image()</span><br><span class="line">    img = io.BytesIO()</span><br><span class="line">    pil_img.save(img, <span class="string">"PNG"</span>)</span><br><span class="line">    img.seek(<span class="number">0</span>)</span><br><span class="line">    img_base64 = base64.b64encode(img.getvalue()).decode()</span><br><span class="line">    <span class="keyword">return</span> img_base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主页面</span></span><br><span class="line"><span class="meta">@app.route('/', endpoint="index")</span></span><br><span class="line"><span class="meta">@app.route('/index', endpoint="index")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成词云图片接口，以base64格式返回</span></span><br><span class="line"><span class="meta">@app.route('/word/cloud/generate', methods=["POST"], endpoint="cloud")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cloud</span><span class="params">()</span>:</span></span><br><span class="line">    text = request.json.get(<span class="string">"word"</span>)</span><br><span class="line">    res = get_word_cloud(text)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1592758&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Golang --- 如何在exec连接ssh后, 还能继续操作</title>
    <link href="http://yoursite.com/2021/07/24/Golang-%E5%A6%82%E4%BD%95%E5%9C%A8exec%E8%BF%9E%E6%8E%A5ssh%E5%90%8E-%E8%BF%98%E8%83%BD%E7%BB%A7%E7%BB%AD%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2021/07/24/Golang-%E5%A6%82%E4%BD%95%E5%9C%A8exec%E8%BF%9E%E6%8E%A5ssh%E5%90%8E-%E8%BF%98%E8%83%BD%E7%BB%A7%E7%BB%AD%E6%93%8D%E4%BD%9C/</id>
    <published>2021-07-24T11:57:00.000Z</published>
    <updated>2021-07-24T11:57:38.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>需要使用<code>cmd := exec.Command(&quot;ssh&quot;, &quot;-t&quot;, &quot;xxx@access.oa.xx.im&quot;)</code>命令, 连接后还要保持可操作, 但实际上, 连接完成后就退出了程序, 报错如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0, Pseudo-terminal will not be allocated because stdin is not a terminal.</span><br></pre></td></tr></table></figure><p>根据网上的一些搜索结果, 把<code>-t</code>改为<code>-tt</code>也还是无效.</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p>改成如下形式</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">binary, lookErr := exec.LookPath(<span class="string">"ssh"</span>)</span><br><span class="line"><span class="keyword">if</span> lookErr != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(lookErr)</span><br><span class="line">&#125;</span><br><span class="line">syscall.Exec(binary, []<span class="keyword">string</span>&#123;<span class="string">"ssh"</span>, <span class="string">"xxx@access.oa.xxx.im"</span>&#125;, os.Environ())</span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://stackoverflow.com/questions/61293342/execute-ssh-in-golang" target="_blank" rel="noopener">Execute ssh in golang</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;需要使用&lt;code&gt;cmd := exec.Command(&amp;quot;ssh&amp;quot;, &amp;quot;-t&amp;quot;, &amp;quot;x
      
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>其他 --- Mac终端Iterm2快捷键大全</title>
    <link href="http://yoursite.com/2021/07/24/%E5%85%B6%E4%BB%96-Mac%E7%BB%88%E7%AB%AFIterm2%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2021/07/24/%E5%85%B6%E4%BB%96-Mac%E7%BB%88%E7%AB%AFIterm2%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</id>
    <published>2021-07-24T11:56:00.000Z</published>
    <updated>2021-07-24T11:59:34.761Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标签-tab"><a href="#标签-tab" class="headerlink" title="标签(tab)"></a>标签(tab)</h3><ul><li>新建标签: command + t</li><li>关闭标签: command + w</li><li>切换标签: command + 数字 or command + &lt;-|-&gt;</li><li>切换全屏: command + enter</li><li>查找: command + f</li></ul><h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><p>单标签内分屏</p><ul><li>垂直分屏: command + d</li><li>水平分屏: command + shift + d</li><li>切换屏幕: command + option + 方向键</li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li>历史命令: command + ;(分号)</li><li>剪贴板历史: command + shift + h</li><li>上一条命令: ctrl + p</li><li>搜索历史命令: ctrl + r</li></ul><h3 id="行内"><a href="#行内" class="headerlink" title="行内"></a>行内</h3><ul><li>清除当前行: ctrl + u</li><li>到行首: ctrl + a</li><li>到行胃: ctrl + e</li><li>前进/后退: ctrl + f/b</li><li>删除当前光标的字符: ctrl + d</li><li>删除光标之前的字符: ctrl + h</li><li>删除光标之前的单词: ctrl + w</li><li>删除到文本末尾: ctrl + k</li><li>交换光标处文本: ctrl + t</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>清屏: command + r or ctrl + l</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;标签-tab&quot;&gt;&lt;a href=&quot;#标签-tab&quot; class=&quot;headerlink&quot; title=&quot;标签(tab)&quot;&gt;&lt;/a&gt;标签(tab)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;新建标签: command + t&lt;/li&gt;
&lt;li&gt;关闭标签: command + w&lt;/
      
    
    </summary>
    
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>[转]Linux --- nginx中, 配置ipip地址库</title>
    <link href="http://yoursite.com/2021/07/24/Linux-nginx%E4%B8%AD-%E9%85%8D%E7%BD%AEipip%E5%9C%B0%E5%9D%80%E5%BA%93/"/>
    <id>http://yoursite.com/2021/07/24/Linux-nginx%E4%B8%AD-%E9%85%8D%E7%BD%AEipip%E5%9C%B0%E5%9D%80%E5%BA%93/</id>
    <published>2021-07-24T11:55:00.000Z</published>
    <updated>2021-08-07T11:40:19.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://www.jianshu.com/p/4016c2f15d90" target="_blank" rel="noopener">lua - ipip地址库</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/feenlyn/20210723174008.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/4016c2f15d90&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]Linux --- 使用homebrew安装OpenResty失败的可能原因</title>
    <link href="http://yoursite.com/2021/07/24/%E8%BD%AC-%E4%BD%BF%E7%94%A8homebrew%E5%AE%89%E8%A3%85OpenResty%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/"/>
    <id>http://yoursite.com/2021/07/24/%E8%BD%AC-%E4%BD%BF%E7%94%A8homebrew%E5%AE%89%E8%A3%85OpenResty%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</id>
    <published>2021-07-24T11:55:00.000Z</published>
    <updated>2021-08-07T11:39:13.510Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://lsqi.github.io/posts/14066.html" target="_blank" rel="noopener">使用homebrew安装OpenResty</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/feenlyn/20210723173551.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://lsqi.github.io/posts/14066.html&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>Linux --- nohup和&amp;后台运行</title>
    <link href="http://yoursite.com/2021/07/24/Linux-nohup%E5%92%8C-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
    <id>http://yoursite.com/2021/07/24/Linux-nohup%E5%92%8C-%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</id>
    <published>2021-07-24T11:54:00.000Z</published>
    <updated>2021-07-24T11:54:45.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><p>用途：不挂断地运行命令。我们在使用Xshell等工具执行Linux脚本时，有时候会由于网络问题，导致失去连接，终端断开，程序运行一半就意外结束了。这种时候，就可以用nohup指令来运行指令，使程序可以忽略挂起信号继续运行。  </p><p>语法：nohup Command [ Arg … ] [　&amp; ]    </p><p>无论是否将<code>nohup</code>命令的输出重定向到终端,输出都将附加到当前目录的 <code>nohup.out</code> 文件中。</p><p>如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。</p><p>如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。</p><p>退出状态：该命令返回下列出口值：   </p><p>126 可以查找但不能调用 Command 参数指定的命令.</p><p>127 nohup 命令发生错误或不能查找由 Command 参数指定的命令.  </p><p>否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。</p><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>用途：在后台运行<br>一般两个一起用<br>nohup command &amp;  </p><h3 id="nohup和-amp-的区别"><a href="#nohup和-amp-的区别" class="headerlink" title="nohup和&amp;的区别"></a>nohup和&amp;的区别</h3><p>&amp;：是指在后台运行，当用户退出（挂起）的时候，命令自动跟着结束 </p><p>nohup：不挂断的运行，注意并没有后台运行的功能，就是指用nohup运行命令可以使命令永久的执行下去，和用户终端没有关系，例如我们断开SSH连接都不会影响他的运行，注意了nohup没有后台运行的意思；&amp;才是后台运行  </p><p>因此将nohup和&amp;结合使用，就可以实现使命令永久地在后台执行的功能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nohup&quot;&gt;&lt;a href=&quot;#nohup&quot; class=&quot;headerlink&quot; title=&quot;nohup&quot;&gt;&lt;/a&gt;nohup&lt;/h3&gt;&lt;p&gt;用途：不挂断地运行命令。我们在使用Xshell等工具执行Linux脚本时，有时候会由于网络问题，导致失去连接，终端断
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>网络 --- vegeta压测工具使用</title>
    <link href="http://yoursite.com/2021/06/20/%E7%BD%91%E7%BB%9C-vegeta%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2021/06/20/%E7%BD%91%E7%BB%9C-vegeta%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</id>
    <published>2021-06-20T07:05:00.000Z</published>
    <updated>2021-07-24T11:53:40.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Vegeta 是一个用 Go 语言编写的多功能的 HTTP 负载测试工具，它提供了命令行工具和一个开发库。</p><p>官方地址：<a href="https://github.com/tsenart/vegeta" target="_blank" rel="noopener">https://github.com/tsenart/vegeta</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>mac版本:<code>brew install vegeta</code><br>其他版本没试过, 去上面的github看</p><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-cpus int:    使用 CPU 的数量 (默认为 4 个)</span><br><span class="line">-profile string:    指定在执行期间启用哪个分析器，支持 cpu 和 heap。</span><br><span class="line">-version:    打印版本并退出。attack command:</span><br><span class="line">-body string:    指定请求主体文件里的内容。</span><br><span class="line">-cert string:    指定用于 HTTPS 请求的 PEM 格式的客户端证书文件。如果 -key 未指定，它会被设置为这个标志的值。</span><br><span class="line">-connections int:    指定每个目标主机打开的空闲连接的最大数目，默认值为 10000。</span><br><span class="line">-duration duration:    指定发送请求到目标主机的时长，用 0 表示永久。</span><br><span class="line">-header value:    指定目标的请求头，可以重复指定多个请求头。</span><br><span class="line">-http2:    指定是否向支持的服务器发送 HTTP&#x2F;2 请求，默认为：true。</span><br><span class="line">-insecure:    指定是否忽略无效的服务器 TLS 证书。</span><br><span class="line">-keepalive:    指定是否使用持久链接，默认值为：true。</span><br><span class="line">-key string:    指定 HTTPS 请求中使用的 PEM 编码的 SSL 客户端证书私钥文件。</span><br><span class="line">-laddr value:    指定要使用的本地 I P地址，默认值为：0.0.0.0。</span><br><span class="line">-lazy:    指定是否使用延迟模式读取目标。</span><br><span class="line">-output string:    指定输出文件的位置，默认为标准输出。</span><br><span class="line">-rate uint:    指定每秒钟对目标发送的请求数，默认值为：50。</span><br><span class="line">-redirects int:    指定每个请求的重定向的最大次数，默认为 10 次。当值为 -1, 不会遵循重定向但响应标记为成功。</span><br><span class="line">-root-certs value:    指定可信的 TLS 根证书文件，多个的情况下使用逗号分隔。如果未指定，使用系统默认的 CA 证书。</span><br><span class="line">-targets string:    指定目标文件，默认为标准输入。</span><br><span class="line">-timeout duration:    指定每个请求的超时时间，默认值为 30s。</span><br><span class="line">-workers uint:    指定初始化进程数量，默认值为 10。</span><br><span class="line">-inputs string:    指定报告输入文件，默认为标准输入。</span><br><span class="line">-output string:    指定报告输出文件，默认为标准输出。</span><br><span class="line">-reporter string:    指定要生成的报告的格式，支持 text，json, plot, hist[buckets]。默认为文本。dump command:</span><br><span class="line">-dumper string:    指定转存文件，支持 json, csv 格式。默认为 json 格式。</span><br><span class="line">-inputs string:    指定要转存的输入文件，默认为标准输入，指定多个用逗号分隔。</span><br><span class="line">-output string:    指定要转存的输出文件，默认为标准输出。</span><br></pre></td></tr></table></figure><h3 id="输出介绍"><a href="#输出介绍" class="headerlink" title="输出介绍"></a>输出介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#使用标准输入进行压测并生成报告</span><br><span class="line">[root@localhost1]echo &quot;GET http:&#x2F;&#x2F;10.0.0.141&quot;| vegeta attack -rate&#x3D;500 -connections&#x3D;1 -duration&#x3D;1s | tee results.bin | vegeta report</span><br><span class="line">Requests（请求）      [total（请求总数）, rate（请求速度）]            500, 501.00</span><br><span class="line">Duration（攻击）      [total（总共攻击与等待的时间）, attack（攻击的时间）, wait（等待时间）]    998.571503ms, 997.999647ms, 571.856µs</span><br><span class="line">Latencies（执行时间）     [mean（单个请求的平均值）, 50（50%请求达到的时间）, 95, 99, max（单个最大请求时间）]  1.088556ms, 561.997µs, 2.414125ms, 12.116341ms, 22.107566ms</span><br><span class="line">Bytes In（请求的大小（字节））      [total（请求总大小）, mean（请求平均大小）]            306000, 612.00</span><br><span class="line">Bytes Out（字节输出）     [total（总输出）, mean（平均输出）]            0, 0.00</span><br><span class="line">Success（请求成功率）       [ratio（请求成功率）]                  100.00%</span><br><span class="line">Status Codes  [code（状态码）:count（请求次数）]             200:500 </span><br><span class="line">Error Set:（错误集）</span><br></pre></td></tr></table></figure><p>举例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">❯ echo &quot;GET http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;2&quot; | vegeta attack -duration&#x3D;20s  -rate&#x3D;0 -max-workers&#x3D;200 -workers&#x3D;200 | tee results.bin | vegeta report</span><br><span class="line">Requests      [total, rate, throughput]         376, 18.74, 6.51</span><br><span class="line">Duration      [total, attack, wait]             32.885s, 20.064s, 12.821s</span><br><span class="line">Latencies     [min, mean, 50, 90, 95, 99, max]  533.233µs, 13.995s, 16.971s, 24.209s, 30s, 30.003s, 30.003s</span><br><span class="line">Bytes In      [total, mean]                     3638, 9.68</span><br><span class="line">Bytes Out     [total, mean]                     0, 0.00</span><br><span class="line">Success       [ratio]                           56.91%</span><br><span class="line">Status Codes  [code:count]                      0:162  200:214</span><br><span class="line">Error Set:</span><br><span class="line">Get &quot;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;2&quot;: read tcp 127.0.0.1:50213-&gt;127.0.0.1:8888: read: connection reset by peer</span><br><span class="line">Get &quot;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;2&quot;: read tcp 127.0.0.1:50217-&gt;127.0.0.1:8888: read: connection reset by peer</span><br><span class="line">Get &quot;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;2&quot;: read tcp 127.0.0.1:50218-&gt;127.0.0.1:8888: read: connection reset by peer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;Vegeta 是一个用 Go 语言编写的多功能的 HTTP 负载测试工具，它提供了命令行工具和一个开发库。&lt;/p&gt;
&lt;p&gt;官方地址：&lt;a h
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 一文搞懂CIDR地址块及其子网划分</title>
    <link href="http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82CIDR%E5%9C%B0%E5%9D%80%E5%9D%97%E5%8F%8A%E5%85%B6%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/"/>
    <id>http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82CIDR%E5%9C%B0%E5%9D%80%E5%9D%97%E5%8F%8A%E5%85%B6%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86/</id>
    <published>2021-06-05T13:11:00.000Z</published>
    <updated>2021-08-07T11:37:28.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/iryUdWwfM8icgUvolPGJXw" target="_blank" rel="noopener">一文搞懂CIDR地址块及其子网划分</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/feenlyn/20210601185953.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/iryUdWwfM8icgUvolPGJXw&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 分析ARP协议、图文拆解交换机、路由器转发原理</title>
    <link href="http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E5%88%86%E6%9E%90ARP%E5%8D%8F%E8%AE%AE%E3%80%81%E5%9B%BE%E6%96%87%E6%8B%86%E8%A7%A3%E4%BA%A4%E6%8D%A2%E6%9C%BA%E3%80%81%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BD%AC%E5%8F%91%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E5%88%86%E6%9E%90ARP%E5%8D%8F%E8%AE%AE%E3%80%81%E5%9B%BE%E6%96%87%E6%8B%86%E8%A7%A3%E4%BA%A4%E6%8D%A2%E6%9C%BA%E3%80%81%E8%B7%AF%E7%94%B1%E5%99%A8%E8%BD%AC%E5%8F%91%E5%8E%9F%E7%90%86/</id>
    <published>2021-06-05T13:10:00.000Z</published>
    <updated>2021-08-07T11:38:58.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://blog.51cto.com/ganbing/1210952" target="_blank" rel="noopener">几句话让你明白：分析ARP协议、图文拆解交换机/路由器转发原理</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/feenlyn/20210602111212.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.51cto.com/ganbing/1210952&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 万字详解BGP路由技术原理及配置命令！</title>
    <link href="http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3BGP%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%EF%BC%81/"/>
    <id>http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-%E4%B8%87%E5%AD%97%E8%AF%A6%E8%A7%A3BGP%E8%B7%AF%E7%94%B1%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4%EF%BC%81/</id>
    <published>2021-06-05T13:09:00.000Z</published>
    <updated>2021-08-07T11:40:03.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="">【干货】万字详解BGP路由技术原理及配置命令！</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/feenlyn/20210531142221.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;【干货】万字详解BGP路由技术原理及配置命令！&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; c
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- IPv4地址表示法详解</title>
    <link href="http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-IPv4%E5%9C%B0%E5%9D%80%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2021/06/05/%E8%BD%AC-%E7%BD%91%E7%BB%9C-IPv4%E5%9C%B0%E5%9D%80%E8%A1%A8%E7%A4%BA%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-06-05T13:09:00.000Z</published>
    <updated>2021-08-07T11:38:30.989Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://bbs.huaweicloud.com/blogs/154835" target="_blank" rel="noopener">IPv4地址表示法详解</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/feenlyn/20210601103005.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://bbs.huaweicloud.com/blogs/154835&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 网络排查工具 MTR 介绍</title>
    <link href="http://yoursite.com/2021/05/30/%E8%BD%AC-%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2021/05/30/%E8%BD%AC-%E7%BD%91%E7%BB%9C/</id>
    <published>2021-05-30T07:34:00.000Z</published>
    <updated>2021-06-05T13:15:44.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/pwjC33dHluktpZPxSNZ-BQ" target="_blank" rel="noopener">网络排查工具 MTR 介绍</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210530153209.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/pwjC33dHluktpZPxSNZ-BQ&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]Vue -- Vue项目启动代码执行流程分析</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-vue-Vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-vue-Vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</id>
    <published>2021-05-29T06:11:00.000Z</published>
    <updated>2021-05-29T06:57:01.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://blog.csdn.net/IT__learning/article/details/114294180" target="_blank" rel="noopener">Vue文件加载执行流程</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一般一个初步的Vue项目创建好之后都会有这三个文件：<code>index.html</code> 、<code>main.js</code> 和<code>App.js</code>。</p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>Vue是单页面形式开发，index.html文件在其中起着特别重要的作用。所有组件（后缀名为.vue都被视为组件）都会通过此文件进行渲染加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>y<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在body体中只有一个div标签，其id为app,这个id将会连接到src/main.js内容</p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>相当于一个C/Java中的入口函数，控制着初次启动Vue项目要加载的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> lhj <span class="keyword">from</span> <span class="string">'./components/lhj'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">"vue-axios"</span>;</span><br><span class="line">Vue.use(VueAxios,axios)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  watch:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在main.js中，新建了一个vue实例，并使用el：#app链接到index.html中的app，并使用template引入组件和路由相关的内容，也就是说通过main.js我们关联到App.vue组件。</p><p>（1）import A from ‘B’ <br/><br>这类语句相当于引入B（这一般是路径）然后给它起个名字叫做A；<br/><br>（2）Vue.use（C）<br/><br>这个意思是全局方法定义C。也就是说，定义以后你可以在这个Vue项目的任意地方使用该组件。<br/><br>（3）el: ‘#app’<br/><br>这个和index.html中的相挂钩。<br/></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板将会替换挂载的元素，挂载元素的内容都将被忽略。</p><p>也就是说:template: ‘&lt; App/&gt;’ 表示用&lt; app&gt;&lt; /app&gt;替换index.html里面的&lt; div id=“app”&gt;，然后index.html文件被初步解析为这种形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myapp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）watch ： 用来监听路由的变化，可以用来定义页面切换时过渡效果。</p><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>标准的App.vue模板的形式，包含了<code>&lt;template&gt;&lt;/template&gt;</code>、<code>&lt;script&gt;&lt;/script&gt;</code>、<code>&lt;style&gt;&lt;/style&gt;</code>三部分。<br>（1）export中的name属性，相当于给这个组件定义一个名字，便于识别和使用。<br/><br>（2）&lt; template&gt;标签下，除了&lt; img&gt;标签外，还有&lt; router-view&gt;标签，&lt; router-view&gt;标签将会把路由相关内容渲染在这个地方。路由的内容定义在src/router/index.js文件中。<br/></p><h3 id="src-router-index-js"><a href="#src-router-index-js" class="headerlink" title="src/router/index.js"></a>src/router/index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在index.js的代码中，建立了路由相关的内容，也就会渲染到app.vue下面的&lt; router-view&gt;中。<br/><br>（1）引入组件的代码<br/><br>引入的时候注意好格式、路径就行。<br/><br>（2）routes定义<br/><br>● path：页面间路由跳转的路径；<br/><br>● name：该路由的名称；<br/><br>● component：组件名，要和你引入组件时定义的名字保持一致。<br/></p><h3 id="Vue加载时文件的执行顺序"><a href="#Vue加载时文件的执行顺序" class="headerlink" title="Vue加载时文件的执行顺序"></a>Vue加载时文件的执行顺序</h3><p>1、执行index.html文件 <br/><br>2、执行main.js文件 <br/><br>3、main.js挂载了app.vue文件，用app.vue的templete替换index.html中的<br/><br>4、main.js中注入了路由文件，将对应的组件渲染到router-view中<br/> 5、router-view中加载Layout文件<br/><br>6、Layout 加载Navbar, Sidebar, AppMain</p><h3 id="Vue内部页面的执行顺序"><a href="#Vue内部页面的执行顺序" class="headerlink" title="Vue内部页面的执行顺序"></a>Vue内部页面的执行顺序</h3><p>Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。但是模板毕竟是模板，不是真实的dom节点。从模板到真实dom节点还需要经过一些步骤：<br/></p><p>1、把模板编译为render函数 <br/><br>2、实例进行挂载,根据根节点render函数的调用，递归的生成虚拟dom<br/><br>3、对比虚拟dom，渲染到真实dom<br/><br>4、组件内部data发生变化，组件和子组件引用data作为props重新调用render函数，生成虚拟dom, 返回到步骤3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/IT__learning/article/details/114294180&quot;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]Vue -- axios拦截器</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-vue-axios%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-vue-axios%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2021-05-29T06:09:00.000Z</published>
    <updated>2021-05-29T06:56:53.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://hupeip.github.io/2018/10/08/axios%E6%8B%A6%E6%88%AA%E5%99%A8/" target="_blank" rel="noopener">axios拦截器</a></p><h3 id="axios拦截器简单介绍"><a href="#axios拦截器简单介绍" class="headerlink" title="axios拦截器简单介绍"></a>axios拦截器简单介绍</h3><p>页面发送http请求，很多情况我们要对请求和其响应进行特定的处理；如果请求数非常多，单独对每一个请求进行处理会变得非常麻烦，程序的优雅性也会大打折扣。好在强大的axios为开发者提供了这样一个API：拦截器。拦截器分为 请求（request）拦截器和 响应（response）拦截器。</p><h4 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发起请求请做一些业务处理</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求失败做处理</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做处理</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做处理</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="vue添加axios拦截器"><a href="#vue添加axios拦截器" class="headerlink" title="vue添加axios拦截器"></a>vue添加axios拦截器</h3><h4 id="安装-axios"><a href="#安装-axios" class="headerlink" title="安装 axios"></a>安装 axios</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios –save-dev</span><br></pre></td></tr></table></figure><h4 id="新建文件-axios-js"><a href="#新建文件-axios-js" class="headerlink" title="新建文件 axios.js"></a>新建文件 axios.js</h4><p>开始统一封装axios， 首先引入axios、qs依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">"qs"</span>;</span><br></pre></td></tr></table></figure><p>然后创建一个axios实例，这个process.env.BASE_URL在config/dev.evn.js、prod.evn.js里面进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** 创建axios实例 ******/</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: process.env.BASE_URL,  <span class="comment">// api的base_url</span></span><br><span class="line">    timeout: <span class="number">5000</span>  <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用request拦截器对axios请求配置做统一处理"><a href="#使用request拦截器对axios请求配置做统一处理" class="headerlink" title="使用request拦截器对axios请求配置做统一处理"></a>使用request拦截器对axios请求配置做统一处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;    </span><br><span class="line">    app.$vux.loading.show(&#123;        </span><br><span class="line">        text: <span class="string">'数据加载中……'</span>    </span><br><span class="line">    &#125;);     </span><br><span class="line">    config.method === <span class="string">'post'</span>        </span><br><span class="line">        ? config.data = qs.stringify(&#123;...config.data&#125;)        </span><br><span class="line">        : config.params = &#123;...config.params&#125;;    </span><br><span class="line">    config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;     </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">    &#125;, error =&gt; &#123;  <span class="comment">//请求错误处理   </span></span><br><span class="line">        app.$vux.toast.show(&#123;        </span><br><span class="line">            type: <span class="string">'warn'</span>,        </span><br><span class="line">            text: error   </span><br><span class="line">        &#125;);    </span><br><span class="line">        <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="对response做统一处理"><a href="#对response做统一处理" class="headerlink" title="对response做统一处理"></a>对response做统一处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.response.use(    </span><br><span class="line">    response =&gt; &#123;  <span class="comment">//成功请求到数据        </span></span><br><span class="line">        app.$vux.loading.hide();        </span><br><span class="line">        <span class="comment">//这里根据后端提供的数据进行对应的处理        </span></span><br><span class="line">        <span class="keyword">if</span> (response.data.result === <span class="string">'TRUE'</span>) &#123;            </span><br><span class="line">            <span class="keyword">return</span> response.data;        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            app.$vux.toast.show(&#123;  </span><br><span class="line">                <span class="comment">//常规错误处理                </span></span><br><span class="line">                type: <span class="string">'warn'</span>,                </span><br><span class="line">                text: response.data.data.msg            </span><br><span class="line">            &#125;);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    error =&gt; &#123;  <span class="comment">//响应错误处理console.log('error');        </span></span><br><span class="line">        <span class="built_in">console</span>.log(error);        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error));         </span><br><span class="line">        <span class="keyword">let</span> text = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(error)).response.status === <span class="number">404</span>            </span><br><span class="line">            ? <span class="string">'404'</span>            </span><br><span class="line">            : <span class="string">'网络异常，请重试'</span>;        </span><br><span class="line">        app.$vux.toast.show(&#123;            </span><br><span class="line">            type: <span class="string">'warn'</span>,            </span><br><span class="line">            text: text        </span><br><span class="line">        &#125;);         </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)   </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="将axios实例暴露出去"><a href="#将axios实例暴露出去" class="headerlink" title="将axios实例暴露出去"></a>将axios实例暴露出去</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><p>这样一个简单的拦截器就完成了</p><h4 id="在main-js中进行引用，并配置一个别名（-ajax）来进行调用"><a href="#在main-js中进行引用，并配置一个别名（-ajax）来进行调用" class="headerlink" title="在main.js中进行引用，并配置一个别名（$ajax）来进行调用"></a>在main.js中进行引用，并配置一个别名（$ajax）来进行调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../axios.js'</span>    <span class="comment">//axios.js的路径</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$ajax = axios</span><br></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h4 id="应用：一个简单的登录接口"><a href="#应用：一个简单的登录接口" class="headerlink" title="应用：一个简单的登录接口"></a>应用：一个简单的登录接口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ajax(&#123;</span><br><span class="line">　　method: <span class="string">'post'</span>,</span><br><span class="line">　　url: <span class="string">'/login'</span>,</span><br><span class="line">　　data: &#123;</span><br><span class="line">　　　　<span class="string">'userName'</span>: <span class="string">'haha'</span>,</span><br><span class="line">　　　　<span class="string">'password'</span>: <span class="string">'123456'</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">　　<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h4><p>在定义路由的时候就需要多添加一个自定义字段requireAuth，用于判断该路由的访问是否需要登录。如果用户已经登录，则顺利进入路由，否则就进入登录页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'/'</span>,</span><br><span class="line">        component: Index</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/repository'</span>,</span><br><span class="line">        name: <span class="string">'repository'</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            requireAuth: <span class="literal">true</span>,  <span class="comment">// 添加该字段，表示进入这个路由是需要登录的</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: Repository</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        name: <span class="string">'login'</span>,</span><br><span class="line">        component: Login</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>定义完路由后，我们主要是利用vue-router提供的钩子函数beforeEach()对路由进行判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.meta.requireAuth) &#123;  <span class="comment">// 判断该路由是否需要登录权限</span></span><br><span class="line">        <span class="keyword">if</span> (token) &#123;  <span class="comment">// 判断当前的token是否存在</span></span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            next(&#123;</span><br><span class="line">                path: <span class="string">'/login'</span>,</span><br><span class="line">                query: &#123;<span class="attr">redirect</span>: to.fullPath&#125;  <span class="comment">// 将跳转的路由path作为参数，登录成功后跳转到该路由</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>to.meta中是我们自定义的数据，其中就包括我们刚刚定义的requireAuth字段<br>通过这个字段来判断该路由是否需要登录权限<br>需要的话，同时当前应用不存在token，则跳转到登录页面，进行登录。登录成功后跳转到目标路由。</p><p>这种方式只是简单的前端路由控制，并不能阻止用户访问，假设有一种情况：当前token失效了，但是token依然保存在本地。这时候你去访问需要登录权限的路由时，实际上应该让用户重新登录。这时候就需要结合 http 拦截器 + 后端接口返回的http 状态码来判断。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>要想统一处理所有http请求和响应，就得用上 axios 的拦截器。通过配置http response inteceptor，当后端接口返回401 Unauthorized（未授权），让用户重新登录。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (stoken) &#123;  <span class="comment">// 判断是否存在token，如果存在的话，则每个http header都加上token</span></span><br><span class="line">            config.headers.Authorization = <span class="string">`token <span class="subst">$&#123;store.state.token&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    err =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http response 拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">                    <span class="comment">// 返回 401 清除token信息并跳转到登录页面</span></span><br><span class="line">                    </span><br><span class="line">                    router.replace(&#123;</span><br><span class="line">                        path: <span class="string">'login'</span>,</span><br><span class="line">                        query: &#123;<span class="attr">redirect</span>: router.currentRoute.fullPath&#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response.data)   <span class="comment">// 返回接口返回的错误信息</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hupeip.github.io/2018/10/08/axios%E6%8B%A6%E6%88%AA%E
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue -- axios请求携带cookie</title>
    <link href="http://yoursite.com/2021/05/29/vue-axios%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6cookie/"/>
    <id>http://yoursite.com/2021/05/29/vue-axios%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6cookie/</id>
    <published>2021-05-29T06:08:00.000Z</published>
    <updated>2021-08-07T11:39:40.500Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改vue-config-js文件"><a href="#修改vue-config-js文件" class="headerlink" title="修改vue.config.js文件"></a>修改vue.config.js文件</h3><p>在该文件中, 添加<code>disableHostCheck: true</code>, 不需要host检查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: port,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: <span class="string">'http://localhost:5000'</span>,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装axios时-加上withCredentials"><a href="#封装axios时-加上withCredentials" class="headerlink" title="封装axios时, 加上withCredentials"></a>封装axios时, 加上withCredentials</h3><p>在封装axios时, 加上<code>withCredentials: true</code><br/><br>跨源请求不提供凭据(cookie、HTTP认证及客户端SSL证明等)。通过将withCredentials属性设置为true，可以指定某个请求应该发送凭据。<br/><br>默认值为false。<br/><br>true：在跨域请求时，会携带用户凭证<br/><br>false：在跨域请求时，不会携带用户凭证；返回的 response 里也会忽略 cookie<br/></p><h3 id="后端返回的数据中-修改请求头"><a href="#后端返回的数据中-修改请求头" class="headerlink" title="后端返回的数据中, 修改请求头"></a>后端返回的数据中, 修改请求头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_cors_response</span><span class="params">(response, status=<span class="number">200</span>)</span>:</span></span><br><span class="line">    resp = make_response(response, status)</span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Credentials'</span>] = <span class="string">'true'</span></span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Origin'</span>] = <span class="string">'*'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p>需要注意的是:</p><ol><li>传入的是<code>true</code>字符串, 不是<code>True</code>布尔类型</li><li>origin不能是<code>*</code>, 必须是完整的域名</li><li>可以修改hosts文件, 来将<code>127.0.0.1</code>指向测试的域名</li><li>正式环境中, 这部分操作将由nginx完成, 不在代码中写死</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修改vue-config-js文件&quot;&gt;&lt;a href=&quot;#修改vue-config-js文件&quot; class=&quot;headerlink&quot; title=&quot;修改vue.config.js文件&quot;&gt;&lt;/a&gt;修改vue.config.js文件&lt;/h3&gt;&lt;p&gt;在该文件中, 添加&lt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 互联网网络协议</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E4%BA%92%E8%81%94%E7%BD%91%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E4%BA%92%E8%81%94%E7%BD%91%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-05-29T06:07:00.000Z</published>
    <updated>2021-05-29T06:56:33.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="互联网协议入门（一）"><a href="#互联网协议入门（一）" class="headerlink" title="互联网协议入门（一）"></a><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">互联网协议入门（一）</a></h3><h3 id="互联网协议入门（二）"><a href="#互联网协议入门（二）" class="headerlink" title="互联网协议入门（二）"></a><a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="noopener">互联网协议入门（二）</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;互联网协议入门（一）&quot;&gt;&lt;a href=&quot;#互联网协议入门（一）&quot; class=&quot;headerlink&quot; title=&quot;互联网协议入门（一）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 探究！一个数据包在网络中的心路历程</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E6%8E%A2%E7%A9%B6%EF%BC%81%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E6%8E%A2%E7%A9%B6%EF%BC%81%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/</id>
    <published>2021-05-29T06:03:00.000Z</published>
    <updated>2021-05-29T06:56:24.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247483989&idx=1&sn=7e2ed852770743d3955ef9d5561fcef3&scene=21#wechat_redirect" target="_blank" rel="noopener">探究！一个数据包在网络中的心路历程</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529135026.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;mid=2247483
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- ping和数据包发送流程</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-ping%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-ping%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/</id>
    <published>2021-05-29T05:59:00.000Z</published>
    <updated>2021-05-29T06:56:05.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://www.cnblogs.com/iwehdio/p/14231935.html" target="_blank" rel="noopener">ping和数据包发送流程</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529122853.png" alt="ping和数据包发送流程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/iwehdio/p/14231935.html&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 听说你 ping 用的很 6 ？给我图解一下 ping 的工作原理！</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%90%AC%E8%AF%B4%E4%BD%A0-ping-%E7%94%A8%E7%9A%84%E5%BE%88-6-%EF%BC%9F%E7%BB%99%E6%88%91%E5%9B%BE%E8%A7%A3%E4%B8%80%E4%B8%8B-ping-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%81/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%90%AC%E8%AF%B4%E4%BD%A0-ping-%E7%94%A8%E7%9A%84%E5%BE%88-6-%EF%BC%9F%E7%BB%99%E6%88%91%E5%9B%BE%E8%A7%A3%E4%B8%80%E4%B8%8B-ping-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%81/</id>
    <published>2021-05-29T05:59:00.000Z</published>
    <updated>2021-05-29T06:56:15.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247483999&idx=1&sn=63825d7e7a94c0e03f8f250bbae3e88e&scene=21#wechat_redirect" target="_blank" rel="noopener">听说你 ping 用的很 6 ？给我图解一下 ping 的工作原理！</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529131237.png" alt=""></p><hr/><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529131339.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;mid=2247483
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
</feed>
