<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MoonMonsters</title>
  
  <subtitle>Do Not Repeat Yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-05-29T06:57:01.958Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_Tao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]Vue -- Vue项目启动代码执行流程分析</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-vue-Vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-vue-Vue%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</id>
    <published>2021-05-29T06:11:00.000Z</published>
    <updated>2021-05-29T06:57:01.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://blog.csdn.net/IT__learning/article/details/114294180" target="_blank" rel="noopener">Vue文件加载执行流程</a></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一般一个初步的Vue项目创建好之后都会有这三个文件：<code>index.html</code> 、<code>main.js</code> 和<code>App.js</code>。</p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>Vue是单页面形式开发，index.html文件在其中起着特别重要的作用。所有组件（后缀名为.vue都被视为组件）都会通过此文件进行渲染加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>y<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在body体中只有一个div标签，其id为app,这个id将会连接到src/main.js内容</p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>相当于一个C/Java中的入口函数，控制着初次启动Vue项目要加载的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> lhj <span class="keyword">from</span> <span class="string">'./components/lhj'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">"vue-axios"</span>;</span><br><span class="line">Vue.use(VueAxios,axios)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  watch:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在main.js中，新建了一个vue实例，并使用el：#app链接到index.html中的app，并使用template引入组件和路由相关的内容，也就是说通过main.js我们关联到App.vue组件。</p><p>（1）import A from ‘B’ <br/><br>这类语句相当于引入B（这一般是路径）然后给它起个名字叫做A；<br/><br>（2）Vue.use（C）<br/><br>这个意思是全局方法定义C。也就是说，定义以后你可以在这个Vue项目的任意地方使用该组件。<br/><br>（3）el: ‘#app’<br/><br>这个和index.html中的相挂钩。<br/></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板将会替换挂载的元素，挂载元素的内容都将被忽略。</p><p>也就是说:template: ‘&lt; App/&gt;’ 表示用&lt; app&gt;&lt; /app&gt;替换index.html里面的&lt; div id=“app”&gt;，然后index.html文件被初步解析为这种形式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myapp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）watch ： 用来监听路由的变化，可以用来定义页面切换时过渡效果。</p><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>标准的App.vue模板的形式，包含了<code>&lt;template&gt;&lt;/template&gt;</code>、<code>&lt;script&gt;&lt;/script&gt;</code>、<code>&lt;style&gt;&lt;/style&gt;</code>三部分。<br>（1）export中的name属性，相当于给这个组件定义一个名字，便于识别和使用。<br/><br>（2）&lt; template&gt;标签下，除了&lt; img&gt;标签外，还有&lt; router-view&gt;标签，&lt; router-view&gt;标签将会把路由相关内容渲染在这个地方。路由的内容定义在src/router/index.js文件中。<br/></p><h3 id="src-router-index-js"><a href="#src-router-index-js" class="headerlink" title="src/router/index.js"></a>src/router/index.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在index.js的代码中，建立了路由相关的内容，也就会渲染到app.vue下面的&lt; router-view&gt;中。<br/><br>（1）引入组件的代码<br/><br>引入的时候注意好格式、路径就行。<br/><br>（2）routes定义<br/><br>● path：页面间路由跳转的路径；<br/><br>● name：该路由的名称；<br/><br>● component：组件名，要和你引入组件时定义的名字保持一致。<br/></p><h3 id="Vue加载时文件的执行顺序"><a href="#Vue加载时文件的执行顺序" class="headerlink" title="Vue加载时文件的执行顺序"></a>Vue加载时文件的执行顺序</h3><p>1、执行index.html文件 <br/><br>2、执行main.js文件 <br/><br>3、main.js挂载了app.vue文件，用app.vue的templete替换index.html中的<br/><br>4、main.js中注入了路由文件，将对应的组件渲染到router-view中<br/> 5、router-view中加载Layout文件<br/><br>6、Layout 加载Navbar, Sidebar, AppMain</p><h3 id="Vue内部页面的执行顺序"><a href="#Vue内部页面的执行顺序" class="headerlink" title="Vue内部页面的执行顺序"></a>Vue内部页面的执行顺序</h3><p>Vue 推荐在绝大多数情况下使用 template 来创建你的 HTML。但是模板毕竟是模板，不是真实的dom节点。从模板到真实dom节点还需要经过一些步骤：<br/></p><p>1、把模板编译为render函数 <br/><br>2、实例进行挂载,根据根节点render函数的调用，递归的生成虚拟dom<br/><br>3、对比虚拟dom，渲染到真实dom<br/><br>4、组件内部data发生变化，组件和子组件引用data作为props重新调用render函数，生成虚拟dom, 返回到步骤3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/IT__learning/article/details/114294180&quot;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]Vue -- axios拦截器</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-vue-axios%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-vue-axios%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2021-05-29T06:09:00.000Z</published>
    <updated>2021-05-29T06:56:53.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://hupeip.github.io/2018/10/08/axios%E6%8B%A6%E6%88%AA%E5%99%A8/" target="_blank" rel="noopener">axios拦截器</a></p><h3 id="axios拦截器简单介绍"><a href="#axios拦截器简单介绍" class="headerlink" title="axios拦截器简单介绍"></a>axios拦截器简单介绍</h3><p>页面发送http请求，很多情况我们要对请求和其响应进行特定的处理；如果请求数非常多，单独对每一个请求进行处理会变得非常麻烦，程序的优雅性也会大打折扣。好在强大的axios为开发者提供了这样一个API：拦截器。拦截器分为 请求（request）拦截器和 响应（response）拦截器。</p><h4 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.request.use(function (config) &#123;</span><br><span class="line">    // 在发起请求请做一些业务处理</span><br><span class="line">    return config;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对请求失败做处理</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.interceptors.response.use(function (response) &#123;</span><br><span class="line">    // 对响应数据做处理</span><br><span class="line">    return response;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    // 对响应错误做处理</span><br><span class="line">    return Promise.reject(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="vue添加axios拦截器"><a href="#vue添加axios拦截器" class="headerlink" title="vue添加axios拦截器"></a>vue添加axios拦截器</h3><h4 id="安装-axios"><a href="#安装-axios" class="headerlink" title="安装 axios"></a>安装 axios</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios –save-dev</span><br></pre></td></tr></table></figure><h4 id="新建文件-axios-js"><a href="#新建文件-axios-js" class="headerlink" title="新建文件 axios.js"></a>新建文件 axios.js</h4><p>开始统一封装axios， 首先引入axios、qs依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">"qs"</span>;</span><br></pre></td></tr></table></figure><p>然后创建一个axios实例，这个process.env.BASE_URL在config/dev.evn.js、prod.evn.js里面进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****** 创建axios实例 ******/</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    baseURL: process.env.BASE_URL,  <span class="comment">// api的base_url</span></span><br><span class="line">    timeout: <span class="number">5000</span>  <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用request拦截器对axios请求配置做统一处理"><a href="#使用request拦截器对axios请求配置做统一处理" class="headerlink" title="使用request拦截器对axios请求配置做统一处理"></a>使用request拦截器对axios请求配置做统一处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;    </span><br><span class="line">    app.$vux.loading.show(&#123;        </span><br><span class="line">        text: <span class="string">'数据加载中……'</span>    </span><br><span class="line">    &#125;);     </span><br><span class="line">    config.method === <span class="string">'post'</span>        </span><br><span class="line">        ? config.data = qs.stringify(&#123;...config.data&#125;)        </span><br><span class="line">        : config.params = &#123;...config.params&#125;;    </span><br><span class="line">    config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;     </span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">    &#125;, error =&gt; &#123;  <span class="comment">//请求错误处理   </span></span><br><span class="line">        app.$vux.toast.show(&#123;        </span><br><span class="line">            type: <span class="string">'warn'</span>,        </span><br><span class="line">            text: error   </span><br><span class="line">        &#125;);    </span><br><span class="line">        <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="对response做统一处理"><a href="#对response做统一处理" class="headerlink" title="对response做统一处理"></a>对response做统一处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">service.interceptors.response.use(    </span><br><span class="line">    response =&gt; &#123;  <span class="comment">//成功请求到数据        </span></span><br><span class="line">        app.$vux.loading.hide();        </span><br><span class="line">        <span class="comment">//这里根据后端提供的数据进行对应的处理        </span></span><br><span class="line">        <span class="keyword">if</span> (response.data.result === <span class="string">'TRUE'</span>) &#123;            </span><br><span class="line">            <span class="keyword">return</span> response.data;        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            app.$vux.toast.show(&#123;  </span><br><span class="line">                <span class="comment">//常规错误处理                </span></span><br><span class="line">                type: <span class="string">'warn'</span>,                </span><br><span class="line">                text: response.data.data.msg            </span><br><span class="line">            &#125;);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    error =&gt; &#123;  <span class="comment">//响应错误处理console.log('error');        </span></span><br><span class="line">        <span class="built_in">console</span>.log(error);        </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(error));         </span><br><span class="line">        <span class="keyword">let</span> text = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(error)).response.status === <span class="number">404</span>            </span><br><span class="line">            ? <span class="string">'404'</span>            </span><br><span class="line">            : <span class="string">'网络异常，请重试'</span>;        </span><br><span class="line">        app.$vux.toast.show(&#123;            </span><br><span class="line">            type: <span class="string">'warn'</span>,            </span><br><span class="line">            text: text        </span><br><span class="line">        &#125;);         </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)   </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="将axios实例暴露出去"><a href="#将axios实例暴露出去" class="headerlink" title="将axios实例暴露出去"></a>将axios实例暴露出去</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><p>这样一个简单的拦截器就完成了</p><h4 id="在main-js中进行引用，并配置一个别名（-ajax）来进行调用"><a href="#在main-js中进行引用，并配置一个别名（-ajax）来进行调用" class="headerlink" title="在main.js中进行引用，并配置一个别名（$ajax）来进行调用"></a>在main.js中进行引用，并配置一个别名（$ajax）来进行调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'../axios.js'</span>    <span class="comment">//axios.js的路径</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$ajax = axios</span><br></pre></td></tr></table></figure><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h4 id="应用：一个简单的登录接口"><a href="#应用：一个简单的登录接口" class="headerlink" title="应用：一个简单的登录接口"></a>应用：一个简单的登录接口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$ajax(&#123;</span><br><span class="line">　　method: <span class="string">'post'</span>,</span><br><span class="line">　　url: <span class="string">'/login'</span>,</span><br><span class="line">　　data: &#123;</span><br><span class="line">　　　　<span class="string">'userName'</span>: <span class="string">'haha'</span>,</span><br><span class="line">　　　　<span class="string">'password'</span>: <span class="string">'123456'</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">　　<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h4><p>在定义路由的时候就需要多添加一个自定义字段requireAuth，用于判断该路由的访问是否需要登录。如果用户已经登录，则顺利进入路由，否则就进入登录页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'/'</span>,</span><br><span class="line">        component: Index</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/repository'</span>,</span><br><span class="line">        name: <span class="string">'repository'</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">            requireAuth: <span class="literal">true</span>,  <span class="comment">// 添加该字段，表示进入这个路由是需要登录的</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: Repository</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        name: <span class="string">'login'</span>,</span><br><span class="line">        component: Login</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>定义完路由后，我们主要是利用vue-router提供的钩子函数beforeEach()对路由进行判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.meta.requireAuth) &#123;  <span class="comment">// 判断该路由是否需要登录权限</span></span><br><span class="line">        <span class="keyword">if</span> (token) &#123;  <span class="comment">// 判断当前的token是否存在</span></span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            next(&#123;</span><br><span class="line">                path: <span class="string">'/login'</span>,</span><br><span class="line">                query: &#123;<span class="attr">redirect</span>: to.fullPath&#125;  <span class="comment">// 将跳转的路由path作为参数，登录成功后跳转到该路由</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>to.meta中是我们自定义的数据，其中就包括我们刚刚定义的requireAuth字段<br>通过这个字段来判断该路由是否需要登录权限<br>需要的话，同时当前应用不存在token，则跳转到登录页面，进行登录。登录成功后跳转到目标路由。</p><p>这种方式只是简单的前端路由控制，并不能阻止用户访问，假设有一种情况：当前token失效了，但是token依然保存在本地。这时候你去访问需要登录权限的路由时，实际上应该让用户重新登录。这时候就需要结合 http 拦截器 + 后端接口返回的http 状态码来判断。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>要想统一处理所有http请求和响应，就得用上 axios 的拦截器。通过配置http response inteceptor，当后端接口返回401 Unauthorized（未授权），让用户重新登录。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (stoken) &#123;  <span class="comment">// 判断是否存在token，如果存在的话，则每个http header都加上token</span></span><br><span class="line">            config.headers.Authorization = <span class="string">`token <span class="subst">$&#123;store.state.token&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    err =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http response 拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">                    <span class="comment">// 返回 401 清除token信息并跳转到登录页面</span></span><br><span class="line">                    </span><br><span class="line">                    router.replace(&#123;</span><br><span class="line">                        path: <span class="string">'login'</span>,</span><br><span class="line">                        query: &#123;<span class="attr">redirect</span>: router.currentRoute.fullPath&#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response.data)   <span class="comment">// 返回接口返回的错误信息</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hupeip.github.io/2018/10/08/axios%E6%8B%A6%E6%88%AA%E
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue -- axios请求携带cookie</title>
    <link href="http://yoursite.com/2021/05/29/vue-axios%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6cookie/"/>
    <id>http://yoursite.com/2021/05/29/vue-axios%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6cookie/</id>
    <published>2021-05-29T06:08:00.000Z</published>
    <updated>2021-05-29T06:56:42.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改vue-config-js文件"><a href="#修改vue-config-js文件" class="headerlink" title="修改vue.config.js文件"></a>修改vue.config.js文件</h3><p>在该文件中, 添加<code>disableHostCheck: true</code>, 不需要host检查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: port,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    overlay: &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      errors: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    proxy: <span class="string">'http://localhost:5000'</span>,</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装axios时-加上withCredentials"><a href="#封装axios时-加上withCredentials" class="headerlink" title="封装axios时, 加上withCredentials"></a>封装axios时, 加上withCredentials</h3><p>在封装axios时, 加上<code>withCredentials: true</code><br/><br>跨源请求不提供凭据(cookie、HTTP认证及客户端SSL证明等)。通过将withCredentials属性设置为true，可以指定某个请求应该发送凭据。<br/><br>默认值为false。<br/><br>true：在跨域请求时，会携带用户凭证<br/><br>false：在跨域请求时，不会携带用户凭证；返回的 response 里也会忽略 cookie<br/></p><h3 id="后端返回的数据中-修改请求头"><a href="#后端返回的数据中-修改请求头" class="headerlink" title="后端返回的数据中, 修改请求头"></a>后端返回的数据中, 修改请求头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_cors_response</span><span class="params">(response, status=<span class="number">200</span>)</span>:</span></span><br><span class="line">    resp = make_response(response, status)</span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Credentials'</span>] = <span class="string">'true'</span></span><br><span class="line">    resp.headers[<span class="string">'Access-Control-Allow-Origin'</span>] = <span class="string">'http://key-ui.oa.zego.im:9528'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p>需要注意的是:</p><ol><li>传入的是<code>true</code>字符串, 不是<code>True</code>布尔类型</li><li>origin不能是<code>*</code>, 必须是完整的域名</li><li>可以修改hosts文件, 来将<code>127.0.0.1</code>指向测试的域名</li><li>正式环境中, 这部分操作将由nginx完成, 不在代码中写死</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修改vue-config-js文件&quot;&gt;&lt;a href=&quot;#修改vue-config-js文件&quot; class=&quot;headerlink&quot; title=&quot;修改vue.config.js文件&quot;&gt;&lt;/a&gt;修改vue.config.js文件&lt;/h3&gt;&lt;p&gt;在该文件中, 添加&lt;
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 互联网网络协议</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E4%BA%92%E8%81%94%E7%BD%91%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E4%BA%92%E8%81%94%E7%BD%91%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-05-29T06:07:00.000Z</published>
    <updated>2021-05-29T06:56:33.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="互联网协议入门（一）"><a href="#互联网协议入门（一）" class="headerlink" title="互联网协议入门（一）"></a><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">互联网协议入门（一）</a></h3><h3 id="互联网协议入门（二）"><a href="#互联网协议入门（二）" class="headerlink" title="互联网协议入门（二）"></a><a href="http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html" target="_blank" rel="noopener">互联网协议入门（二）</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;互联网协议入门（一）&quot;&gt;&lt;a href=&quot;#互联网协议入门（一）&quot; class=&quot;headerlink&quot; title=&quot;互联网协议入门（一）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 探究！一个数据包在网络中的心路历程</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E6%8E%A2%E7%A9%B6%EF%BC%81%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E6%8E%A2%E7%A9%B6%EF%BC%81%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8C%85%E5%9C%A8%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/</id>
    <published>2021-05-29T06:03:00.000Z</published>
    <updated>2021-05-29T06:56:24.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247483989&idx=1&sn=7e2ed852770743d3955ef9d5561fcef3&scene=21#wechat_redirect" target="_blank" rel="noopener">探究！一个数据包在网络中的心路历程</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529135026.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;mid=2247483
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- ping和数据包发送流程</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-ping%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-ping%E5%92%8C%E6%95%B0%E6%8D%AE%E5%8C%85%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B/</id>
    <published>2021-05-29T05:59:00.000Z</published>
    <updated>2021-05-29T06:56:05.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://www.cnblogs.com/iwehdio/p/14231935.html" target="_blank" rel="noopener">ping和数据包发送流程</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529122853.png" alt="ping和数据包发送流程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/iwehdio/p/14231935.html&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 听说你 ping 用的很 6 ？给我图解一下 ping 的工作原理！</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%90%AC%E8%AF%B4%E4%BD%A0-ping-%E7%94%A8%E7%9A%84%E5%BE%88-6-%EF%BC%9F%E7%BB%99%E6%88%91%E5%9B%BE%E8%A7%A3%E4%B8%80%E4%B8%8B-ping-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%81/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%90%AC%E8%AF%B4%E4%BD%A0-ping-%E7%94%A8%E7%9A%84%E5%BE%88-6-%EF%BC%9F%E7%BB%99%E6%88%91%E5%9B%BE%E8%A7%A3%E4%B8%80%E4%B8%8B-ping-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%81/</id>
    <published>2021-05-29T05:59:00.000Z</published>
    <updated>2021-05-29T06:56:15.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&mid=2247483999&idx=1&sn=63825d7e7a94c0e03f8f250bbae3e88e&scene=21#wechat_redirect" target="_blank" rel="noopener">听说你 ping 用的很 6 ？给我图解一下 ping 的工作原理！</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529131237.png" alt=""></p><hr/><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529131339.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;mid=2247483
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 ---【科普】IP地址详解, 计算方式</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E3%80%90%E7%A7%91%E6%99%AE%E3%80%91IP%E5%9C%B0%E5%9D%80%E8%AF%A6%E8%A7%A3-%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E3%80%90%E7%A7%91%E6%99%AE%E3%80%91IP%E5%9C%B0%E5%9D%80%E8%AF%A6%E8%A7%A3-%E8%AE%A1%E7%AE%97%E6%96%B9%E5%BC%8F/</id>
    <published>2021-05-29T05:58:00.000Z</published>
    <updated>2021-05-29T06:55:53.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://zhuanlan.zhihu.com/p/26098552" target="_blank" rel="noopener">【科普】IP地址详解-你,是谁？(二）-超有趣学网络</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210529120402.png" alt="【科普】IP地址详解-你,是谁？(二）-超有趣学网络"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26098552&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- 子网掩码</title>
    <link href="http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/"/>
    <id>http://yoursite.com/2021/05/29/%E8%BD%AC-%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81/</id>
    <published>2021-05-29T05:57:00.000Z</published>
    <updated>2021-05-29T06:55:40.951Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="noopener">转载</a></p><p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p><p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p><p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p><p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p><p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p><p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”子网掩码”（subnet mask）。</p><p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p><p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p><p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p><p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;规定网络地址的
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Bug --- vue add axios报错</title>
    <link href="http://yoursite.com/2021/05/02/bug-vue-add-axios%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2021/05/02/bug-vue-add-axios%E6%8A%A5%E9%94%99/</id>
    <published>2021-05-02T12:08:00.000Z</published>
    <updated>2021-05-29T07:05:34.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">🚀  Invoking generator for vue-cli-plugin-axios...</span><br><span class="line">⠋  Running completion hooks...error: &#39;options&#39; is defined but never used (no-unused-vars) at src&#x2F;plugins&#x2F;axios.js:42:32:</span><br><span class="line">  40 | );</span><br><span class="line">  41 |</span><br><span class="line">&gt; 42 | Plugin.install &#x3D; function(Vue, options) &#123;</span><br><span class="line">     |                                ^</span><br><span class="line">  43 |   Vue.axios &#x3D; _axios;</span><br><span class="line">  44 |   window.axios &#x3D; _axios;</span><br><span class="line">  45 |   Object.defineProperties(Vue.prototype, &#123;</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>原因:该项目安装了<code>eslint</code>规范，<code>ESLint</code> 是在 ECMAScript/JavaScript 代码中识别和报告模式匹配的工具，它的目标是保证代码的一致性和避免错误。但有时也会由于过于严谨,导致错误提醒<br>解决方案:<br>在package.json文件中添加如下代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"rules": &#123;</span><br><span class="line">    "generator-star-spacing": "off",</span><br><span class="line">    "no-tabs":"off",</span><br><span class="line">    "no-unused-vars":"off",</span><br><span class="line">    "no-console":"off",</span><br><span class="line">    "no-irregular-whitespace":"off",</span><br><span class="line">    "no-debugger": "off"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;报错&quot;&gt;&lt;a href=&quot;#报错&quot; class=&quot;headerlink&quot; title=&quot;报错&quot;&gt;&lt;/a&gt;报错&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Bug" scheme="http://yoursite.com/categories/Bug/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode --- 144. 二叉树的前序遍历</title>
    <link href="http://yoursite.com/2021/04/18/leetcode-144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2021/04/18/leetcode-144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2021-04-18T08:54:00.000Z</published>
    <updated>2021-05-29T07:13:44.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="noopener">二叉树的前序遍历</a></p><p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p><p>示例 1：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210418165503.png" alt=""></p><blockquote><p>输入：root = [1,null,2,3]<br/><br>输出：[1,2,3]</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, left=None, right=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; list:</span></span><br><span class="line">        rv = list()</span><br><span class="line">        self._pre2(root, rv)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pre</span><span class="params">(self, root, rv)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        递归做法</span></span><br><span class="line"><span class="string">        leetcode运行时间:40ms, 内存消耗:14.9mb</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            rv.append(root.val)</span><br><span class="line">            self._pre(root.left, rv)</span><br><span class="line">            self._pre(root.right, rv)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_pre2</span><span class="params">(self, root, rv: list)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        非递归做法</span></span><br><span class="line"><span class="string">        运行时间:36ms, 内存消耗: 14.9mb</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        n = root</span><br><span class="line">        <span class="keyword">while</span> n <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> n:</span><br><span class="line">                rv.append(n.val)</span><br><span class="line">                stack.append(n)</span><br><span class="line">                n = n.left</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                t = stack.pop()</span><br><span class="line">                n = t.right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = TreeNode(<span class="number">1</span>)</span><br><span class="line">t2 = TreeNode(<span class="number">2</span>)</span><br><span class="line">t3 = TreeNode(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">t1.right = t2</span><br><span class="line">t2.left = t3</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.preorderTraversal(t1))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-preorder-travers
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode --- 2. 两数相加</title>
    <link href="http://yoursite.com/2021/04/18/leetcode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2021/04/18/leetcode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-04-18T06:06:00.000Z</published>
    <updated>2021-05-29T07:11:39.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">两数相加</a></p><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 <code>一位</code> 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210418140849.png" alt=""></p><blockquote><p>输入：l1 = [2,4,3], l2 = [5,6,4] <br/><br>输出：[7,0,8]    <br/><br>解释：342 + 465 = 807.</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        head = <span class="literal">None</span></span><br><span class="line">        tail = <span class="literal">None</span></span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            val = l1.val + l2.val + tmp</span><br><span class="line">            tmp = val // <span class="number">10</span></span><br><span class="line">            l1 = l1.next</span><br><span class="line">            l2 = l2.next</span><br><span class="line"></span><br><span class="line">            n = ListNode(val % <span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                head = n</span><br><span class="line">                tail = n</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.next = n</span><br><span class="line">                tail = n</span><br><span class="line"></span><br><span class="line">        m = l1 <span class="keyword">if</span> l1 <span class="keyword">else</span> l2</span><br><span class="line">        <span class="keyword">while</span> m:</span><br><span class="line">            val = m.val + tmp</span><br><span class="line">            n = ListNode(val % <span class="number">10</span>)</span><br><span class="line">            tail.next = n</span><br><span class="line">            tail = n</span><br><span class="line">            tmp = val // <span class="number">10</span></span><br><span class="line">            m = m.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tmp &gt; <span class="number">0</span>:</span><br><span class="line">            n = ListNode(tmp)</span><br><span class="line">            tail.next = n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># l1_2 = ListNode(2)</span></span><br><span class="line"><span class="comment"># l1_4 = ListNode(4)</span></span><br><span class="line"><span class="comment"># l1_3 = ListNode(3)</span></span><br><span class="line"><span class="comment"># l1_2.next = l1_4</span></span><br><span class="line"><span class="comment"># l1_4.next = l1_3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># l2_5 = ListNode(5)</span></span><br><span class="line"><span class="comment"># l2_6 = ListNode(6)</span></span><br><span class="line"><span class="comment"># l2_4 = ListNode(4)</span></span><br><span class="line"><span class="comment"># l2_5.next = l2_6</span></span><br><span class="line"><span class="comment"># l2_6.next = l2_4</span></span><br><span class="line"></span><br><span class="line">l1_1 = ListNode(<span class="number">9</span>)</span><br><span class="line">l1_2 = ListNode(<span class="number">9</span>)</span><br><span class="line">l1_3 = ListNode(<span class="number">1</span>)</span><br><span class="line">l1_1.next = l1_2</span><br><span class="line">l1_2.next = l1_3</span><br><span class="line"></span><br><span class="line">l2_1 = ListNode(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">cur = s.addTwoNumbers(l1_1, l2_1)</span><br><span class="line"><span class="keyword">while</span> cur:</span><br><span class="line">    print(<span class="string">"cur: %s"</span> % cur.val)</span><br><span class="line">    cur = cur.next</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/add-two-numbers/&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]网络 --- TCP和UDP是否可以绑定同一端口进行通信</title>
    <link href="http://yoursite.com/2021/04/12/%E8%BD%AC-TCP%E5%92%8CUDP%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E7%BB%91%E5%AE%9A%E5%90%8C%E4%B8%80%E7%AB%AF%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2021/04/12/%E8%BD%AC-TCP%E5%92%8CUDP%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E7%BB%91%E5%AE%9A%E5%90%8C%E4%B8%80%E7%AB%AF%E5%8F%A3%E8%BF%9B%E8%A1%8C%E9%80%9A%E4%BF%A1/</id>
    <published>2021-04-12T10:01:00.000Z</published>
    <updated>2021-05-29T06:54:42.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://blog.csdn.net/m0_37564426/article/details/89294852" target="_blank" rel="noopener">TCP和UDP是否可以绑定同一端口进行通信</a></p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>TCP、UDP可以绑定同一端口来进行通信： </p><p>网络中可以被命名和寻址的通信端口，是操作系统可分配的一种资源。 </p><p>按照OSI七层协议的描述，传输层与网络层在功能上的最大区别是传输层提供进程通信能力。从这个意义上讲，网络通信的最终地址就不仅仅是主机地址了，还包括可以描述进程的某种标识符。为此，TCP/IP协议提出了协议端口（protocol   port，简称端口）的概念，用于标识通信的进程。 </p><p>端口是一种抽象的软件结构（包括一些数据结构和I/O缓冲区）。应用程序（即进程）通过系统调用与某端口建立连接（binding）后，传输层传给该端口的数据都被相应进程所接收，相应进程发给传输层的数据都通过该端口输出。在TCP/IP协议的实现中，端口操作类似于一般的I/O操作，进程获取一个端口，相当于获取本地唯一的I/O文件，可以用一般的读写原语访问之。 </p><p>类似于文件描述符，每个端口都拥有一个叫端口号（port   number）的整数型标识符，用于区别不同端口。由于TCP/IP传输层的两个协议TCP和UDP是完全独立的两个软件模块，因此各自的端口号也相互独立，如TCP有一个255号端口，UDP也可以有一个255号端口，二者并不冲突。 </p><p>端口号的分配是一个重要问题。有两种基本分配方式：第一种叫全局分配，这是一种集中控制方式，由一个公认的中央机构根据用户需要进行统一分配，并将结果公布于众。第二种是本地分配，又称动态连接，即进程需要访问传输层服务时，向本地操作系统提出申请，操作系统返回一个本地唯一的端口号，进程再通过合适的系统调用将自己与该端口号联系起来（绑扎）。TCP/IP端口号的分配中综合了上述两种方式。TCP/IP将端口号分为两部分，少量的作为保留端口，以全局方式分配给服务进程。因此，每一个标准服务器都拥有一个全局公认的端口（即周知口，well-known   port），即使在不同机器上，其端口号也相同。剩余的为自由端口，以本地方式进行分配。TCP和UDP均规定，小于256的端口号才能作保留端口。</p><p>· 再讨论一下，一个服务器监控一个端口，比如80端口，它为什么可以建立上成千上万的连接？</p><p>首先， 一个TCP连接需要由四元组来形成，即(src_ip,src_port,dst_ip,dst_port)。当一个连接请求过来的时候，服务端调用accept函数，新生成一个socket，这个socket所占用的本地端口依然是80端口。由四元组就很容易分析到了，同一个(src_ip,src_port)，它所对应的(dst_ip,dst_port)可以无穷变化，这样就可以建立很多个客户端的请求了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_37564426/article/details/89294852&quot; t
      
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构 --- 使用数组保存层序遍历二叉树并后续遍历输出</title>
    <link href="http://yoursite.com/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E4%BF%9D%E5%AD%98%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B6%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E8%BE%93%E5%87%BA/"/>
    <id>http://yoursite.com/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E4%BF%9D%E5%AD%98%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B6%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E8%BE%93%E5%87%BA/</id>
    <published>2021-04-09T17:23:00.000Z</published>
    <updated>2021-05-29T06:54:24.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>将一颗二叉树层序遍历, 存入到数组中, 并后序遍历输出数据</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归写法</span></span><br><span class="line"><span class="comment"># class Solution(object):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def traverse(self, nums):</span></span><br><span class="line"><span class="comment">#         rv = list()</span></span><br><span class="line"><span class="comment">#         index = 0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         self._post(nums, index, rv)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         return rv</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def _post(self, nums: list, index: int, rv: list):</span></span><br><span class="line"><span class="comment">#         if index &lt; len(nums) and nums[index] is not None:</span></span><br><span class="line"><span class="comment">#             self._post(nums, index * 2 + 1, rv)</span></span><br><span class="line"><span class="comment">#             self._post(nums, index * 2 + 2, rv)</span></span><br><span class="line"><span class="comment">#             rv.append(nums[index])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        q = [<span class="number">0</span>]</span><br><span class="line">        rv = list()</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 用来判断该索引是否已遍历过</span></span><br><span class="line">        done = set()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            <span class="keyword">while</span> index * <span class="number">2</span> + <span class="number">1</span> &lt; len(nums) <span class="keyword">and</span> index <span class="keyword">not</span> <span class="keyword">in</span> done:</span><br><span class="line">                index = index * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">                q.append(index)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 不能pop掉, 后续遍历, 父节点需要最后访问</span></span><br><span class="line">            index = q[<span class="number">-1</span>]</span><br><span class="line">            <span class="comment"># 访问条件</span></span><br><span class="line">            <span class="comment"># 1. 没有访问过</span></span><br><span class="line">            <span class="comment"># 2. 没有右子节点</span></span><br><span class="line">            <span class="comment"># 3. 左右子节点都已经访问过</span></span><br><span class="line">            <span class="keyword">if</span> index <span class="keyword">not</span> <span class="keyword">in</span> done \</span><br><span class="line">                    <span class="keyword">and</span> (index * <span class="number">2</span> + <span class="number">2</span> &gt;= len(nums) <span class="keyword">or</span> nums[index * <span class="number">2</span> + <span class="number">2</span>] <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line">                         <span class="keyword">or</span> (index * <span class="number">2</span> + <span class="number">1</span> <span class="keyword">in</span> done <span class="keyword">and</span> index * <span class="number">2</span> + <span class="number">2</span> <span class="keyword">in</span> done)):</span><br><span class="line">                <span class="comment"># 访问</span></span><br><span class="line">                rv.append(nums[index])</span><br><span class="line">                <span class="comment"># 节点已访问了</span></span><br><span class="line">                done.add(index)</span><br><span class="line">                <span class="comment"># 从栈中pop处理</span></span><br><span class="line">                q.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果无法访问, 那就把右子节点加入到栈中, 遍历右子树</span></span><br><span class="line">                index = index * <span class="number">2</span> + <span class="number">2</span></span><br><span class="line">                q.append(index)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tree = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">s = Solution()</span><br><span class="line">print(s.traverse(tree))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;将一颗二叉树层序遍历, 存入到数组中, 并后序遍历输出数据&lt;/p&gt;
&lt;h3 id=&quot;解法&quot;&gt;&lt;a href=&quot;#解法&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]Linux --- 常用指令介绍</title>
    <link href="http://yoursite.com/2021/04/08/%E8%BD%AC-Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2021/04/08/%E8%BD%AC-Linux-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-04-08T14:50:00.000Z</published>
    <updated>2021-05-29T07:05:58.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://thinkwon.blog.csdn.net/article/details/104588679" target="_blank" rel="noopener">Linux面试题（2020最新版）</a></p><h3 id="文件管理命令"><a href="#文件管理命令" class="headerlink" title="文件管理命令"></a>文件管理命令</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>cat 命令用于连接文件并打印到标准输出设备上。<br>cat 主要有三大功能：</p><h6 id="一次显示整个文件"><a href="#一次显示整个文件" class="headerlink" title="一次显示整个文件"></a>一次显示整个文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat filename</span><br></pre></td></tr></table></figure><h6 id="从键盘创建一个文件"><a href="#从键盘创建一个文件" class="headerlink" title="从键盘创建一个文件"></a>从键盘创建一个文件<br/></h6><p>只能创建新文件，不能编辑已有文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; filename</span><br></pre></td></tr></table></figure><h6 id="将几个文件合并为一个文件"><a href="#将几个文件合并为一个文件" class="headerlink" title="将几个文件合并为一个文件 "></a>将几个文件合并为一个文件 <br/></h6><p>-b 对非空输出行号 <br/><br>-n 输出所有行号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 &gt; file</span><br></pre></td></tr></table></figure><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><h6 id="把-log2012-log-的文件内容加上行号后输入-log2013-log-这个文件里"><a href="#把-log2012-log-的文件内容加上行号后输入-log2013-log-这个文件里" class="headerlink" title="把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里"></a>把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n log2012.log log2013.log</span><br></pre></td></tr></table></figure><h6 id="把-log2012-log-和-log2013-log-的文件内容加上行号（空白行不加）之后将内容附加到-log-log-里"><a href="#把-log2012-log-和-log2013-log-的文件内容加上行号（空白行不加）之后将内容附加到-log-log-里" class="headerlink" title="把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里"></a>把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b log2012.log log2013.log log.log</span><br></pre></td></tr></table></figure><h6 id="使用-here-doc-生成新文件"><a href="#使用-here-doc-生成新文件" class="headerlink" title="使用 here doc 生成新文件"></a>使用 here doc 生成新文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;log.txt &lt;&lt;EOF</span><br><span class="line">&gt;Hello</span><br><span class="line">&gt;World</span><br><span class="line">&gt;PWD&#x3D;$(pwd)</span><br><span class="line">&gt;EOF</span><br><span class="line">ls -l log.txt</span><br><span class="line">cat log.txt</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">PWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test</span><br></pre></td></tr></table></figure><h6 id="反向列示"><a href="#反向列示" class="headerlink" title="反向列示"></a>反向列示</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tac log.txt</span><br><span class="line">PWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test</span><br><span class="line">World</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以控制文件如何被他人所调用。</p><p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。</p><p>以文件 log2012.log 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</span><br></pre></td></tr></table></figure><p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。</p><h6 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-c 当发生改变时，报告处理信息</span><br><span class="line">-R 处理指定目录以及其子目录下所有文件</span><br></pre></td></tr></table></figure><h6 id="权限范围"><a href="#权限范围" class="headerlink" title="权限范围"></a>权限范围</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u ：目录或者文件的当前的用户</span><br><span class="line">g ：目录或者文件的当前的群组</span><br><span class="line">o ：除了目录或者文件的当前用户或群组之外的用户或者群组</span><br><span class="line">a ：所有的用户及群组</span><br></pre></td></tr></table></figure><h6 id="权限代号"><a href="#权限代号" class="headerlink" title="权限代号"></a>权限代号</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r ：读权限，用数字4表示</span><br><span class="line">w ：写权限，用数字2表示</span><br><span class="line">x ：执行权限，用数字1表示</span><br><span class="line">- ：删除权限，用数字0表示</span><br><span class="line">s ：特殊权限</span><br></pre></td></tr></table></figure><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><h6 id="增加文件-t-log-所有用户可执行权限"><a href="#增加文件-t-log-所有用户可执行权限" class="headerlink" title="增加文件 t.log 所有用户可执行权限"></a>增加文件 t.log 所有用户可执行权限</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x t.log</span><br></pre></td></tr></table></figure><h6 id="撤销原来所有的权限，然后使拥有者具有可读权限-并输出处理信息"><a href="#撤销原来所有的权限，然后使拥有者具有可读权限-并输出处理信息" class="headerlink" title="撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息"></a>撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u&#x3D;r t.log -c</span><br></pre></td></tr></table></figure><h6 id="给-file-的属主分配读、写、执行-7-的权限，给file的所在组分配读、执行-5-的权限，给其他用户分配执行-1-的权限"><a href="#给-file-的属主分配读、写、执行-7-的权限，给file的所在组分配读、执行-5-的权限，给其他用户分配执行-1-的权限" class="headerlink" title="给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限"></a>给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 751 t.log -c（或者：chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x t.log -c)</span><br></pre></td></tr></table></figure><h6 id="将-test-目录及其子目录所有文件添加可读权限"><a href="#将-test-目录及其子目录所有文件添加可读权限" class="headerlink" title="将 test 目录及其子目录所有文件添加可读权限"></a>将 test 目录及其子目录所有文件添加可读权限</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+r,g+r,o+r -R text&#x2F; -c</span><br></pre></td></tr></table></figure><h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><h5 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h5><p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-c 显示更改的部分的信息</span><br><span class="line">-R 处理指定目录及子目录</span><br></pre></td></tr></table></figure><h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><h6 id="改变拥有者和群组-并显示改变信息"><a href="#改变拥有者和群组-并显示改变信息" class="headerlink" title="改变拥有者和群组 并显示改变信息"></a>改变拥有者和群组 并显示改变信息</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -c mail:mail log2012.log</span><br></pre></td></tr></table></figure><h6 id="改变文件群组"><a href="#改变文件群组" class="headerlink" title="改变文件群组"></a>改变文件群组</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -c :mail t.log</span><br></pre></td></tr></table></figure><h6 id="改变文件夹及子文件目录属主及属组为-mail"><a href="#改变文件夹及子文件目录属主及属组为-mail" class="headerlink" title="改变文件夹及子文件目录属主及属组为 mail"></a>改变文件夹及子文件目录属主及属组为 mail</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -cR mail: test&#x2F;</span><br></pre></td></tr></table></figure><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><h5 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h5><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-i 提示</span><br><span class="line">-r 复制目录及目录内所有项目</span><br><span class="line">-a 复制的文件与原文件时间一样</span><br></pre></td></tr></table></figure><h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><h6 id="复制-a-txt-到-test-目录下，保持原文件时间，如果原文件存在提示是否覆盖。"><a href="#复制-a-txt-到-test-目录下，保持原文件时间，如果原文件存在提示是否覆盖。" class="headerlink" title="复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。"></a>复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -ai a.txt test</span><br></pre></td></tr></table></figure><h6 id="为-a-txt-建议一个链接（快捷方式）"><a href="#为-a-txt-建议一个链接（快捷方式）" class="headerlink" title="为 a.txt 建议一个链接（快捷方式）"></a>为 a.txt 建议一个链接（快捷方式）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -s a.txt link_a.txt</span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><h5 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h5><p>用于在文件树中查找文件，并作出相应的处理。</p><h6 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find pathname -options [-print -exec -ok ...]</span><br></pre></td></tr></table></figure><h6 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pathname: find命令所查找的目录路径。例如用.来表示当前目录，用&#x2F;来表示系统根目录。</span><br><span class="line">-print： find命令将匹配的文件输出到标准输出。</span><br><span class="line">-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#39;command&#39; &#123;  &#125; \;，注意&#123;   &#125;和\；之间的空格。</span><br><span class="line">-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。</span><br></pre></td></tr></table></figure><h6 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-name 按照文件名查找文件</span><br><span class="line">-perm 按文件权限查找文件</span><br><span class="line">-user 按文件属主查找文件</span><br><span class="line">-group  按照文件所属的组来查找文件。</span><br><span class="line">-type  查找某一类型的文件，诸如：</span><br><span class="line">     b - 块设备文件</span><br><span class="line">     d - 目录</span><br><span class="line">     c - 字符设备文件</span><br><span class="line">     l - 符号链接文件</span><br><span class="line">     p - 管道文件</span><br><span class="line">     f - 普通文件</span><br></pre></td></tr></table></figure><h5 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h5><h6 id="查找-48-小时内修改过的文件"><a href="#查找-48-小时内修改过的文件" class="headerlink" title="查找 48 小时内修改过的文件"></a>查找 48 小时内修改过的文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -atime -2</span><br></pre></td></tr></table></figure><h6 id="在当前目录查找-以-log-结尾的文件。-代表当前目录"><a href="#在当前目录查找-以-log-结尾的文件。-代表当前目录" class="headerlink" title="在当前目录查找 以 .log 结尾的文件。 . 代表当前目录"></a>在当前目录查找 以 .log 结尾的文件。 . 代表当前目录</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -name &#39;*.log&#39;</span><br></pre></td></tr></table></figure><h6 id="查找-opt-目录下-权限为-777-的文件"><a href="#查找-opt-目录下-权限为-777-的文件" class="headerlink" title="查找 /opt 目录下 权限为 777 的文件"></a>查找 /opt 目录下 权限为 777 的文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &#x2F;opt -perm 777</span><br></pre></td></tr></table></figure><h6 id="查找大于-1K-的文件"><a href="#查找大于-1K-的文件" class="headerlink" title="查找大于 1K 的文件"></a>查找大于 1K 的文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -size +1000c</span><br></pre></td></tr></table></figure><h6 id="查找等于-1000-字符的文件"><a href="#查找等于-1000-字符的文件" class="headerlink" title="查找等于 1000 字符的文件"></a>查找等于 1000 字符的文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -size 1000c</span><br></pre></td></tr></table></figure><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><h5 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h5><p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。</p><h6 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n&lt;行数&gt; 显示的行数（行数为负数表示从最后向前数）</span><br></pre></td></tr></table></figure><h5 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h5><h6 id="显示-1-log-文件中前-20-行"><a href="#显示-1-log-文件中前-20-行" class="headerlink" title="显示 1.log 文件中前 20 行"></a>显示 1.log 文件中前 20 行</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head 1.log -n 20</span><br></pre></td></tr></table></figure><h6 id="显示-1-log-文件前-20-字节"><a href="#显示-1-log-文件前-20-字节" class="headerlink" title="显示 1.log 文件前 20 字节"></a>显示 1.log 文件前 20 字节</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -c 20 log2014.log</span><br></pre></td></tr></table></figure><h6 id="显示-t-log最后-10-行"><a href="#显示-t-log最后-10-行" class="headerlink" title="显示 t.log最后 10 行"></a>显示 t.log最后 10 行</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n -10 t.log</span><br></pre></td></tr></table></figure><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><h5 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h5><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><h6 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-i  忽略搜索时的大小写</span><br><span class="line">-N  显示每行的行号</span><br><span class="line">-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</span><br><span class="line">-s  显示连续空行为一行</span><br><span class="line">&#x2F;字符串：向下搜索“字符串”的功能</span><br><span class="line">?字符串：向上搜索“字符串”的功能</span><br><span class="line">n：重复前一个搜索（与 &#x2F; 或 ? 有关）</span><br><span class="line">N：反向重复前一个搜索（与 &#x2F; 或 ? 有关）</span><br><span class="line">-x &lt;数字&gt; 将“tab”键显示为规定的数字空格</span><br><span class="line">b  向后翻一页</span><br><span class="line">d  向后翻半页</span><br><span class="line">h  显示帮助界面</span><br><span class="line">Q  退出less 命令</span><br><span class="line">u  向前滚动半页</span><br><span class="line">y  向前滚动一行</span><br><span class="line">空格键 滚动一行</span><br><span class="line">回车键 滚动一页</span><br><span class="line">[pagedown]： 向下翻动一页</span><br><span class="line">[pageup]：   向上翻动一页</span><br></pre></td></tr></table></figure><h5 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h5><h6 id="ps-查看进程信息并通过-less-分页显示"><a href="#ps-查看进程信息并通过-less-分页显示" class="headerlink" title="ps 查看进程信息并通过 less 分页显示"></a>ps 查看进程信息并通过 less 分页显示</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | less -N</span><br></pre></td></tr></table></figure><h6 id="查看多个文件"><a href="#查看多个文件" class="headerlink" title="查看多个文件"></a>查看多个文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less 1.log 2.log</span><br></pre></td></tr></table></figure><p>可以使用 n 查看下一个，使用 p 查看前一个。</p><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><h5 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h5><p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。<br>链接分类：软件链接及硬链接</p><h6 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h6><pre><code>- 软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式- 软链接可以 跨文件系统 ，硬链接不可以- 软链接可以对一个不存在的文件名进行链接- 软链接可以对目录进行链接</code></pre><h6 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接:"></a>硬链接:</h6><pre><code>- 硬链接，以文件副本的形式存在。但不占用实际空间。- 不允许给目录创建硬链接- 硬链接只有在同一个文件系统中才能创建</code></pre><h6 id="需要注意："><a href="#需要注意：" class="headerlink" title="需要注意："></a>需要注意：</h6><pre><code>- ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；- ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。- ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</code></pre><h6 id="常用参数-2"><a href="#常用参数-2" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-b 删除，覆盖以前建立的链接</span><br><span class="line">-s 软链接（符号链接）</span><br><span class="line">-v 显示详细处理过程</span><br></pre></td></tr></table></figure><h5 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h5><h6 id="给文件创建软链接，并显示操作信息"><a href="#给文件创建软链接，并显示操作信息" class="headerlink" title="给文件创建软链接，并显示操作信息"></a>给文件创建软链接，并显示操作信息</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sv source.log link.log</span><br></pre></td></tr></table></figure><h6 id="给文件创建硬链接，并显示操作信息"><a href="#给文件创建硬链接，并显示操作信息" class="headerlink" title="给文件创建硬链接，并显示操作信息"></a>给文件创建硬链接，并显示操作信息</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -v source.log link1.log</span><br></pre></td></tr></table></figure><h6 id="给目录创建软链接"><a href="#给目录创建软链接" class="headerlink" title="给目录创建软链接"></a>给目录创建软链接</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sv &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test3 &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test5</span><br></pre></td></tr></table></figure><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h4><h5 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h5><p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。</p><p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找</p><h6 id="常用参数-3"><a href="#常用参数-3" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-l num（要显示的行数）</span><br><span class="line">-f   将特定的档案系统排除在外，如将proc排除在外</span><br><span class="line">-r   使用正则运算式做为寻找条件</span><br></pre></td></tr></table></figure><h5 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h5><h6 id="查找和-pwd-相关的所有文件-文件名中包含-pwd）"><a href="#查找和-pwd-相关的所有文件-文件名中包含-pwd）" class="headerlink" title="查找和 pwd 相关的所有文件(文件名中包含 pwd）"></a>查找和 pwd 相关的所有文件(文件名中包含 pwd）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate pwd</span><br></pre></td></tr></table></figure><h6 id="搜索-etc-目录下所有以-sh-开头的文件"><a href="#搜索-etc-目录下所有以-sh-开头的文件" class="headerlink" title="搜索 etc 目录下所有以 sh 开头的文件"></a>搜索 etc 目录下所有以 sh 开头的文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate &#x2F;etc&#x2F;sh</span><br></pre></td></tr></table></figure><h6 id="查找-var-目录下，以-reason-结尾的文件"><a href="#查找-var-目录下，以-reason-结尾的文件" class="headerlink" title="查找 /var 目录下，以 reason 结尾的文件"></a>查找 /var 目录下，以 reason 结尾的文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate -r &#39;^&#x2F;var.*reason$&#39;（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）</span><br></pre></td></tr></table></figure><h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><h5 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h5><p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。</p><h6 id="常用参数-4"><a href="#常用参数-4" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-b   定位可执行文件。</span><br><span class="line">-m   定位帮助文件。</span><br><span class="line">-s   定位源代码文件。</span><br><span class="line">-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。</span><br></pre></td></tr></table></figure><h5 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h5><h6 id="查找-locate-程序相关文件"><a href="#查找-locate-程序相关文件" class="headerlink" title="查找 locate 程序相关文件"></a>查找 locate 程序相关文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis locate</span><br></pre></td></tr></table></figure><h6 id="查找-locate-的源码文件"><a href="#查找-locate-的源码文件" class="headerlink" title="查找 locate 的源码文件"></a>查找 locate 的源码文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -s locate</span><br></pre></td></tr></table></figure><h6 id="查找-lcoate-的帮助文件"><a href="#查找-lcoate-的帮助文件" class="headerlink" title="查找 lcoate 的帮助文件"></a>查找 lcoate 的帮助文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -m locate</span><br></pre></td></tr></table></figure><h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><h5 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h5><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which     查看可执行文件的位置。</span><br><span class="line">whereis 查看文件的位置。</span><br><span class="line">locate  配合数据库查看文件位置。</span><br><span class="line">find        实际搜寻硬盘查询文件名称。</span><br></pre></td></tr></table></figure><p>which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><h6 id="常用参数-5"><a href="#常用参数-5" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</span><br></pre></td></tr></table></figure><h5 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h5><h6 id="查看-ls-命令是否存在，执行哪个"><a href="#查看-ls-命令是否存在，执行哪个" class="headerlink" title="查看 ls 命令是否存在，执行哪个"></a>查看 ls 命令是否存在，执行哪个</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ls</span><br></pre></td></tr></table></figure><h6 id="查看-which"><a href="#查看-which" class="headerlink" title="查看 which"></a>查看 which</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which which</span><br></pre></td></tr></table></figure><h6 id="查看-cd"><a href="#查看-cd" class="headerlink" title="查看 cd"></a>查看 cd</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）</span><br></pre></td></tr></table></figure><h6 id="查看当前-PATH-配置："><a href="#查看当前-PATH-配置：" class="headerlink" title="查看当前 PATH 配置："></a>查看当前 PATH 配置：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>或使用 env 查看所有环境变量及对应值</p><h3 id="文档编辑命令"><a href="#文档编辑命令" class="headerlink" title="文档编辑命令"></a>文档编辑命令</h3><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><h5 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h5><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p><p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><h6 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [option] pattern file|dir</span><br></pre></td></tr></table></figure><h6 id="常用参数-6"><a href="#常用参数-6" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-A n --after-context显示匹配字符后n行</span><br><span class="line">-B n --before-context显示匹配字符前n行</span><br><span class="line">-C n --context 显示匹配字符前后n行</span><br><span class="line">-c --count 计算符合样式的列数</span><br><span class="line">-i 忽略大小写</span><br><span class="line">-l 只列出文件内容符合指定的样式的文件名称</span><br><span class="line">-f 从文件中读取关键词</span><br><span class="line">-n 显示匹配内容的所在文件中行数</span><br><span class="line">-R 递归查找文件夹</span><br></pre></td></tr></table></figure><h6 id="grep-的规则表达式"><a href="#grep-的规则表达式" class="headerlink" title="grep 的规则表达式"></a>grep 的规则表达式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">^  #锚定行的开始 如：&#39;^grep&#39;匹配所有以grep开头的行。 </span><br><span class="line">$  #锚定行的结束 如：&#39;grep$&#39;匹配所有以grep结尾的行。 </span><br><span class="line">.  #匹配一个非换行符的字符 如：&#39;gr.p&#39;匹配gr后接一个任意字符，然后是p。  </span><br><span class="line">*  #匹配零个或多个先前字符 如：&#39;*grep&#39;匹配所有一个或多个空格后紧跟grep的行。</span><br><span class="line">.*   #一起用代表任意字符。  </span><br><span class="line">[]   #匹配一个指定范围内的字符，如&#39;[Gg]rep&#39;匹配Grep和grep。 </span><br><span class="line">[^]  #匹配一个不在指定范围内的字符，如：&#39;[^A-FH-Z]rep&#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  </span><br><span class="line">\(..\)  #标记匹配字符，如&#39;\(love\)&#39;，love被标记为1。   </span><br><span class="line">\&lt;      #锚定单词的开始，如:&#39;\&lt;grep&#39;匹配包含以grep开头的单词的行。</span><br><span class="line">\&gt;      #锚定单词的结束，如&#39;grep\&gt;&#39;匹配包含以grep结尾的单词的行。</span><br><span class="line">x\&#123;m\&#125;  #重复字符x，m次，如：&#39;0\&#123;5\&#125;&#39;匹配包含5个o的行。 </span><br><span class="line">x\&#123;m,\&#125;  #重复字符x,至少m次，如：&#39;o\&#123;5,\&#125;&#39;匹配至少有5个o的行。  </span><br><span class="line">x\&#123;m,n\&#125;  #重复字符x，至少m次，不多于n次，如：&#39;o\&#123;5,10\&#125;&#39;匹配5--10个o的行。  </span><br><span class="line">\w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#39;G\w*p&#39;匹配以G后跟零个或多个文字或数字字符，然后是p。  </span><br><span class="line">\W    #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  </span><br><span class="line">\b    #单词锁定符，如: &#39;\bgrep\b&#39;只匹配grep。</span><br></pre></td></tr></table></figure><h5 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h5><h6 id="查找指定进程"><a href="#查找指定进程" class="headerlink" title="查找指定进程"></a>查找指定进程</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep svn</span><br></pre></td></tr></table></figure><h6 id="查找指定进程个数"><a href="#查找指定进程个数" class="headerlink" title="查找指定进程个数"></a>查找指定进程个数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep svn -c</span><br></pre></td></tr></table></figure><h6 id="从文件中读取关键词"><a href="#从文件中读取关键词" class="headerlink" title="从文件中读取关键词"></a>从文件中读取关键词</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test1.txt | grep -f key.log</span><br></pre></td></tr></table></figure><h6 id="从文件夹中递归查找以grep开头的行，并只列出文件"><a href="#从文件夹中递归查找以grep开头的行，并只列出文件" class="headerlink" title="从文件夹中递归查找以grep开头的行，并只列出文件"></a>从文件夹中递归查找以grep开头的行，并只列出文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -lR &#39;^grep&#39; &#x2F;tmp</span><br></pre></td></tr></table></figure><h6 id="查找非x开关的行内容"><a href="#查找非x开关的行内容" class="headerlink" title="查找非x开关的行内容"></a>查找非x开关的行内容</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;^[^x]&#39; test.txt</span><br></pre></td></tr></table></figure><h6 id="显示包含-ed-或者-at-字符的内容行"><a href="#显示包含-ed-或者-at-字符的内容行" class="headerlink" title="显示包含 ed 或者 at 字符的内容行"></a>显示包含 ed 或者 at 字符的内容行</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E &#39;ed|at&#39; test.txt</span><br></pre></td></tr></table></figure><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><h5 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h5><p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出</p><h6 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc [option] file..</span><br></pre></td></tr></table></figure><h6 id="命令参数-1"><a href="#命令参数-1" class="headerlink" title="命令参数"></a>命令参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 统计字节数</span><br><span class="line">-l 统计行数</span><br><span class="line">-m 统计字符数</span><br><span class="line">-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串</span><br></pre></td></tr></table></figure><h5 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h5><h6 id="查找文件的-行数-单词数-字节数-文件名"><a href="#查找文件的-行数-单词数-字节数-文件名" class="headerlink" title="查找文件的 行数 单词数 字节数 文件名"></a>查找文件的 行数 单词数 字节数 文件名</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc text.txt</span><br></pre></td></tr></table></figure><h6 id="统计输出结果的行数"><a href="#统计输出结果的行数" class="headerlink" title="统计输出结果的行数"></a>统计输出结果的行数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt | wc -l</span><br></pre></td></tr></table></figure><h3 id="网络通讯命令"><a href="#网络通讯命令" class="headerlink" title="网络通讯命令"></a>网络通讯命令</h3><h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><ul><li>ifconfig 用于查看和配置 Linux 系统的网络接口。<br/></li><li>查看所有网络接口及其状态：<code>ifconfig -a</code> 。</li><li>使用 up 和 down 命令启动或停止某个接口：<code>ifconfig eth0 up</code> 和 <code>ifconfig eth0 down</code> 。</li></ul><h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><p>iptables ，是一个配置 Linux 内核防火墙的命令行工具。功能非常强大，对于我们开发来说，主要掌握如何开放端口即可。例如：</p><ul><li><p>把来源 IP 为 192.168.1.101 访问本机 80 端口的包直接拒绝：iptables -I INPUT -s 192.168.1.101 -p tcp –dport 80 -j REJECT 。</p></li><li><p>开启 80 端口，因为web对外都是这个端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEP</span><br></pre></td></tr></table></figure></li><li><p>另外，要注意使用 iptables save 命令，进行保存。否则，服务器重启后，配置的规则将丢失。</p></li></ul><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><h5 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h5><p>Linux netstat命令用于显示网络状态。<br>利用netstat指令可让你得知整个Linux系统的网络情况。</p><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat [-acCeFghilMnNoprstuvVwx][-A&lt;网络类型&gt;][--ip]</span><br></pre></td></tr></table></figure><h6 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-a或–all 显示所有连线中的Socket。</span><br><span class="line">-A&lt;网络类型&gt;或–&lt;网络类型&gt; 列出该网络类型连线中的相关地址。</span><br><span class="line">-c或–continuous 持续列出网络状态。</span><br><span class="line">-C或–cache 显示路由器配置的快取信息。</span><br><span class="line">-e或–extend 显示网络其他相关信息。</span><br><span class="line">-F或–fib 显示FIB。</span><br><span class="line">-g或–groups 显示多重广播功能群组组员名单。</span><br><span class="line">-h或–help 在线帮助。</span><br><span class="line">-i或–interfaces 显示网络界面信息表单。</span><br><span class="line">-l或–listening 显示监控中的服务器的Socket。</span><br><span class="line">-M或–masquerade 显示伪装的网络连线。</span><br><span class="line">-n或–numeric 直接使用IP地址，而不通过域名服务器。</span><br><span class="line">-N或–netlink或–symbolic 显示网络硬件外围设备的符号连接名称。</span><br><span class="line">-o或–timers 显示计时器。</span><br><span class="line">-p或–programs 显示正在使用Socket的程序识别码和程序名称。</span><br><span class="line">-r或–route 显示Routing Table。</span><br><span class="line">-s或–statistice 显示网络工作信息统计表。</span><br><span class="line">-t或–tcp 显示TCP传输协议的连线状况。</span><br><span class="line">-u或–udp 显示UDP传输协议的连线状况。</span><br><span class="line">-v或–verbose 显示指令执行过程。</span><br><span class="line">-V或–version 显示版本信息。</span><br><span class="line">-w或–raw 显示RAW传输协议的连线状况。</span><br><span class="line">-x或–unix 此参数的效果和指定&quot;-A unix&quot;参数相同。</span><br><span class="line">–ip或–inet 此参数的效果和指定&quot;-A inet&quot;参数相同。</span><br></pre></td></tr></table></figure><h5 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h5><h6 id="如何查看系统都开启了哪些端口？"><a href="#如何查看系统都开启了哪些端口？" class="headerlink" title="如何查看系统都开启了哪些端口？"></a>如何查看系统都开启了哪些端口？</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp</span><br></pre></td></tr></table></figure><h6 id="如何查看网络连接状况？"><a href="#如何查看网络连接状况？" class="headerlink" title="如何查看网络连接状况？"></a>如何查看网络连接状况？</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an</span><br></pre></td></tr></table></figure><h6 id="如何统计系统当前进程连接数？"><a href="#如何统计系统当前进程连接数？" class="headerlink" title="如何统计系统当前进程连接数？"></a>如何统计系统当前进程连接数？</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入命令 netstat -an | grep ESTABLISHED | wc -l 。</span><br><span class="line">输出结果 177 。一共有 177 连接数。</span><br></pre></td></tr></table></figure><h6 id="用-netstat-命令配合其他命令，按照源-IP-统计所有到-80-端口的-ESTABLISHED-状态链接的个数？"><a href="#用-netstat-命令配合其他命令，按照源-IP-统计所有到-80-端口的-ESTABLISHED-状态链接的个数？" class="headerlink" title="用 netstat 命令配合其他命令，按照源 IP 统计所有到 80 端口的 ESTABLISHED 状态链接的个数？"></a>用 netstat 命令配合其他命令，按照源 IP 统计所有到 80 端口的 ESTABLISHED 状态链接的个数？</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an|grep ESTABLISHED</span><br></pre></td></tr></table></figure><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>Linux ping命令用于检测主机。</p><p>执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p><p>指定接收包的次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -c 2 www.baidu.com</span><br></pre></td></tr></table></figure><h4 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h4><p>Linux telnet命令用于远端登入。<br>执行telnet指令开启终端机阶段作业，并登入远端主机。</p><h6 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet [-8acdEfFKLrx][-b&lt;主机别名&gt;][-e&lt;脱离字符&gt;][-k&lt;域名&gt;][-l&lt;用户名称&gt;][-n&lt;记录文件&gt;][-S&lt;服务类型&gt;][-X&lt;认证形态&gt;][主机名称或IP地址&lt;通信端口&gt;]</span><br></pre></td></tr></table></figure><h6 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-8 允许使用8位字符资料，包括输入与输出。</span><br><span class="line">-a 尝试自动登入远端系统。</span><br><span class="line">-b&lt;主机别名&gt; 使用别名指定远端主机名称。</span><br><span class="line">-c 不读取用户专属目录里的.telnetrc文件。</span><br><span class="line">-d 启动排错模式。</span><br><span class="line">-e&lt;脱离字符&gt; 设置脱离字符。</span><br><span class="line">-E 滤除脱离字符。</span><br><span class="line">-f 此参数的效果和指定&quot;-F&quot;参数相同。</span><br><span class="line">-F 使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机。</span><br><span class="line">-k&lt;域名&gt; 使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名。</span><br><span class="line">-K 不自动登入远端主机。</span><br><span class="line">-l&lt;用户名称&gt; 指定要登入远端主机的用户名称。</span><br><span class="line">-L 允许输出8位字符资料。</span><br><span class="line">-n&lt;记录文件&gt; 指定文件记录相关信息。</span><br><span class="line">-r 使用类似rlogin指令的用户界面。</span><br><span class="line">-S&lt;服务类型&gt; 设置telnet连线所需的IP TOS信息。</span><br><span class="line">-x 假设主机有支持数据加密的功能，就使用它。</span><br><span class="line">-X&lt;认证形态&gt; 关闭指定的认证形态。</span><br></pre></td></tr></table></figure><h6 id="登录远程主机"><a href="#登录远程主机" class="headerlink" title="登录远程主机"></a>登录远程主机</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 登录IP为 192.168.0.5 的远程主机</span><br><span class="line">telnet 192.168.0.5</span><br></pre></td></tr></table></figure><h3 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h3><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p><h6 id="常用参数-7"><a href="#常用参数-7" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</span><br><span class="line">-a  当处理当前进程时，不限制命令名和进程号的对应关系</span><br><span class="line">-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号</span><br><span class="line">-s  指定发送信号</span><br><span class="line">-u  指定用户</span><br></pre></td></tr></table></figure><h6 id="先使用ps查找进程pro1，然后用kill杀掉"><a href="#先使用ps查找进程pro1，然后用kill杀掉" class="headerlink" title="先使用ps查找进程pro1，然后用kill杀掉"></a>先使用ps查找进程pro1，然后用kill杀掉</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 $(ps -ef | grep pro1)</span><br></pre></td></tr></table></figure><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><h5 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h5><p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top</p><p>linux上进程有5种状态:</p><ul><li>运行(正在运行或在运行队列中等待)</li><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li><li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行)<h6 id="ps-工具标识进程的5种状态码"><a href="#ps-工具标识进程的5种状态码" class="headerlink" title="ps 工具标识进程的5种状态码"></a>ps 工具标识进程的5种状态码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D 不可中断 uninterruptible sleep (usually IO)</span><br><span class="line">R 运行 runnable (on run queue)</span><br><span class="line">S 中断 sleeping</span><br><span class="line">T 停止 traced or stopped</span><br><span class="line">Z 僵死 a defunct (”zombie”) process</span><br></pre></td></tr></table></figure><h6 id="命令参数-2"><a href="#命令参数-2" class="headerlink" title="命令参数"></a>命令参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-A 显示所有进程</span><br><span class="line">a 显示所有进程</span><br><span class="line">-a 显示同一终端下所有进程</span><br><span class="line">c 显示进程真实名称</span><br><span class="line">e 显示环境变量</span><br><span class="line">f 显示进程间的关系</span><br><span class="line">r 显示当前终端运行的进程</span><br><span class="line">-aux 显示所有包含其它使用的进程</span><br></pre></td></tr></table></figure><h5 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h5><h6 id="显示当前所有进程环境变量及进程间关系"><a href="#显示当前所有进程环境变量及进程间关系" class="headerlink" title="显示当前所有进程环境变量及进程间关系"></a>显示当前所有进程环境变量及进程间关系</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><h6 id="显示当前所有进程"><a href="#显示当前所有进程" class="headerlink" title="显示当前所有进程"></a>显示当前所有进程</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure><h6 id="与grep联用查找某进程"><a href="#与grep联用查找某进程" class="headerlink" title="与grep联用查找某进程"></a>与grep联用查找某进程</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep apache</span><br></pre></td></tr></table></figure><h6 id="找出与-cron-与-syslog-这两个服务有关的-PID-号码"><a href="#找出与-cron-与-syslog-这两个服务有关的-PID-号码" class="headerlink" title="找出与 cron 与 syslog 这两个服务有关的 PID 号码"></a>找出与 cron 与 syslog 这两个服务有关的 PID 号码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep &#39;(cron|syslog)&#39;</span><br></pre></td></tr></table></figure></li></ul><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><h5 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h5><p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等</p><h6 id="常用参数-8"><a href="#常用参数-8" class="headerlink" title="常用参数"></a>常用参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 显示完整的进程命令</span><br><span class="line">-s 保密模式</span><br><span class="line">-p &lt;进程号&gt; 指定进程显示</span><br><span class="line">-n &lt;次数&gt;循环显示次数</span><br></pre></td></tr></table></figure><h5 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">top - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35</span><br><span class="line">Tasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st</span><br><span class="line">Mem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers</span><br><span class="line">Swap: 32764556k total,        0k used, 32764556k free,  3612636k cached</span><br><span class="line">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  </span><br><span class="line">28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java</span><br></pre></td></tr></table></figure><p>前五行是当前系统情况整体的统计信息区。</p><p><code>第一行</code>，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</p><p>14:06:23 — 当前系统时间</p><p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）</p><p>2 users — 当前有2个用户登录系统</p><p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p><p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p><p><code>第二行</code>，Tasks — 任务（进程），具体信息说明如下：</p><p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p><p><code>第三行</code>，cpu状态信息，具体属性说明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5.9%us — 用户空间占用CPU的百分比。</span><br><span class="line">3.4% sy — 内核空间占用CPU的百分比。</span><br><span class="line">0.0% ni — 改变过优先级的进程占用CPU的百分比</span><br><span class="line">90.4% id — 空闲CPU百分比</span><br><span class="line">0.0% wa — IO等待占用CPU的百分比</span><br><span class="line">0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比</span><br><span class="line">0.2% si — 软中断（Software Interrupts）占用CPU的百分比</span><br></pre></td></tr></table></figure><p>备注：在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！<br><code>第四行</code>，内存状态，具体信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">32949016k total — 物理内存总量（32GB）</span><br><span class="line">14411180k used — 使用中的内存总量（14GB）</span><br><span class="line">18537836k free — 空闲内存总量（18GB）</span><br><span class="line">169884k buffers — 缓存的内存量 （169M）</span><br></pre></td></tr></table></figure><p><code>第五行</code>，swap交换分区信息，具体信息说明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">32764556k total — 交换区总量（32GB）</span><br><span class="line">0k used — 使用的交换区总量（0K）</span><br><span class="line">32764556k free — 空闲交换区总量（32GB）</span><br><span class="line">3612636k cached — 缓冲的交换区总量（3.6GB）</span><br></pre></td></tr></table></figure><p><code>第六行</code>，空行。</p><p><code>第七行</code>以下：各进程（任务）的状态监控，项目列信息说明如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PID — 进程id</span><br><span class="line">USER — 进程所有者</span><br><span class="line">PR — 进程优先级</span><br><span class="line">NI — nice值。负值表示高优先级，正值表示低优先级</span><br><span class="line">VIRT — 进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</span><br><span class="line">RES — 进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</span><br><span class="line">SHR — 共享内存大小，单位kb</span><br><span class="line">S — 进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</span><br><span class="line">%CPU — 上次更新到现在的CPU时间占用百分比</span><br><span class="line">%MEM — 进程使用的物理内存百分比</span><br><span class="line">TIME+ — 进程使用的CPU时间总计，单位1&#x2F;100秒</span><br><span class="line">COMMAND — 进程名称（命令名&#x2F;命令行）</span><br></pre></td></tr></table></figure><h6 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a>top交互命令</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h 显示top交互命令帮助信息</span><br><span class="line">c 切换显示命令名称和完整命令行</span><br><span class="line">m 以内存使用率排序</span><br><span class="line">P 根据CPU使用百分比大小进行排序</span><br><span class="line">T 根据时间&#x2F;累计时间进行排序</span><br><span class="line">W 将当前设置写入~&#x2F;.toprc文件中</span><br><span class="line">o或者O 改变显示项目的顺序</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://thinkwon.blog.csdn.net/article/details/104588679&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linux面试题（2020最新版）&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;文件管理命令&quot;&gt;&lt;a href=&quot;#文件管理命令&quot; class=&quot;headerlink&quot; title=&quot;文件管理命令&quot;&gt;&lt;/a&gt;文件管理命令&lt;/h3&gt;&lt;h4 id=&quot;cat&quot;&gt;&lt;a href=&quot;#cat&quot; class=&quot;headerlink&quot; title=&quot;cat&quot;&gt;&lt;/a&gt;cat&lt;/h4&gt;&lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;p&gt;cat 命令用于连接文件并打印到标准输出设备上。&lt;br&gt;cat 主要有三大功能：&lt;/p&gt;
&lt;h6 id=&quot;一次显示整个文件&quot;&gt;&lt;a href=&quot;#一次显示整个文件&quot; class=&quot;headerlink&quot; title=&quot;一次显示整个文件&quot;&gt;&lt;/a&gt;一次显示整个文件&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;从键盘创建一个文件&quot;&gt;&lt;a href=&quot;#从键盘创建一个文件&quot; class=&quot;headerlink&quot; title=&quot;从键盘创建一个文件&quot;&gt;&lt;/a&gt;从键盘创建一个文件&lt;br/&gt;&lt;/h6&gt;&lt;p&gt;只能创建新文件，不能编辑已有文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;gt; filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;将几个文件合并为一个文件&quot;&gt;&lt;a href=&quot;#将几个文件合并为一个文件&quot; class=&quot;headerlink&quot; title=&quot;将几个文件合并为一个文件 &quot;&gt;&lt;/a&gt;将几个文件合并为一个文件 &lt;br/&gt;&lt;/h6&gt;&lt;p&gt;-b 对非空输出行号 &lt;br/&gt;&lt;br&gt;-n 输出所有行号&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat file1 file2 &amp;gt; file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h5&gt;&lt;h6 id=&quot;把-log2012-log-的文件内容加上行号后输入-log2013-log-这个文件里&quot;&gt;&lt;a href=&quot;#把-log2012-log-的文件内容加上行号后输入-log2013-log-这个文件里&quot; class=&quot;headerlink&quot; title=&quot;把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里&quot;&gt;&lt;/a&gt;把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat -n log2012.log log2013.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;把-log2012-log-和-log2013-log-的文件内容加上行号（空白行不加）之后将内容附加到-log-log-里&quot;&gt;&lt;a href=&quot;#把-log2012-log-和-log2013-log-的文件内容加上行号（空白行不加）之后将内容附加到-log-log-里&quot; class=&quot;headerlink&quot; title=&quot;把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里&quot;&gt;&lt;/a&gt;把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat -b log2012.log log2013.log log.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;使用-here-doc-生成新文件&quot;&gt;&lt;a href=&quot;#使用-here-doc-生成新文件&quot; class=&quot;headerlink&quot; title=&quot;使用 here doc 生成新文件&quot;&gt;&lt;/a&gt;使用 here doc 生成新文件&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;gt;log.txt &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;Hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;World&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;PWD&amp;#x3D;$(pwd)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls -l log.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat log.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;World&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PWD&amp;#x3D;&amp;#x2F;opt&amp;#x2F;soft&amp;#x2F;test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;反向列示&quot;&gt;&lt;a href=&quot;#反向列示&quot; class=&quot;headerlink&quot; title=&quot;反向列示&quot;&gt;&lt;/a&gt;反向列示&lt;/h6&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tac log.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PWD&amp;#x3D;&amp;#x2F;opt&amp;#x2F;soft&amp;#x2F;test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;World&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode --- 199. 二叉树的右视图</title>
    <link href="http://yoursite.com/2021/04/05/leetcode-199-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/"/>
    <id>http://yoursite.com/2021/04/05/leetcode-199-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%8F%B3%E8%A7%86%E5%9B%BE/</id>
    <published>2021-04-05T15:22:00.000Z</published>
    <updated>2021-05-29T07:14:02.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view" target="_blank" rel="noopener">二叉树的右视图</a></p><p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p>示例</p><blockquote><p>输入: [1,2,3,null,5,null,4] <br/><br>输出: [1, 3, 4] <br/><br>解释:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   1            &lt;---</span><br><span class="line"> &#x2F;   \</span><br><span class="line">2     3         &lt;---</span><br><span class="line"> \     \</span><br><span class="line">  5     4       &lt;---</span><br></pre></td></tr></table></figure><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, left=None, right=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归遍历</span></span><br><span class="line"><span class="comment"># class Solution:</span></span><br><span class="line"><span class="comment">#     def rightSideView(self, root: TreeNode) -&gt; list:</span></span><br><span class="line"><span class="comment">#         if not root:</span></span><br><span class="line"><span class="comment">#             return []</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         rv = dict()</span></span><br><span class="line"><span class="comment">#         index = -1</span></span><br><span class="line"><span class="comment">#         self._traverse(root, rv, index)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         keys = sorted(rv.keys())</span></span><br><span class="line"><span class="comment">#         result = [rv[k] for k in keys]</span></span><br><span class="line"><span class="comment">#         return result</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def _traverse(self, node: TreeNode, rv: dict, index: int):</span></span><br><span class="line"><span class="comment">#         """</span></span><br><span class="line"><span class="comment">#         前序, 中序, 后序遍历皆可, 不影响结果</span></span><br><span class="line"><span class="comment">#         只需要保证右子树比左子树后遍历即可</span></span><br><span class="line"><span class="comment">#         """</span></span><br><span class="line"><span class="comment">#         index += 1</span></span><br><span class="line"><span class="comment">#         if node:</span></span><br><span class="line"><span class="comment">#             # 每一层保存更靠右的结果</span></span><br><span class="line"><span class="comment">#             rv[index] = node.val</span></span><br><span class="line"><span class="comment">#             self._traverse(node.left, rv, index + 1)</span></span><br><span class="line"><span class="comment">#             self._traverse(node.right, rv, index + 1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 层序遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span><span class="params">(self, root: TreeNode)</span> -&gt; list:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        rv = list()</span><br><span class="line">        queue = [root]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            tmp = queue[:]</span><br><span class="line">            queue.clear()</span><br><span class="line">            <span class="keyword">for</span> index, t <span class="keyword">in</span> enumerate(tmp):</span><br><span class="line">                <span class="keyword">if</span> t.left:</span><br><span class="line">                    queue.append(t.left)</span><br><span class="line">                <span class="keyword">if</span> t.right:</span><br><span class="line">                    queue.append(t.right)</span><br><span class="line">                <span class="comment"># 保存每一层的最后一个数据</span></span><br><span class="line">                <span class="keyword">if</span> index == len(tmp) - <span class="number">1</span>:</span><br><span class="line">                    rv.append(t.val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = TreeNode(<span class="number">1</span>)</span><br><span class="line">n2 = TreeNode(<span class="number">2</span>)</span><br><span class="line">n3 = TreeNode(<span class="number">3</span>)</span><br><span class="line">n4 = TreeNode(<span class="number">4</span>)</span><br><span class="line">n5 = TreeNode(<span class="number">5</span>)</span><br><span class="line">n1.left = n2</span><br><span class="line">n1.right = n3</span><br><span class="line">n2.right = n5</span><br><span class="line"><span class="comment"># n3.right = n4</span></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.rightSideView(n1))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-right-side-view&quot;
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode --- 94. 二叉树的中序遍历</title>
    <link href="http://yoursite.com/2021/04/05/leetcode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2021/04/05/leetcode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</id>
    <published>2021-04-05T14:27:00.000Z</published>
    <updated>2021-05-29T07:13:19.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="">二叉树的中序遍历</a></p><p>给定一个二叉树的根节点 root ，返回它的 中序 遍历。</p><p>示例 1：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210405222801.png" alt=""></p><blockquote><p>输入：root = [1,null,2,3]<br/><br>输出：[1,3,2]</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, left=None, right=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归写法</span></span><br><span class="line"><span class="comment"># class Solution:</span></span><br><span class="line"><span class="comment">#     def inorderTraversal(self, root: TreeNode) -&gt; list:</span></span><br><span class="line"><span class="comment">#         if not root:</span></span><br><span class="line"><span class="comment">#             return []</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         rv = list()</span></span><br><span class="line"><span class="comment">#         self._inorder(root, rv)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         return rv</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def _inorder(self, node, rv):</span></span><br><span class="line"><span class="comment">#         if node:</span></span><br><span class="line"><span class="comment">#             self._inorder(node.left, rv)</span></span><br><span class="line"><span class="comment">#             rv.append(node.val)</span></span><br><span class="line"><span class="comment">#             self._inorder(node.right, rv)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; list:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        rv = list()</span><br><span class="line">        stack = list()</span><br><span class="line">        node = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="comment"># 如果node值存在, 则入栈</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                <span class="comment"># 左子树遍历</span></span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 保存栈顶的值</span></span><br><span class="line">                node = stack.pop(<span class="number">-1</span>)</span><br><span class="line">                rv.append(node.val)</span><br><span class="line">                <span class="comment"># 遍历右子树</span></span><br><span class="line">                node = node.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = TreeNode(<span class="number">1</span>)</span><br><span class="line">n2 = TreeNode(<span class="number">2</span>)</span><br><span class="line">n3 = TreeNode(<span class="number">3</span>)</span><br><span class="line">n1.right = n2</span><br><span class="line">n2.left = n3</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.inorderTraversal(n1))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;二叉树的中序遍历&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个二叉树的根节点 root ，返回它的 中序 遍历。&lt;/p&gt;
&lt;p&gt;示例
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode --- 912. 排序数组</title>
    <link href="http://yoursite.com/2021/03/27/leetcode-912-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2021/03/27/leetcode-912-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</id>
    <published>2021-03-27T07:12:00.000Z</published>
    <updated>2021-05-29T07:14:33.709Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/sort-an-array/" target="_blank" rel="noopener">排序数组</a></p><p>示例</p><blockquote><p>输入：nums = [5,2,3,1] <br/><br>输出：[1,2,3,5]</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortArray</span><span class="params">(self, nums: list)</span> -&gt; list:</span></span><br><span class="line">        ns = nums[:]</span><br><span class="line">        <span class="keyword">return</span> self._quick_sort(nums, <span class="number">0</span>, len(ns) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_quick_sort</span><span class="params">(self, nums, left, right)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">        base_index = self._sort(left, right, nums)</span><br><span class="line">        self._quick_sort(nums, left, base_index - <span class="number">1</span>)</span><br><span class="line">        self._quick_sort(nums, base_index + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sort</span><span class="params">(self, left, right, nums)</span>:</span></span><br><span class="line"></span><br><span class="line">        temp = left</span><br><span class="line">        base = nums[left]</span><br><span class="line">        <span class="keyword">while</span> left != right:</span><br><span class="line">            <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[right] &gt;= base:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> nums[left] &lt;= base:</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left &lt; right:</span><br><span class="line">                nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line"></span><br><span class="line">        nums[temp] = nums[left]</span><br><span class="line">        nums[left] = base</span><br><span class="line">        <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">s = Solution()</span><br><span class="line">print(s.sortArray(num))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sort-an-array/&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode --- 704. 二分查找</title>
    <link href="http://yoursite.com/2021/03/27/leetcode-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2021/03/27/leetcode-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</id>
    <published>2021-03-27T07:10:00.000Z</published>
    <updated>2021-05-29T07:14:29.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/binary-search" target="_blank" rel="noopener">二分查找</a></p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例</p><blockquote><p>输入: nums = [-1,0,3,5,9,12], target = 9 <br/><br>输出: 4 <br/><br>解释: 9 出现在 nums 中并且下标为 4 <br/></p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums: list, target: int)</span> -&gt; int:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">nums = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>]</span><br><span class="line">target = <span class="number">2</span></span><br><span class="line">print(s.search(nums, target))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-search&quot; target=&quot;_blan
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode --- 415. 字符串相加</title>
    <link href="http://yoursite.com/2021/03/27/leetcode-415-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2021/03/27/leetcode-415-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</id>
    <published>2021-03-27T07:08:00.000Z</published>
    <updated>2021-05-29T07:14:25.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/add-strings/" target="_blank" rel="noopener">字符串相加</a></p><p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addStrings</span><span class="params">(self, num1: str, num2: str)</span> -&gt; str:</span></span><br><span class="line">        num1 = num1[::<span class="number">-1</span>]</span><br><span class="line">        num2 = num2[::<span class="number">-1</span>]</span><br><span class="line">        length = min(len(num1), len(num2))</span><br><span class="line">        result = <span class="string">""</span></span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(length):</span><br><span class="line">            r = int(num1[index]) + int(num2[index]) + tmp</span><br><span class="line">            result += str(r % <span class="number">10</span>)</span><br><span class="line">            tmp = r // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> length == len(num1):</span><br><span class="line">            num = num2</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = num1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(length, len(num)):</span><br><span class="line">            r = int(num[index]) + tmp</span><br><span class="line">            result += str(r % <span class="number">10</span>)</span><br><span class="line">            tmp = r // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tmp != <span class="number">0</span>:</span><br><span class="line">            result += str(tmp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 = <span class="string">"123458888"</span></span><br><span class="line">n2 = <span class="string">"2232342358233289"</span></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.addStrings(n1, n2))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/add-strings/&quot; target=&quot;_blank
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
  </entry>
  
</feed>
