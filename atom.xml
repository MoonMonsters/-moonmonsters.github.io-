<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MoonMonsters</title>
  
  <subtitle>Do Not Repeat Yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-12-14T13:09:19.048Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_Tao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang - 解析yaml配置文件</title>
    <link href="http://yoursite.com/2020/12/14/golang-%E8%A7%A3%E6%9E%90yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/12/14/golang-%E8%A7%A3%E6%9E%90yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2020-12-14T13:09:00.000Z</published>
    <updated>2020-12-14T13:09:19.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-解析yaml配置文件"><a href="#golang-解析yaml配置文件" class="headerlink" title="golang - 解析yaml配置文件"></a>golang - 解析yaml配置文件</h1><h3 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u <span class="string">"github.com/spf13/viper"</span></span><br></pre></td></tr></table></figure><h3 id="文件整体结构"><a href="#文件整体结构" class="headerlink" title="文件整体结构"></a>文件整体结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── configs</span><br><span class="line">│   └── stand_alone.yaml</span><br><span class="line">└── pkg</span><br><span class="line">    └── settings</span><br><span class="line">        ├── section.go</span><br><span class="line">        └── setting.go</span><br></pre></td></tr></table></figure><h3 id="yaml配置文件"><a href="#yaml配置文件" class="headerlink" title="yaml配置文件"></a>yaml配置文件</h3><p>路径: configs/stand_alone.yaml</p><p>详细格式可以参考:</p><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></p><p><a href="https://en.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">YAML</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server:</span></span><br><span class="line">  <span class="attr">StorageRoot:</span> <span class="string">"Storage/upload"</span></span><br><span class="line">  <span class="attr">ListenAddress:</span> <span class="string">":8888"</span></span><br></pre></td></tr></table></figure><h3 id="定义Setting结构体"><a href="#定义Setting结构体" class="headerlink" title="定义Setting结构体"></a>定义Setting结构体</h3><p>路径: pkg/settings/setting.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/spf13/viper"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Setting <span class="keyword">struct</span> &#123;</span><br><span class="line">    vp *viper.Viper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSetting</span><span class="params">()</span> <span class="params">(*Setting, error)</span></span> &#123;</span><br><span class="line">    vp := viper.New()</span><br><span class="line">    vp.SetConfigName(<span class="string">"stand_alone.yaml"</span>)</span><br><span class="line">    vp.AddConfigPath(<span class="string">"stand_alone/configs"</span>)</span><br><span class="line">    vp.SetConfigType(<span class="string">"yaml"</span>)</span><br><span class="line"></span><br><span class="line">    err := vp.ReadInConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;Setting&#123;vp&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义Section结构体"><a href="#定义Section结构体" class="headerlink" title="定义Section结构体"></a>定义Section结构体</h3><p>路径: pkg/settings/section.go</p><p>如果有多组配置, 那么按照格式, 创建多个struct变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    StorageRoot   <span class="keyword">string</span></span><br><span class="line">    ListenAddress <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Setting)</span> <span class="title">ReadSection</span><span class="params">(sType <span class="keyword">string</span>, section <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    err := s.vp.UnmarshalKey(sType, section)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"Storage/stand_alone/pkg/settings"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    setting, err := settings.NewSetting()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(<span class="string">"err: "</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> server *settings.Server</span><br><span class="line">    _ = setting.ReadSection(<span class="string">"Server"</span>, &amp;server)</span><br><span class="line">    fmt.Println(server.StorageRoot, server.ListenAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;golang-解析yaml配置文件&quot;&gt;&lt;a href=&quot;#golang-解析yaml配置文件&quot; class=&quot;headerlink&quot; title=&quot;golang - 解析yaml配置文件&quot;&gt;&lt;/a&gt;golang - 解析yaml配置文件&lt;/h1&gt;&lt;h3 id=&quot;安
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang - 使用令牌桶限制接口访问频率</title>
    <link href="http://yoursite.com/2020/12/12/golang-%E4%BD%BF%E7%94%A8%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87/"/>
    <id>http://yoursite.com/2020/12/12/golang-%E4%BD%BF%E7%94%A8%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87/</id>
    <published>2020-12-12T11:33:00.000Z</published>
    <updated>2020-12-14T12:28:44.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三方库"><a href="#三方库" class="headerlink" title="三方库"></a>三方库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/juju/ratelimit@v1<span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="令牌桶结构体"><a href="#令牌桶结构体" class="headerlink" title="令牌桶结构体"></a>令牌桶结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/juju/ratelimit"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 令牌桶信息</span></span><br><span class="line"><span class="keyword">type</span> Limiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    limiterBuckets <span class="keyword">map</span>[<span class="keyword">string</span>]*ratelimit.Bucket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 令牌Bucket</span></span><br><span class="line"><span class="keyword">type</span> LimiterBucketRule <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义键值对名称</span></span><br><span class="line">    Key <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 间隔多久放N个令牌</span></span><br><span class="line">    FillInterval time.Duration</span><br><span class="line">    <span class="comment">// 令牌桶的容量</span></span><br><span class="line">    Capacity <span class="keyword">int64</span></span><br><span class="line">    <span class="comment">// 每次到达间隔时间后所放的具体令牌数量</span></span><br><span class="line">    Quantum <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">type</span> LimiterIface <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 获取对应的限流器的键值对名称</span></span><br><span class="line">    Key(c *gin.Context) <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 获取令牌桶</span></span><br><span class="line">    GetBucket(key <span class="keyword">string</span>) (*ratelimit.Bucket, <span class="keyword">bool</span>)</span><br><span class="line">    <span class="comment">// 新增令牌桶</span></span><br><span class="line">    AddBuckets(rules ...LimiterBucketRule) LimiterIface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现令牌桶的接口"><a href="#实现令牌桶的接口" class="headerlink" title="实现令牌桶的接口"></a>实现令牌桶的接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/juju/ratelimit"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MethodLimiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Limiter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个令牌桶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMethodLimiter</span><span class="params">()</span> <span class="title">LimiterIface</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MethodLimiter&#123;</span><br><span class="line">        Limiter: &amp;Limiter&#123;</span><br><span class="line">            limiterBuckets: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*ratelimit.Bucket),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值对, 使用核心路由做key值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">Key</span><span class="params">(c *gin.Context)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    uri := c.Request.RequestURI</span><br><span class="line">    index := strings.Index(uri, <span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uri</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uri[:index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Bucket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">GetBucket</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(*ratelimit.Bucket, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    bucket, ok := l.limiterBuckets[key]</span><br><span class="line">    <span class="keyword">return</span> bucket, ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加bucket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">AddBuckets</span><span class="params">(rules ...LimiterBucketRule)</span> <span class="title">LimiterIface</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, rule := <span class="keyword">range</span> rules &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := l.limiterBuckets[rule.Key]; !ok &#123;</span><br><span class="line">            l.limiterBuckets[rule.Key] = ratelimit.NewBucketWithQuantum(rule.FillInterval, rule.Capacity, rule.Quantum)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/app"</span></span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/errcode"</span></span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/limiter"</span></span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RateLimiter</span><span class="params">(l limiter.LimiterIface)</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取令牌的key值</span></span><br><span class="line">        key := l.Key(c)</span><br><span class="line">        <span class="keyword">if</span> bucket, ok := l.GetBucket(key); ok &#123;</span><br><span class="line">            <span class="comment">// 传入1, 表示已使用一个令牌</span></span><br><span class="line">            count := bucket.TakeAvailable(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 如果剩余可用令牌数为0, 则抛出异常, 禁止访问</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">                response := app.NewResponse(c)</span><br><span class="line">                response.ToErrorResponse(errcode.TooManyRequests)</span><br><span class="line">                c.Abort()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c.Next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入gin的中间件"><a href="#加入gin的中间件" class="headerlink" title="加入gin的中间件"></a>加入gin的中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制了/auth的访问频率</span></span><br><span class="line"><span class="comment">// 限制时间间隔, 1秒钟</span></span><br><span class="line"><span class="comment">// 一秒钟内, 最多被访问10次</span></span><br><span class="line"><span class="comment">// 当一秒后, 重新放入10个令牌到令牌桶内, 也就是下一秒可再次被访问10次</span></span><br><span class="line"><span class="keyword">var</span> methodLimiters = limiter.NewMethodLimiter().AddBuckets(limiter.LimiterBucketRule&#123;</span><br><span class="line">    <span class="comment">// 令牌桶限制的url</span></span><br><span class="line">    Key: <span class="string">"/auth"</span>,</span><br><span class="line">    <span class="comment">// 时间间隔</span></span><br><span class="line">    FillInterval: time.Second * <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 令牌总容量</span></span><br><span class="line">    Capacity: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// 重新放入令牌桶数量</span></span><br><span class="line">    Quantum: <span class="number">10</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r := gin.New()</span><br><span class="line">r.Use(middleware.RateLimiter(methodLimiters))</span><br></pre></td></tr></table></figure><h3 id="从配置文件中读取方式"><a href="#从配置文件中读取方式" class="headerlink" title="从配置文件中读取方式"></a>从配置文件中读取方式</h3><h4 id="配置yaml"><a href="#配置yaml" class="headerlink" title="配置yaml"></a>配置yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Limiter:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Limits:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">"/auth"</span></span><br><span class="line">      <span class="attr">FillInterval:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">Capacity:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">Quantum:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">"/api/v1/tags"</span></span><br><span class="line">      <span class="attr">FillInterval:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">Capacity:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">Quantum:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="配置Setting"><a href="#配置Setting" class="headerlink" title="配置Setting"></a>配置Setting</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LimiterSetting <span class="keyword">struct</span> &#123;</span><br><span class="line">    Limits []<span class="keyword">struct</span> &#123;</span><br><span class="line">        Key          <span class="keyword">string</span></span><br><span class="line">        FillInterval time.Duration</span><br><span class="line">        Capacity     <span class="keyword">int64</span></span><br><span class="line">        Quantum      <span class="keyword">int64</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改中间件参数传入方式"><a href="#修改中间件参数传入方式" class="headerlink" title="修改中间件参数传入方式"></a>修改中间件参数传入方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newLimiter</span><span class="params">()</span> <span class="title">limiter</span>.<span class="title">LimiterIface</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rules []limiter.LimiterBucketRule</span><br><span class="line">    <span class="keyword">for</span> _, limit := <span class="keyword">range</span> global.LimiterSetting.Limits &#123;</span><br><span class="line">        rules = <span class="built_in">append</span>(rules, limiter.LimiterBucketRule&#123;</span><br><span class="line">            <span class="comment">// 令牌桶限制的url</span></span><br><span class="line">            Key: limit.Key,</span><br><span class="line">            <span class="comment">// 时间间隔</span></span><br><span class="line">            FillInterval: limit.FillInterval * time.Second,</span><br><span class="line">            <span class="comment">// 令牌总容量</span></span><br><span class="line">            Capacity: limit.Capacity,</span><br><span class="line">            <span class="comment">// 重新放入令牌桶数量</span></span><br><span class="line">            Quantum: limit.Quantum,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> methodLimiters = limiter.NewMethodLimiter().AddBuckets(rules...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> methodLimiters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Use(middleware.RateLimiter(newLimiter()))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;三方库&quot;&gt;&lt;a href=&quot;#三方库&quot; class=&quot;headerlink&quot; title=&quot;三方库&quot;&gt;&lt;/a&gt;三方库&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="gin" scheme="http://yoursite.com/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>[转]使用PySnooper调试代码</title>
    <link href="http://yoursite.com/2020/11/18/%E8%BD%AC-%E4%BD%BF%E7%94%A8PySnooper%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2020/11/18/%E8%BD%AC-%E4%BD%BF%E7%94%A8PySnooper%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</id>
    <published>2020-11-18T12:01:00.000Z</published>
    <updated>2020-11-18T12:12:35.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/wSmzU4cn0mTwlrtCSENeqg" target="_blank" rel="noopener">求你了，别再用 print 调试代码了</a></p><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pip install pysnooper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> conda install -c conda-forge pysnooper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yay -S python-pysnooper</span></span><br></pre></td></tr></table></figure><h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><p>下面这段代码，定义了一个 demo_func 的函数，在里面生成一个 profile 的字典变量，然后去更新它，最后返回。</p><p>代码本身没有什么实际意义，但是用来演示 PySnooper 已经足够。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pysnooper</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">"name"</span>] = <span class="string">"写代码的明哥"</span></span><br><span class="line">    profile[<span class="string">"age"</span>] = <span class="number">27</span></span><br><span class="line">    profile[<span class="string">"gender"</span>] = <span class="string">"male"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    profile = demo_func()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>现在我使用终端命令行的方式来运行它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iswbm ~]# python3 demo.py </span><br><span class="line">Source path:... demo.py</span><br><span class="line">17:52:49.624943 call         4 def demo_func():</span><br><span class="line">17:52:49.625124 line         5     profile = &#123;&#125;</span><br><span class="line">New var:....... profile = &#123;&#125;</span><br><span class="line">17:52:49.625156 line         6     profile["name"] = "写代码的明哥"</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥'&#125;</span><br><span class="line">17:52:49.625207 line         7     profile["age"] = 27</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥', 'age': 27&#125;</span><br><span class="line">17:52:49.625254 line         8     profile["gender"] = "male"</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥', 'age': 27, 'gender': 'male'&#125;</span><br><span class="line">17:52:49.625306 line        10     return profile</span><br><span class="line">17:52:49.625344 return      10     return profile</span><br><span class="line">Return value:.. &#123;'name': '写代码的明哥', 'age': 27, 'gender': 'male'&#125;</span><br><span class="line">Elapsed time: 00:00:00.000486</span><br></pre></td></tr></table></figure><p>可以看到 PySnooper 把函数运行的过程全部记录了下来，包括：</p><ul><li>代码的片段、行号等信息，以及每一行代码是何时调用的？</li><li>函数内局部变量的值如何变化的？何时新增了变量，何时修改了变量。</li><li>函数的返回值是什么？</li><li>运行函数消耗了多少时间？<br>而作为开发者，要得到这些如此详细的调试信息，你需要做的非常简单，只要给你想要调试的函数上带上一顶帽子（装饰器） – <code>@pysnooper.snoop()</code> 即可。</li></ul><h3 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h3><h4 id="重定向到日志文件"><a href="#重定向到日志文件" class="headerlink" title="重定向到日志文件"></a>重定向到日志文件</h4><p><code>@pysnooper.snoop()</code> 不加任何参数时，会默认将调试的信息输出到标准输出。</p><p>对于单次调试就能解决的 BUG ，这样没有什么问题，但是有一些 BUG 只有在特定的场景下才会出现，需要你把程序放在后面跑个一段时间才能复现。</p><p>这种情况下，你可以将调试信息重定向输出到某一日志文件中，方便追溯排查。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(output='/var/log/debug.log')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="跟踪非局部变量值"><a href="#跟踪非局部变量值" class="headerlink" title="跟踪非局部变量值"></a>跟踪非局部变量值</h4><p>PySnooper 是以函数为单位进行调试的，它默认只会跟踪函数体内的局部变量，若想跟踪全局变量，可以给 <code>pysnooper.snoop()</code> 加上 <code>watch</code> 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">out = &#123;<span class="string">"foo"</span>: <span class="string">"bar"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(watch=('out["foo"]'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>如此一来，PySnooper 会在 <code>out[&quot;foo&quot;]</code> 值有变化时，也将其打印出来<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200531.png" alt=""><br>watch 参数，接收一个可迭代对象（可以是list 或者 tuple），里面的元素为字符串表达式，什么意思呢？看下面例子就知道了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(watch=('out["foo"]', 'foo.bar', 'self.foo["bar"]'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>和 <code>watch</code> 相对的，<code>pysnooper.snoop()</code> 还可以接收一个函数 <code>watch_explode</code>，表示除了这几个参数外的其他所有全局变量都监控。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(watch_explode=('foo', 'bar'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="设置跟踪函数的深度"><a href="#设置跟踪函数的深度" class="headerlink" title="设置跟踪函数的深度"></a>设置跟踪函数的深度</h4><p>当你使用 PySnooper 调试某个函数时，若该函数中还调用了其他函数，PySnooper 是不会傻傻的跟踪进去的。</p><p>如果你想继续跟踪该函数中调用的其他函数，可以通过指定 <code>depth</code> 参数来设置跟踪深度（不指定的话默认为 1）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(depth=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><h4 id="设置调试日志的前缀"><a href="#设置调试日志的前缀" class="headerlink" title="设置调试日志的前缀"></a>设置调试日志的前缀</h4><p>当你在使用 PySnooper 跟踪多个函数时，调试的日志会显得杂乱无章，不方便查看。</p><p>在这种情况下，PySnooper 提供了一个参数，方便你为不同的函数设置不同的标志，方便你在查看日志时进行区分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(output="/var/log/debug.log", prefix="demo_func: ")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200734.png" alt=""></p><h4 id="设置最大的输出长度"><a href="#设置最大的输出长度" class="headerlink" title="设置最大的输出长度"></a>设置最大的输出长度</h4><p>默认情况下，PySnooper 输出的变量和异常信息，如果超过 100 个字符，被会截断为 100 个字符。</p><p>当然你也可以通过指定参数 进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(max_variable_length=200）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>您也可以使用max_variable_length=None它从不截断它们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(max_variable_length=None）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="支持多线程调试模式"><a href="#支持多线程调试模式" class="headerlink" title="支持多线程调试模式"></a>支持多线程调试模式</h4><p>PySnooper 同样支持多线程的调试，通过设置参数 <code>thread_info=True</code>，它就会在日志中打印出是在哪个线程对变量进行的修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(thread_info=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200903.png" alt=""></p><h4 id="自定义对象的格式输出"><a href="#自定义对象的格式输出" class="headerlink" title="自定义对象的格式输出"></a>自定义对象的格式输出</h4><p><code>pysnooper.snoop()</code> 函数有一个参数是 <code>custom_repr</code>，它接收一个元组对象。</p><p>在这个元组里，你可以指定特定类型的对象以特定格式进行输出。</p><p>这边我举个例子。</p><p>假如我要跟踪 <code>person</code> 这个 <code>Person</code> 类型的对象，由于它不是常规的 Python 基础类型，PySnooper 是无法正常输出它的信息的。</p><p>因此我在 <code>pysnooper.snoop()</code> 函数中设置了 <code>custom_repr</code> 参数，该参数的第一个元素为 <code>Person</code>，第二个元素为 <code>print_persion_obj</code> 函数。</p><p>PySnooper 在打印对象的调试信息时，会逐个判断它是否是 Person 类型的对象，若是，就将该对象传入 <code>print_persion_obj</code> 函数中，由该函数来决定如何显示这个对象的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pysnooper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_person_obj</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"&lt;Person <span class="subst">&#123;obj.name&#125;</span> <span class="subst">&#123;obj.age&#125;</span> <span class="subst">&#123;obj.gender&#125;</span>&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(Person, print_person_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    person = Person()</span><br><span class="line">    person.name = <span class="string">"写代码的明哥"</span></span><br><span class="line">    person.age = <span class="number">27</span></span><br><span class="line">    person.gender = <span class="string">"male"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    profile = demo_func()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行一下，观察一下效果。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118201026.png" alt=""><br>如果你要自定义格式输出的有很多个类型，那么 custom_repr 参数的值可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=((Person, print_person_obj), (numpy.ndarray, print_ndarray)))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>还有一点我提醒一下，元组的第一个元素可以是类型（如类名Person 或者其他基础类型 list等），也可以是一个判断对象类型的函数。</p><p>也就是说，下面三种写法是等价的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【第一种写法】</span></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(Person, print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【第二种写法】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_persion_obj</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> isinstance(obj, Person)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(is_persion_obj, print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【第三种写法】</span></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(lambda obj: isinstance(obj, Person), print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wSmzU4cn0mTwlrtCSENeqg&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>友情链接</title>
    <link href="http://yoursite.com/2020/11/15/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2020/11/15/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</id>
    <published>2020-11-15T08:32:00.000Z</published>
    <updated>2020-12-20T04:07:15.151Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="https://docs.python.org/zh-cn/3/index.html" target="_blank" rel="noopener">Python3官方文档</a></p><p><a href="https://docs.djangoproject.com/en/2.2/" target="_blank" rel="noopener">Django官方文档</a></p><p><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">Django中文版</a></p><p><a href="https://www.django-rest-framework.org/" target="_blank" rel="noopener">rest-framework官方文档</a></p><p><a href="http://drf.jiuyou.info/#/" target="_blank" rel="noopener">rest-framework文档中文版</a></p><p><a href="https://redis-py.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">python-redis官方文档</a></p><p><a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/#id8" target="_blank" rel="noopener">django-redis 中文文档</a></p><p><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ官方文档</a></p><h3 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h3><p><a href="https://www.the5fire.com" target="_blank" rel="noopener">the5fire: Django企业开发实战作者</a></p><h3 id="Golang学习"><a href="#Golang学习" class="headerlink" title="Golang学习"></a>Golang学习</h3><p><a href="https://lailin.xyz/post/go-design-pattern.html" target="_blank" rel="noopener">golang设计模式</a></p><p><a href="https://wskdsgcf.gitbook.io/mastering-go-zh-cn/" target="_blank" rel="noopener">mastering-go-zh-cn: golang入门</a></p><p><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md" target="_blank" rel="noopener">the-way-to-go_ZH_CN: golang入门</a></p><p><a href="https://github.com/geektutu/7days-golang" target="_blank" rel="noopener">从零开始系列…</a></p><p><a href="https://chai2010.cn/advanced-go-programming-book/" target="_blank" rel="noopener">Go语言高级编程(Advanced Go Programming)</a></p><p><a href="https://draveness.me/golang/" target="_blank" rel="noopener">Go 语言设计与实现</a></p><p><a href="https://geektutu.com" target="_blank" rel="noopener">极客兔兔</a></p><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p><a href="https://gitee.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener">Redis可视化客户端</a></p><p><a href="https://dbeaver.io/download/" target="_blank" rel="noopener">数据库客户端</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方网站&quot;&gt;&lt;a href=&quot;#官方网站&quot; class=&quot;headerlink&quot; title=&quot;官方网站&quot;&gt;&lt;/a&gt;官方网站&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/index.html&quot; target=&quot;_
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang - 接口文档框架swagger</title>
    <link href="http://yoursite.com/2020/11/15/golang-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6swagger/"/>
    <id>http://yoursite.com/2020/11/15/golang-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6swagger/</id>
    <published>2020-11-15T06:20:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/swaggo/swag/cmd/swag@v1.6.5</span><br><span class="line">go get -u github.com/swaggo/gin-swagger@v1.2.0</span><br><span class="line">go get -u github.com/swaggo/files</span><br><span class="line">go get -u github.com/alecthomas/template</span><br></pre></td></tr></table></figure><p>验证是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ swag -v</span><br><span class="line">swag version v1.6.5</span><br></pre></td></tr></table></figure><h3 id="写入注解"><a href="#写入注解" class="headerlink" title="写入注解"></a>写入注解</h3><p>在安装完Swagger关联库后, 就需要在项目里的API接口编写注解,以便后续在生成时能够正确的运行.</p><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Summary</td><td>摘要</td></tr><tr><td>@Produce</td><td>API可以长生的MIME类型的列表. 我们可以把MIME类型简单的理解为响应类型, 例如JSON, XML, HTML等.</td></tr><tr><td>@Param</td><td>参数格式, 从左到右分别为: 参数名, 入参类型, 数据类型, 是否必填和注释</td></tr><tr><td>@Success</td><td>响应成功, 从左到右分别为: 状态码, 参数类型, 数据类型和注释</td></tr><tr><td>@Failure</td><td>响应失败, 从左到右分别为状态码, 参数类型, 数据类型和注释</td></tr><tr><td>@Router</td><td>路由, 从左到右分别为: 路由地址和HTTP方法</td></tr></tbody></table><h4 id="API函数代码示例"><a href="#API函数代码示例" class="headerlink" title="API函数代码示例"></a>API函数代码示例</h4><p>用的是Gin框架.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTag</span><span class="params">()</span> <span class="title">Tag</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Tag&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Get</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 获取多个标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param name query string false "标签名称" maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state query int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param page query int false "页码"</span></span><br><span class="line"><span class="comment">// @Param page_size query int false "每页数量"</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">List</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 新增标签</span></span><br><span class="line"><span class="comment">// @Product json</span></span><br><span class="line"><span class="comment">// @Param name body string true "标签名称" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param created_by body string false "创建者" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags [post]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Create</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 更新标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param id path int true "标签ID"</span></span><br><span class="line"><span class="comment">// @Param name body string false "标签名称" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param modified_by body string true "修改者" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;array&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags/&#123;id&#125; [put]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Update</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 删除标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param id path int true "标签ID"</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; string "删除成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags/&#123;id&#125; [delete]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Delete</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h4><p>针对整个项目, 也能写入注解.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @title 博客系统</span></span><br><span class="line"><span class="comment">// @version 1.0</span></span><br><span class="line"><span class="comment">// @description Go+Gin框架的博客项目</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := routers.NewRouter()</span><br><span class="line"></span><br><span class="line">    s := &amp;http.Server&#123;</span><br><span class="line">        Addr:           <span class="string">":8080"</span>,</span><br><span class="line">        Handler:        router,</span><br><span class="line">        ReadTimeout:    <span class="number">10</span> * time.Second,</span><br><span class="line">        WriteTimeout:   <span class="number">10</span> * time.Second,</span><br><span class="line">        MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    s.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档</h3><p>在项目的主目录下, 使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swag init</span><br></pre></td></tr></table></figure><p>执行完后, 可以看到在docs文件夹中生成了docs.go, swagger.json和swagger.yarm三个文件.</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">"GoProgrammingJourney/blog_service/docs"</span></span><br><span class="line">  ginSwagger <span class="string">"github.com/swaggo/gin-swagger"</span></span><br><span class="line">  <span class="string">"github.com/swaggo/gin-swagger/swaggerFiles"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r := gin.New()</span><br><span class="line">r.GET(<span class="string">"/swagger/*any"</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br></pre></td></tr></table></figure><h3 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h3><p>访问网址可以看到生成后的项目文档了.<br/><br><a href="http://127.0.0.1:8080/swagger/index.html" target="_blank" rel="noopener">http://127.0.0.1:8080/swagger/index.html</a></p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201115143526.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]常见面试题之缓存雪崩、缓存穿透、缓存击穿</title>
    <link href="http://yoursite.com/2020/11/08/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/"/>
    <id>http://yoursite.com/2020/11/08/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</id>
    <published>2020-11-08T12:44:00.000Z</published>
    <updated>2020-11-15T08:38:42.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMDU0MTA3Nw==&mid=2247483988&idx=1&sn=3bd52650907867d65f1c4d5c3cff8f13&chksm=e8b0902edfc71938f7d7a29246d7278ac48e6c104ba27c684e12e840892252b0823de94b94c1&token=1558933779&lang=zh_CN#rd" target="_blank" rel="noopener">常见面试题之缓存雪崩、缓存穿透、缓存击穿</a></p><h3 id="缓存应用"><a href="#缓存应用" class="headerlink" title="缓存应用"></a>缓存应用</h3><p>缓存在我们平常的项目中多多少少都会使用到，缓存使用的使用场景还是比较多的，缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题。提高性能的数据快速访问。一提到缓存，这些是我们都能想到的一些缓存应用场景，但是我们是不太清楚缓存的本质思想是什么的。缓存的基本思想就是我们非常熟悉的空间换时间。缓存也并不是那么的高大上，虽然他可以为系统的性能进行提升。缓存的思想实际在操作系统或者其他地方都被大量用到。比如 「<strong>CPU Cache 缓存的是内存数据用于解决 CPU 处理速度和内存不匹配的问题，内存缓存的是硬盘数据用于解决硬盘访问速度过慢的问题。</strong>」 「<strong>再比如操作系统在 页表方案 基础之上引入了 快表 来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache）。</strong>」</p><p>上面简单介绍了缓存的基本思想，现在回到业务系统来说：<strong>我们为了避免用户在请求数据的时候获取速度过于缓慢，所以我们在数据库之上增加了缓存这一层来弥补。</strong>画个图能更加方便大家的理解：</p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108204545.png" alt=""><br>简单点说当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能会出现一些现象。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="什么是缓存雪崩"><a href="#什么是缓存雪崩" class="headerlink" title="什么是缓存雪崩"></a>什么是缓存雪崩</h4><p>这里我们通过一个例子进行分析。比如马老师的某宝，我们打开某宝的首页时，看到一些图片呀、推荐店铺信息呀等等，这些都属于热点数据，为什么他们会加载的那么快呢？因为使用到了缓存呗。这些热点数据都做了缓存，假设现在把这些热点数据的缓存失效时间为一样，现在我们马老师要做一个秒杀活动，假设在秒杀活动时每秒有8000个请求，本来有缓存我们是可以扛住每秒 6000 个请求，但是缓存当时所有的Key都失效了。此时 1 秒 8000 个请求全部落数据库，数据库必然扛不住，它会报一下警，真实情况可能DBA都没反应过来就直接挂了。此时，如果没用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。上面造成缓存雪崩的原因是因为失效时间造成，还有一种可能是因为缓存服务宕机。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205054.png" alt=""></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>这里分三个时间段进行进行分析</p><h5 id="事前"><a href="#事前" class="headerlink" title="事前"></a>事前</h5><p>如果缓存雪崩造成的原因是因为缓存服务宕机造成的，可以将redis采用集群部署，可以使用 主从+哨兵 ，Redis Cluster 来避免 Redis 全盘崩溃的情况。若缓存雪崩是因为大量缓存因为失效时间而造成的，我们在批量往redis存数据的时候，把每个Key的失效时间都加个随机值就好了，这样可以保证数据不会在同一时间大面积失效，或者设置热点数据永远不过期，有更新操作就更新缓存就可以了。</p><h5 id="事中"><a href="#事中" class="headerlink" title="事中"></a>事中</h5><p>如果我们之前没有考虑缓存雪崩的问题，那么在实际使用中真的发生缓存雪崩了，我们该怎么办呢？这时我们就要考虑使用其他方法避免出现这种情况了。我们可以使用ehcache 本地缓存 + Hystrix 限流&amp;降级 ,避免 MySQL 被打死的情况发生。<br>这里使用echache本地缓存的目的就是考虑在 Redis Cluster 完全不可用的时候，ehcache 本地缓存还能够支撑一阵。</p><p>使用 Hystrix 进行 限流 &amp; 降级 ，比如一秒来了5000个请求，我们可以设置假设只能有一秒 2000 个请求能通过这个组件，那么其他剩余的 3000 请求就会走限流逻辑，然后去调用我们自己开发的降级组件（降级）。比如设置的一些默认值呀之类的。以此来保护最后的 MySQL 不会被大量的请求给打死。</p><h5 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h5><p>如果缓存服务宕机了，这里我们可以开启「Redis」 持久化 「RDB」+「AOF」，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</p><p>综上所述，可画出如下图所示：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205219.png" alt=""></p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h4><p>在正常的情况下，用户查询数据都是存在的，但是在异常情况下，缓存与数据都没有数据，但是用户不断发起请求，这样每次请求都会打到数据库上面去，这时的用户很可能是攻击者，攻击会导致数据库压力过大，严重会击垮数据库。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205312.png" alt=""></p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="添加参数校验"><a href="#添加参数校验" class="headerlink" title="添加参数校验"></a>添加参数校验</h5><p>我刚入职的时候，我的老大就跟我说过，作为一名后端开发工程师，不要相信前端传来的东西，所以数据一定要在后端进行校验。我们可以在接口层添加校验，不合法的直接返回即可，没必要做后续的操作。</p><h5 id="缓存空值"><a href="#缓存空值" class="headerlink" title="缓存空值"></a>缓存空值</h5><p>上面我们也介绍了，之所以会发生穿透，就是因为缓存中没有存储这些空数据的key。从而导致每次查询都到数据库去了。</p><p>那么我们就可以为这些key 设置的值设置为null 丢到缓存里面去。后面再出现查询这个key 的请求的时候，直接返回null ,就不用在到 数据库中去走一圈了。但是别忘了设置过期时间。</p><h5 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h5><p>redis的一个高级用法就是使用布隆过滤器（Bloom Filter），BloomFilter 类似于一个hase set 用来判断某个元素（key）是否存在于某个集合中。这个也能很好的防止缓存穿透的发生，他的原理也很简单就是利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查了DB刷新KV再return。</p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205409.png" alt=""></p><p>上面介绍了三种方法，用哪种方法最好呢？下面我们来分析一下：</p><p>第一种方法，添加参数校验，这里是必须要添加，不过只能过滤掉一些特殊值，比如传的id为负数，如果传的正常id，这里参数校验就不起作用了。</p><p>第二种方法，如果有一些恶意攻击，攻击会带来大量的ke y是不存在的，这样采用第二种方法就不合适了。所以针对这种key 异常多，请求重复率比较低的数据，我们就没有必要进行缓存，使用第三种方案直接过滤掉。</p><p>如果对于空数据key有限的，重复率比较高的，我们则可以采用第二种方式进行缓存。</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="什么是缓存击穿"><a href="#什么是缓存击穿" class="headerlink" title="什么是缓存击穿"></a>什么是缓存击穿</h4><p>我们在平常高并发的系统中，大量的请求同时查询一个key时，假设此时，这个key正好失效了，就会导致大量的请求都打到数据库上面去，这种现象我们称为击穿。</p><p>这么看缓存击穿和缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，打崩了DB，而缓存击穿不同的是「缓存击穿」是指一个Key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个完好无损的桶上凿开了一个洞。</p><p>缓存击穿带来的问题就是会造成某一时刻数据库请求量过大，压力剧增。</p><h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="不过期"><a href="#不过期" class="headerlink" title="不过期"></a>不过期</h5><p>我们简单粗暴点，直接让热点数据永远不过期，定时任务定期去刷新数据就可以了。不过这样设置需要区分场景，比如某宝首页可以这么做。</p><h5 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h5><p>为了避免出现缓存击穿的情况，我们可以在第一个请求去查询数据库的时候对他加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，后面的线程进来发现已经有缓存了，就直接走缓存，从而保护数据库。但是也是由于它会阻塞其他的线程，此时系统吞吐量会下降。需要结合实际的业务去考虑是否要这么做。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzMDU0MTA3Nw==&amp;mid=2247483
      
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]golang - beego框架入门</title>
    <link href="http://yoursite.com/2020/11/08/golang-%E8%BD%AC-beego%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/11/08/golang-%E8%BD%AC-beego%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</id>
    <published>2020-11-08T09:13:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/u/4bede98c5ae5" target="_blank" rel="noopener">转载至Clown1995</a></p><p><a href="https://www.jianshu.com/p/462e23ae402c" target="_blank" rel="noopener">Beego脱坑（一）Beego简介和安装</a></p><p><a href="https://www.jianshu.com/p/5a586b06c55f" target="_blank" rel="noopener">Beego脱坑（二）新建Beego项目</a></p><p><a href="https://www.jianshu.com/p/d0d1462113d4" target="_blank" rel="noopener">Beego脱坑（三）Router</a></p><p><a href="https://www.jianshu.com/p/a0ece5f05ab9" target="_blank" rel="noopener">Beego脱坑（四）Controller</a></p><p><a href="https://www.jianshu.com/p/fa3dbf8aa774" target="_blank" rel="noopener">Beego脱坑（五）使用模板获取数据</a></p><p><a href="https://www.jianshu.com/p/69c8b3f8d58c" target="_blank" rel="noopener">Beego脱坑（六）多种格式数据输出</a></p><p><a href="https://www.jianshu.com/p/43459409ec00" target="_blank" rel="noopener">Beego脱坑（七）获取表单数据并解析到结构体</a></p><p><a href="https://www.jianshu.com/p/37abab5808bb" target="_blank" rel="noopener">Beego脱坑（八）表单数据验证</a></p><p><a href="https://www.jianshu.com/p/9aee6d938c49" target="_blank" rel="noopener">Beego脱坑（九）Cookie和Session</a></p><p><a href="https://www.jianshu.com/p/a519cf3ff3b7" target="_blank" rel="noopener">Beego脱坑（十）数据绑定</a></p><p><a href="https://www.jianshu.com/p/a63953b32e60" target="_blank" rel="noopener">Beego脱坑（十一）文件上传、下载</a></p><p><a href="https://www.jianshu.com/p/a65cad84a4b9" target="_blank" rel="noopener">Beego脱坑（十二）ORM介绍并创建第一个表</a></p><p><a href="https://www.jianshu.com/p/d6bf1e3d6187" target="_blank" rel="noopener">Beego脱坑（十三）ORM基本增删改查</a></p><p><a href="https://www.jianshu.com/p/6a1da3390615" target="_blank" rel="noopener">Beego脱坑（十四）ORM高级查询</a></p><p><a href="https://www.jianshu.com/p/a0ffd74e7481" target="_blank" rel="noopener">Beego脱坑（十五）ORM关系查询</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/u/4bede98c5ae5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转载至Clown1995&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="beego" scheme="http://yoursite.com/tags/beego/"/>
    
  </entry>
  
  <entry>
    <title>[转]golang - 解密Go协程的栈内存管理</title>
    <link href="http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E8%A7%A3%E5%AF%86Go%E5%8D%8F%E7%A8%8B%E7%9A%84%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E8%A7%A3%E5%AF%86Go%E5%8D%8F%E7%A8%8B%E7%9A%84%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2020-10-12T10:12:00.000Z</published>
    <updated>2020-11-15T08:38:42.911Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&mid=2247485886&idx=1&sn=f29fe2ce95a485e2c2ef1c4cd33b5085&chksm=fa80d829cdf7513fdf45b16be023809d9725b150803b6482643c3dd84aa3c0090c2cb9efd3aa&token=940952510&lang=zh_CN#rd" target="_blank" rel="noopener">解密Go协程的栈内存管理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;mid=2247485886&amp;idx=1&amp;sn=f29fe2ce95a485e2c2ef1c4cd33b5085&amp;chksm=fa80d829cdf7
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]golang - 图解Go内存管理器的内存分配策略</title>
    <link href="http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E8%A7%A3Go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E8%A7%A3Go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</id>
    <published>2020-10-12T10:11:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&mid=2247485736&idx=1&sn=921a9dfe3d638074b68a4fd072ea3cb9&chksm=fa80d8bfcdf751a948ea49ee620ca9d88ff0a62b4ad4e3a53321fee6813b8f90098fd72f7b11&token=940952510&lang=zh_CN#rd" target="_blank" rel="noopener">图解Go内存管理器的内存分配策略</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;mid=2247485736&amp;idx=1&amp;sn=921a9dfe3d638074b68a4fd072ea3cb9&amp;chksm=fa80d8bfcdf7
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]golang - 图文结合，白话Go的垃圾回收原理</title>
    <link href="http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E6%96%87%E7%BB%93%E5%90%88%EF%BC%8C%E7%99%BD%E8%AF%9DGo%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E6%96%87%E7%BB%93%E5%90%88%EF%BC%8C%E7%99%BD%E8%AF%9DGo%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/</id>
    <published>2020-10-12T10:07:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<p>转载: <a href="https://zhuanlan.zhihu.com/p/264789260" target="_blank" rel="noopener">图文结合，白话Go的垃圾回收原理</a></p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/v2-9515a7f1156f98371a25361572b25f0d_720w.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/264789260&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;图文结合，白话Go的垃圾回收原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qxinhai
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/09/21/hello-world/"/>
    <id>http://yoursite.com/2020/09/21/hello-world/</id>
    <published>2020-09-21T11:56:18.000Z</published>
    <updated>2020-11-15T08:38:42.911Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="更换电脑后，如何更新博客"><a href="#更换电脑后，如何更新博客" class="headerlink" title="更换电脑后，如何更新博客"></a>更换电脑后，如何更新博客</h3><p><a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></p><h4 id="关于日常的改动流程"><a href="#关于日常的改动流程" class="headerlink" title="关于日常的改动流程"></a>关于日常的改动流程</h4><ol><li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）</li><li>然后才执行hexo g -d发布网站到master分支上</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang - 使用函数自定义排序</title>
    <link href="http://yoursite.com/2020/06/06/golang-%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/06/06/golang-%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</id>
    <published>2020-06-06T08:48:00.000Z</published>
    <updated>2020-11-15T08:38:42.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-使用函数自定义排序"><a href="#golang-使用函数自定义排序" class="headerlink" title="golang - 使用函数自定义排序"></a>golang - 使用函数自定义排序</h1><p>有时候我们想使用和集合的自然排序不同的方法对集合进行排序。 例如，我们想按照字母的长度而不是首字母顺序对字符串排序。 </p><p>在golang自带的sort模块中, 可以先阅读下函数的代码:</p><p><code>sort.Sort</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sort</span><span class="params">(data Interface)</span></span> &#123;</span><br><span class="line">    n := data.Len()</span><br><span class="line">    quickSort(data, <span class="number">0</span>, n, maxDepth(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sort.quickSort</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(data Interface, a, b, maxDepth <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> b-a &gt; <span class="number">12</span> &#123; <span class="comment">// Use ShellSort for slices &lt;= 12 elements</span></span><br><span class="line">        <span class="keyword">if</span> maxDepth == <span class="number">0</span> &#123;</span><br><span class="line">            heapSort(data, a, b)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        maxDepth--</span><br><span class="line">        mlo, mhi := doPivot(data, a, b)</span><br><span class="line">        <span class="comment">// Avoiding recursion on the larger subproblem guarantees</span></span><br><span class="line">        <span class="comment">// a stack depth of at most lg(b-a).</span></span><br><span class="line">        <span class="keyword">if</span> mlo-a &lt; b-mhi &#123;</span><br><span class="line">            quickSort(data, a, mlo, maxDepth)</span><br><span class="line">            a = mhi <span class="comment">// i.e., quickSort(data, mhi, b)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            quickSort(data, mhi, b, maxDepth)</span><br><span class="line">            b = mlo <span class="comment">// i.e., quickSort(data, a, mlo)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> b-a &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="comment">// Do ShellSort pass with gap 6</span></span><br><span class="line">        <span class="comment">// It could be written in this simplified form cause b-a &lt;= 12</span></span><br><span class="line">        <span class="keyword">for</span> i := a + <span class="number">6</span>; i &lt; b; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> data.Less(i, i<span class="number">-6</span>) &#123;</span><br><span class="line">                data.Swap(i, i<span class="number">-6</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        insertionSort(data, a, b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>具体实现方式可以暂时忽略, 从中找到几个重点:</p><ol><li>参数是 Interface 类型</li><li>需要重写Interface下的三个函数, <code>Len()</code>, <code>Swap()</code>, <code>Less()</code></li></ol><p><code>sort.Interface</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">    Len() <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// Less reports whether the element with</span></span><br><span class="line">    <span class="comment">// index i should sort before the element with index j.</span></span><br><span class="line">    Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line">    <span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">    Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">方便实现排序功能, 自定义类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> StringSortByLength []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从sort.Sort的代码看, 需要实现这两个函数才能实现自定义的排序功能</span></span><br><span class="line"><span class="comment">Less函数是控制实际的自定义排序逻辑</span></span><br><span class="line"><span class="comment">想实现按长度排序功能, 那么就返回字符串的长度, 并在Less中使用len比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Swap</span><span class="params">(i <span class="keyword">int</span>, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Less</span><span class="params">(i <span class="keyword">int</span>, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s[i]) &lt; <span class="built_in">len</span>(s[j])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    types := StringSortByLength&#123;<span class="string">"string"</span>, <span class="string">"int"</span>, <span class="string">"float"</span>, <span class="string">"float64"</span>, <span class="string">"int32"</span>&#125;</span><br><span class="line">    sort.Sort(types)</span><br><span class="line">    fmt.Println(types)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;golang-使用函数自定义排序&quot;&gt;&lt;a href=&quot;#golang-使用函数自定义排序&quot; class=&quot;headerlink&quot; title=&quot;golang - 使用函数自定义排序&quot;&gt;&lt;/a&gt;golang - 使用函数自定义排序&lt;/h1&gt;&lt;p&gt;有时候我们想使用和集合的自然排序不同的方法对集合进行排序。 例如，我们想按照字母的长度而不是首字母顺序对字符串排序。 &lt;/p&gt;
&lt;p&gt;在golang自带的sort模块中, 可以先阅读下函数的代码:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sort.Sort&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data Interface)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n := data.Len()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    quickSort(data, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, n, maxDepth(n))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;sort.quickSort&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data Interface, a, b, maxDepth &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; b-a &amp;gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// Use ShellSort for slices &amp;lt;= 12 elements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; maxDepth == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            heapSort(data, a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxDepth--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mlo, mhi := doPivot(data, a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Avoiding recursion on the larger subproblem guarantees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// a stack depth of at most lg(b-a).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mlo-a &amp;lt; b-mhi &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            quickSort(data, a, mlo, maxDepth)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a = mhi &lt;span class=&quot;comment&quot;&gt;// i.e., quickSort(data, mhi, b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            quickSort(data, mhi, b, maxDepth)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b = mlo &lt;span class=&quot;comment&quot;&gt;// i.e., quickSort(data, a, mlo)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b-a &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Do ShellSort pass with gap 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// It could be written in this simplified form cause b-a &amp;lt;= 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := a + &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; i &amp;lt; b; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data.Less(i, i&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                data.Swap(i, i&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        insertionSort(data, a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]golang - web - 中间件介绍</title>
    <link href="http://yoursite.com/2020/06/06/%E8%BD%AC-golang-web-%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2020/06/06/%E8%BD%AC-golang-web-%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-06-06T04:13:00.000Z</published>
    <updated>2020-11-15T08:38:42.919Z</updated>
    
    <content type="html"><![CDATA[<p>本章将对现在流行的Web框架中的中间件(middleware)技术原理进行分析，并介绍如何使用中间件技术将业务和非业务代码功能进行解耦。</p><h3 id="代码泥潭"><a href="#代码泥潭" class="headerlink" title="代码泥潭"></a>代码泥潭</h3><p>先来看一段代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware/hello.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/"</span>, hello)</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个典型的Web服务，挂载了一个简单的路由。我们的线上服务一般也是从这样简单的服务开始逐渐拓展开去的。</p><p>现在突然来了一个新的需求，我们想要统计之前写的hello服务的处理耗时，需求很简单，我们对上面的程序进行少量修改：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware/hello_with_time_elapse.go</span></span><br><span class="line"><span class="keyword">var</span> logger = log.New(os.Stdout, <span class="string">""</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    timeStart := time.Now()</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">    timeElapsed := time.Since(timeStart)</span><br><span class="line">    logger.Println(timeElapsed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样便可以在每次接收到http请求时，打印出当前请求所消耗的时间。</p><a id="more"></a><p>完成了这个需求之后，我们继续进行业务开发，提供的API逐渐增加，现在我们的路由看起来是这个样子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware/hello_with_more_routes.go</span></span><br><span class="line"><span class="comment">// 省略了一些相同的代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showInfoHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showEmailHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showFriendsHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    timeStart := time.Now()</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"your friends is tom and alex"</span>))</span><br><span class="line">    timeElapsed := time.Since(timeStart)</span><br><span class="line">    logger.Println(timeElapsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/"</span>, helloHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/info/show"</span>, showInfoHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/email/show"</span>, showEmailHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/friends/show"</span>, showFriendsHandler)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个handler里都有之前提到的记录运行时间的代码，每次增加新的路由我们也同样需要把这些看起来长得差不多的代码拷贝到我们需要的地方去。因为代码不太多，所以实施起来也没有遇到什么大问题。</p><p>渐渐的我们的系统增加到了30个路由和<code>handler</code>函数，每次增加新的handler，我们的第一件工作就是把之前写的所有和业务逻辑无关的周边代码先拷贝过来。</p><p>接下来系统安稳地运行了一段时间，突然有一天，老板找到你，我们最近找人新开发了监控系统，为了系统运行可以更加可控，需要把每个接口运行的耗时数据主动上报到我们的监控系统里。给监控系统起个名字吧，叫metrics。现在你需要修改代码并把耗时通过HTTP Post的方式发给metrics系统了。我们来修改一下<code>helloHandler()</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    timeStart := time.Now()</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">    timeElapsed := time.Since(timeStart)</span><br><span class="line">    logger.Println(timeElapsed)</span><br><span class="line">    <span class="comment">// 新增耗时上报</span></span><br><span class="line">    metrics.Upload(<span class="string">"timeHandler"</span>, timeElapsed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改到这里，本能地发现我们的开发工作开始陷入了泥潭。无论未来对我们的这个Web系统有任何其它的非功能或统计需求，我们的修改必然牵一发而动全身。只要增加一个非常简单的非业务统计，我们就需要去几十个handler里增加这些业务无关的代码。虽然一开始我们似乎并没有做错，但是显然随着业务的发展，我们的行事方式让我们陷入了代码的泥潭。</p><h3 id="使用中间件剥离非业务逻辑"><a href="#使用中间件剥离非业务逻辑" class="headerlink" title="使用中间件剥离非业务逻辑"></a>使用中间件剥离非业务逻辑</h3><p>我们来分析一下，一开始在哪里做错了呢？我们只是一步一步地满足需求，把我们需要的逻辑按照流程写下去呀？</p><p>我们犯的最大的错误，是把业务代码和非业务代码揉在了一起。对于大多数的场景来讲，非业务的需求都是在http请求处理前做一些事情，并且在响应完成之后做一些事情。我们有没有办法使用一些重构思路把这些公共的非业务功能代码剥离出去呢？回到刚开头的例子，我们需要给我们的<code>helloHandler()</code>增加超时时间统计，我们可以使用一种叫<code>function adapter</code>的方法来对<code>helloHandler()</code>进行包装：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeMiddleware</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        timeStart := time.Now()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next handler</span></span><br><span class="line">        next.ServeHTTP(wr, r)</span><br><span class="line"></span><br><span class="line">        timeElapsed := time.Since(timeStart)</span><br><span class="line">        logger.Println(timeElapsed)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.Handle(<span class="string">"/"</span>, timeMiddleware(http.HandlerFunc(hello)))</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就非常轻松地实现了业务与非业务之间的剥离，魔法就在于这个<code>timeMiddleware</code>。可以从代码中看到，我们的<code>timeMiddleware()</code>也是一个函数，其参数为<code>http.Handler</code>，<code>http.Handler</code>的定义在<code>net/http</code>包中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何方法实现了<code>ServeHTTP</code>，即是一个合法的<code>http.Handler</code>，读到这里你可能会有一些混乱，我们先来梳理一下http库的<code>Handler</code>，<code>HandlerFunc</code>和<code>ServeHTTP</code>的关系：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f HandlerFunc)</span> <span class="title">ServeHTTP</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">    f(w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要你的handler函数签名是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ResponseWriter, *Request)</span></span></span><br></pre></td></tr></table></figure><p>那么这个<code>handler</code>和<code>http.HandlerFunc()</code>就有了一致的函数签名，可以将该<code>handler()</code>函数进行类型转换，转为<code>http.HandlerFunc</code>。而<code>http.HandlerFunc</code>实现了<code>http.Handler</code>这个接口。在<code>http</code>库需要调用你的handler函数来处理http请求时，会调用<code>HandlerFunc()</code>的<code>ServeHTTP()</code>函数，可见一个请求的基本调用链是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h = getHandler() =&gt; h.ServeHTTP(w, r) =&gt; h(w, r)</span><br></pre></td></tr></table></figure><p>上面提到的把自定义<code>handler</code>转换为<code>http.HandlerFunc()</code>这个过程是必须的，因为我们的<code>handler</code>没有直接实现<code>ServeHTTP</code>这个接口。上面的代码中我们看到的HandleFunc(注意HandlerFunc和HandleFunc的区别)里也可以看到这个强制转换过程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">    DefaultServeMux.HandleFunc(pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">    mux.Handle(pattern, HandlerFunc(handler))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>知道handler是怎么一回事，我们的中间件通过包装handler，再返回一个新的handler就好理解了。</p><p>总结一下，我们的中间件要做的事情就是通过一个或多个函数对handler进行包装，返回一个包括了各个中间件逻辑的函数链。我们把上面的包装再做得复杂一些：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customizedHandler = logger(timeout(ratelimit(helloHandler)))</span><br></pre></td></tr></table></figure><p>这个函数链在执行过程中的上下文可以用图来表示。</p><p><img src="https://i.loli.net/2020/06/06/9i3fgTvmAOx5RBz.png" alt="img"></p><p>再直白一些，这个流程在进行请求处理的时候就是不断地进行函数压栈再出栈，有一些类似于递归的执行流：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[exec of logger logic]           函数栈: []</span><br><span class="line"></span><br><span class="line">[exec of timeout logic]          函数栈: [logger]</span><br><span class="line"></span><br><span class="line">[exec of ratelimit logic]        函数栈: [timeout&#x2F;logger]</span><br><span class="line"></span><br><span class="line">[exec of helloHandler logic]     函数栈: [ratelimit&#x2F;timeout&#x2F;logger]</span><br><span class="line"></span><br><span class="line">[exec of ratelimit logic part2]  函数栈: [timeout&#x2F;logger]</span><br><span class="line"></span><br><span class="line">[exec of timeout logic part2]    函数栈: [logger]</span><br><span class="line"></span><br><span class="line">[exec of logger logic part2]     函数栈: []</span><br></pre></td></tr></table></figure><p>功能实现了，但在上面的使用过程中我们也看到了，这种函数套函数的用法不是很美观，同时也不具备什么可读性。</p><h3 id="更优雅的中间件写法"><a href="#更优雅的中间件写法" class="headerlink" title="更优雅的中间件写法"></a>更优雅的中间件写法</h3><p>上一节中解决了业务功能代码和非业务功能代码的解耦，但也提到了，看起来并不美观，如果需要修改这些函数的顺序，或者增删中间件还是有点费劲，本节我们来进行一些“写法”上的优化。</p><p>看一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r = NewRouter()</span><br><span class="line">r.Use(logger)</span><br><span class="line">r.Use(timeout)</span><br><span class="line">r.Use(ratelimit)</span><br><span class="line">r.Add(<span class="string">"/"</span>, helloHandler)</span><br></pre></td></tr></table></figure><p>通过多步设置，我们拥有了和上一节差不多的执行函数链。胜在直观易懂，如果我们要增加或者删除中间件，只要简单地增加删除对应的<code>Use()</code>调用就可以了。非常方便。</p><p>从框架的角度来讲，怎么实现这样的功能呢？也不复杂：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> middleware <span class="function"><span class="keyword">func</span><span class="params">(http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Router <span class="keyword">struct</span> &#123;</span><br><span class="line">    middlewareChain [] middleware</span><br><span class="line">    mux <span class="keyword">map</span>[<span class="keyword">string</span>] http.Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRouter</span><span class="params">()</span> *<span class="title">Router</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Router&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">Use</span><span class="params">(m middleware)</span></span> &#123;</span><br><span class="line">    r.middlewareChain = <span class="built_in">append</span>(r.middlewareChain, m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">Add</span><span class="params">(route <span class="keyword">string</span>, h http.Handler)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mergedHandler = h</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(r.middlewareChain) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        mergedHandler = r.middlewareChain[i](mergedHandler)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r.mux[route] = mergedHandler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意代码中的<code>middleware</code>数组遍历顺序，和用户希望的调用顺序应该是”相反”的。应该不难理解。</p><h3 id="哪些事情适合在中间件中做"><a href="#哪些事情适合在中间件中做" class="headerlink" title="哪些事情适合在中间件中做"></a>哪些事情适合在中间件中做</h3><p>以较流行的开源Go语言框架chi为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">compress.go</span><br><span class="line">  &#x3D;&gt; 对http的响应体进行压缩处理</span><br><span class="line">heartbeat.go</span><br><span class="line">  &#x3D;&gt; 设置一个特殊的路由，例如&#x2F;ping，&#x2F;healthcheck，用来给负载均衡一类的前置服务进行探活</span><br><span class="line">logger.go</span><br><span class="line">  &#x3D;&gt; 打印请求处理处理日志，例如请求处理时间，请求路由</span><br><span class="line">profiler.go</span><br><span class="line">  &#x3D;&gt; 挂载pprof需要的路由，如&#96;&#x2F;pprof&#96;、&#96;&#x2F;pprof&#x2F;trace&#96;到系统中</span><br><span class="line">realip.go</span><br><span class="line">  &#x3D;&gt; 从请求头中读取X-Forwarded-For和X-Real-IP，将http.Request中的RemoteAddr修改为得到的RealIP</span><br><span class="line">requestid.go</span><br><span class="line">  &#x3D;&gt; 为本次请求生成单独的requestid，可一路透传，用来生成分布式调用链路，也可用于在日志中串连单次请求的所有逻辑</span><br><span class="line">timeout.go</span><br><span class="line">  &#x3D;&gt; 用context.Timeout设置超时时间，并将其通过http.Request一路透传下去</span><br><span class="line">throttler.go</span><br><span class="line">  &#x3D;&gt; 通过定长大小的channel存储token，并通过这些token对接口进行限流</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch5-web/ch5-03-middleware.html" target="_blank" rel="noopener">中间件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章将对现在流行的Web框架中的中间件(middleware)技术原理进行分析，并介绍如何使用中间件技术将业务和非业务代码功能进行解耦。&lt;/p&gt;
&lt;h3 id=&quot;代码泥潭&quot;&gt;&lt;a href=&quot;#代码泥潭&quot; class=&quot;headerlink&quot; title=&quot;代码泥潭&quot;&gt;&lt;/a&gt;代码泥潭&lt;/h3&gt;&lt;p&gt;先来看一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// middleware/hello.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(wr http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wr.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    http.HandleFunc(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, hello)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    err := http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8080&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是一个典型的Web服务，挂载了一个简单的路由。我们的线上服务一般也是从这样简单的服务开始逐渐拓展开去的。&lt;/p&gt;
&lt;p&gt;现在突然来了一个新的需求，我们想要统计之前写的hello服务的处理耗时，需求很简单，我们对上面的程序进行少量修改：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// middleware/hello_with_time_elapse.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; logger = log.New(os.Stdout, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(wr http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeStart := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wr.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeElapsed := time.Since(timeStart)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger.Println(timeElapsed)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样便可以在每次接收到http请求时，打印出当前请求所消耗的时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]golang - 发布订阅模型</title>
    <link href="http://yoursite.com/2020/06/04/[%E8%BD%AC]golang-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/06/04/[%E8%BD%AC]golang-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-06-04T11:56:00.000Z</published>
    <updated>2020-11-15T08:38:42.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发布订阅者"><a href="#发布订阅者" class="headerlink" title="发布订阅者"></a>发布订阅者</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pubsub</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">    <span class="comment">// 订阅者是一个管道</span></span><br><span class="line">    subscriber <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 主题是一个过滤器</span></span><br><span class="line">    topicFunc <span class="function"><span class="keyword">func</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布者对象</span></span><br><span class="line"><span class="keyword">type</span> Publisher <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 读写锁</span></span><br><span class="line">    m sync.RWMutex</span><br><span class="line">    <span class="comment">// 订阅队列的缓存大小</span></span><br><span class="line">    buffer <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// 发布的过期时间</span></span><br><span class="line">    timeout time.Duration</span><br><span class="line">    <span class="comment">// 订阅者信息</span></span><br><span class="line">    subscribers <span class="keyword">map</span>[subscriber]topicFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建一个发布者, 设置超时时间和缓存队列长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPublisher</span><span class="params">(publishTimeout time.Duration, buffer <span class="keyword">int</span>)</span> *<span class="title">Publisher</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Publisher&#123;</span><br><span class="line">        buffer:      buffer,</span><br><span class="line">        timeout:     publishTimeout,</span><br><span class="line">        subscribers: <span class="built_in">make</span>(<span class="keyword">map</span>[subscriber]topicFunc),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个订阅者, 订阅过滤器筛选后的主题</span></span><br><span class="line"><span class="comment">// 添加订阅主题参数, 返回订阅者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">SubscribeTopic</span><span class="params">(topic topicFunc)</span> <span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, p.buffer)</span><br><span class="line">    p.m.Lock()</span><br><span class="line">    p.subscribers[ch] = topic</span><br><span class="line">    p.m.Unlock()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅所有的主题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">Subscribe</span><span class="params">()</span> <span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> p.SubscribeTopic(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//退订</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">Evict</span><span class="params">(sub <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    p.m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> p.m.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">delete</span>(p.subscribers, sub)</span><br><span class="line">    <span class="built_in">close</span>(sub)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送一个主题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">Publish</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    p.m.RLock()</span><br><span class="line">    <span class="keyword">defer</span> p.m.RUnlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="comment">// 遍历所有的订阅者, 一个个的发布</span></span><br><span class="line">    <span class="keyword">for</span> sub, topic := <span class="keyword">range</span> p.subscribers &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> p.sendTopic(sub, topic, v, &amp;wg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上的发送函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">sub: 订阅者, chan</span></span><br><span class="line"><span class="comment">topic: 订阅主题, 即传进来的函数</span></span><br><span class="line"><span class="comment">v: 函数参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">sendTopic</span><span class="params">(sub subscriber, topic topicFunc, v <span class="keyword">interface</span>&#123;&#125;, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    <span class="comment">// 该代码中, topic会返回true或者false, 如果返回false就表示没有订阅</span></span><br><span class="line">    <span class="comment">// 如果topic是nil, 就表示全订阅</span></span><br><span class="line">    <span class="keyword">if</span> topic != <span class="literal">nil</span> &amp;&amp; !topic(v) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> sub &lt;- v:<span class="comment">// 将参数传递给了订阅者, 订阅者能打印, 则表示收到发布的内容</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(p.timeout):<span class="comment">// 超时时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭发布者对象, 同时关闭所有的订阅者管道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p.m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> p.m.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sub := <span class="keyword">range</span> p.subscribers &#123;</span><br><span class="line">        <span class="built_in">delete</span>(p.subscribers, sub)</span><br><span class="line">        <span class="built_in">close</span>(sub)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"GoStudy/chai2010.gitbooks.io/p1/pubsub"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := pubsub.NewPublisher(<span class="number">100</span>*time.Microsecond, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">defer</span> p.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅所有主题</span></span><br><span class="line">    all := p.Subscribe()</span><br><span class="line">    <span class="comment">// 订阅包含了golang字符串的主题</span></span><br><span class="line">    <span class="comment">// 返回了一个chan</span></span><br><span class="line">    golang := p.SubscribeTopic(<span class="function"><span class="keyword">func</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> s, ok := v.(<span class="keyword">string</span>); ok &#123;</span><br><span class="line">            <span class="keyword">return</span> strings.Contains(s, <span class="string">"golang"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    p.Publish(<span class="string">"hello World!"</span>)</span><br><span class="line">    p.Publish(<span class="string">"hello golang!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> msg := <span class="keyword">range</span> all &#123;</span><br><span class="line">            fmt.Println(<span class="string">"all: "</span>, msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> msg := <span class="keyword">range</span> golang &#123;</span><br><span class="line">            fmt.Println(<span class="string">"golang: "</span>, msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch1-basic/ch1-06-goroutine.html" target="_blank" rel="noopener">常见的并发模式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;发布订阅者&quot;&gt;&lt;a href=&quot;#发布订阅者&quot; class=&quot;headerlink&quot; title=&quot;发布订阅者&quot;&gt;&lt;/a&gt;发布订阅者&lt;/h3&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; pubsub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;sync&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 订阅者是一个管道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscriber &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 主题是一个过滤器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    topicFunc &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(v &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 发布者对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Publisher &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 读写锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m sync.RWMutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 订阅队列的缓存大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buffer &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 发布的过期时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeout time.Duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 订阅者信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscribers &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[subscriber]topicFunc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 构建一个发布者, 设置超时时间和缓存队列长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewPublisher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(publishTimeout time.Duration, buffer &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;Publisher&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;Publisher&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buffer:      buffer,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout:     publishTimeout,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscribers: &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[subscriber]topicFunc),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 添加一个订阅者, 订阅过滤器筛选后的主题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 添加订阅主题参数, 返回订阅者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *Publisher)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubscribeTopic&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(topic topicFunc)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, p.buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.m.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.subscribers[ch] = topic&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.m.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 订阅所有的主题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *Publisher)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interface&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; p.SubscribeTopic(&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//退订&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *Publisher)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Evict&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sub &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.m.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; p.m.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(p.subscribers, sub)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(sub)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 发送一个主题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *Publisher)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Publish&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(v &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.m.RLock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; p.m.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历所有的订阅者, 一个个的发布&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; sub, topic := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; p.subscribers &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wg.Add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; p.sendTopic(sub, topic, v, &amp;amp;wg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 实际上的发送函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;sub: 订阅者, chan&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;topic: 订阅主题, 即传进来的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;v: 函数参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *Publisher)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendTopic&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sub subscriber, topic topicFunc, v &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;, wg *sync.WaitGroup)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 该代码中, topic会返回true或者false, 如果返回false就表示没有订阅&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果topic是nil, 就表示全订阅&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; topic != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; !topic(v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; sub &amp;lt;- v:	&lt;span class=&quot;comment&quot;&gt;// 将参数传递给了订阅者, 订阅者能打印, 则表示收到发布的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(p.timeout):	&lt;span class=&quot;comment&quot;&gt;// 超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 关闭发布者对象, 同时关闭所有的订阅者管道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(p *Publisher)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p.m.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; p.m.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; sub := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; p.subscribers &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;delete&lt;/span&gt;(p.subscribers, sub)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(sub)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>django-rest-framework --- 权限</title>
    <link href="http://yoursite.com/2020/05/23/django-rest-framework-%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2020/05/23/django-rest-framework-%E6%9D%83%E9%99%90/</id>
    <published>2020-05-23T11:34:00.000Z</published>
    <updated>2020-11-15T08:38:42.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    USER_COMMON = <span class="number">0</span></span><br><span class="line">    USER_VIP = <span class="number">100</span></span><br><span class="line">    USER_SVIP = <span class="number">200</span></span><br><span class="line">    <span class="comment"># 用户类型</span></span><br><span class="line">    USER_TYPE = (</span><br><span class="line">        (USER_COMMON, <span class="string">'普通用户'</span>),</span><br><span class="line">        (USER_VIP, <span class="string">'VIP'</span>),</span><br><span class="line">        (USER_SVIP, <span class="string">'SVIP'</span>)</span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    user_type = models.IntegerField(choices=USER_TYPE, default=USER_COMMON)</span><br><span class="line">    <span class="comment"># 建立1对1关系模型</span></span><br><span class="line">    user = models.OneToOneField(User, on_delete=models.CASCADE,</span><br><span class="line">related_name=<span class="string">'userinfo'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> UserInfo</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUserPermission</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    VIP用户才可访问</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> request.user.is_authenticated <span class="keyword">and</span></span><br><span class="line">request.user.userinfo.user_type == UserInfo.USER_VIP</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SvipUserPermission</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    SVIP用户才可访问</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> request.user.is_authenticated <span class="keyword">and</span></span><br><span class="line">request.user.userinfo.user_type == UserInfo.USER_VIP</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"><span class="keyword">from</span> demo.permissions <span class="keyword">import</span> VipUserPermission, SvipUserPermission</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 任何人都可访问此视图</span></span><br><span class="line">    permission_classes = []</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'demo/index.html'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        username = self.request.POST.get(<span class="string">'username'</span>, <span class="string">''</span>)</span><br><span class="line">        password = self.request.POST.get(<span class="string">'password'</span>, <span class="string">''</span>)</span><br><span class="line"> </span><br><span class="line">        user = User.objects.filter(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user.password == password:</span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'result'</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'result'</span>: <span class="literal">False</span>&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUserApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 登录用户才可访问此视图</span></span><br><span class="line">    permission_classes = [permissions.IsAuthenticated]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'result'</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUserApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 交集关系,必须同时成立验证才通过</span></span><br><span class="line">    <span class="comment"># vip用户才可访问</span></span><br><span class="line">    permission_classes = [VipUserPermission, SvipUserPermission]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'result'</span>: <span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">"DEFAULT_PERMISSION_CLASSES"</span>: [<span class="string">'demo.permissions.MyPermission'</span>],  <span class="comment">#</span></span><br><span class="line">表示每一个视图类（只要不重写permission_classes属性），都需要拥有该权限用户才能访问。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>通过权限,可控制用户可访问的视图</li><li>可在配置文件中配置总权限,如果视图中没有重写permission_classes,那么就默认使用该权限</li><li>如果不需要权限,那么permission_classes就设置为空</li><li>如果视图的permission_classes中配置了多个权限,需要同时满足才能访问该视图</li></ol><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><h4 id="dispatch函数"><a href="#dispatch函数" class="headerlink" title="dispatch函数"></a>dispatch函数</h4><p>会在dispatch函数中调用initial函数,初始化APIView中的某些属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    `.dispatch()` is pretty much the same as Django's regular dispatch,</span></span><br><span class="line"><span class="string">    but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ...</span><br><span class="line">    request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.initial(request, *args, **kwargs)</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><h4 id="initial函数"><a href="#initial函数" class="headerlink" title="initial函数"></a>initial函数</h4><p>在initial函数中,会检查该视图需要的权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ...</span><br><span class="line">    self.check_permissions(request)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="check-permissions函数"><a href="#check-permissions函数" class="headerlink" title="check_permissions函数"></a>check_permissions函数</h4><p>在check_permissions函数中,会调用get_permissions()函数,得到Permissions对象列表,并调用各个对象下的has_permission()函数,<br>判断用户是否具有某权限,如果有一个不满足,则会调用permission_denied函数,给出错误消息提醒.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_permissions</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Check if the request should be permitted.</span></span><br><span class="line"><span class="string">    Raises an appropriate exception if the request is not permitted.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br></pre></td></tr></table></figure><h4 id="permission-denied函数"><a href="#permission-denied函数" class="headerlink" title="permission_denied函数"></a>permission_denied函数</h4><p>message的意思是,如果在自定义的Permission类中定义了message的值,那么权限不通过时就会返回message的提示,<br>不再会采用默认的了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permission_denied</span><span class="params">(self, request, message=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    If request is not permitted, determine what kind of exception to raise.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.authenticators <span class="keyword">and</span> <span class="keyword">not</span> request.successful_authenticator:</span><br><span class="line">        <span class="keyword">raise</span> exceptions.NotAuthenticated()</span><br><span class="line">    <span class="keyword">raise</span> exceptions.PermissionDenied(detail=message)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionDenied</span><span class="params">(APIException)</span>:</span></span><br><span class="line">    status_code = status.HTTP_403_FORBIDDEN</span><br><span class="line">    default_detail = _(<span class="string">'You do not have permission to perform this</span></span><br><span class="line"><span class="string">action.'</span>)</span><br><span class="line">    default_code = <span class="string">'permission_denied'</span></span><br></pre></td></tr></table></figure><h3 id="get-permissions函数"><a href="#get-permissions函数" class="headerlink" title="get_permissions函数"></a>get_permissions函数</h3><p>会遍历视图中重写的permission_classes列表并创建其中的类对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get_permissions(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Instantiates and returns the list of permissions that this view</span><br><span class="line">requires.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return [permission() for permission in self.permission_classes]</span><br></pre></td></tr></table></figure><p>如果视图没有重写该属性,将采用默认值,默认值就是在配置文件中REST_FRAMEWORK下配置的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</span><br></pre></td></tr></table></figure><h4 id="BasePermission类"><a href="#BasePermission类" class="headerlink" title="BasePermission类"></a>BasePermission类</h4><p>若是继承了BasePermission类,但却没重写,两个函数都默认返回True</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@six.add_metaclass(BasePermissionMetaclass)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePermission</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A base class from which all permission classes should inherit.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="check-object-permissions"><a href="#check-object-permissions" class="headerlink" title="check_object_permissions"></a>check_object_permissions</h4><p>检查用户是否具有访问某单个对象的权限,跟check_permission一样.<br>如果重写了get_object函数,那么就需要手动调用,否则无法实现检查单个对象权限的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_object_permissions</span><span class="params">(self, request, obj)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Check if the request should be permitted for a given object.</span></span><br><span class="line"><span class="string">    Raises an appropriate exception if the request is not permitted.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_object_permission(request, self, obj):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模型&quot;&gt;&lt;a href=&quot;#模型&quot; class=&quot;headerlink&quot; title=&quot;模型&quot;&gt;&lt;/a&gt;模型&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; models&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    USER_COMMON = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    USER_VIP = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    USER_SVIP = &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 用户类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    USER_TYPE = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (USER_COMMON, &lt;span class=&quot;string&quot;&gt;&#39;普通用户&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (USER_VIP, &lt;span class=&quot;string&quot;&gt;&#39;VIP&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (USER_SVIP, &lt;span class=&quot;string&quot;&gt;&#39;SVIP&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user_type = models.IntegerField(choices=USER_TYPE, default=USER_COMMON)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 建立1对1关系模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user = models.OneToOneField(User, on_delete=models.CASCADE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;related_name=&lt;span class=&quot;string&quot;&gt;&#39;userinfo&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="django-rest-framework" scheme="http://yoursite.com/tags/django-rest-framework/"/>
    
  </entry>
  
  <entry>
    <title>python属性描述符和属性查找过程</title>
    <link href="http://yoursite.com/2020/05/23/python%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E5%B1%9E%E6%80%A7%E6%9F%A5%E6%89%BE%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/05/23/python%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E5%B1%9E%E6%80%A7%E6%9F%A5%E6%89%BE%E8%BF%87%E7%A8%8B/</id>
    <published>2020-05-23T11:34:00.000Z</published>
    <updated>2020-11-15T08:38:42.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象的自省机制"><a href="#对象的自省机制" class="headerlink" title="对象的自省机制"></a>对象的自省机制</h3><p>自省是通过一定的机制查询到对象的内部结构。</p><h4 id="dir-obj"><a href="#dir-obj" class="headerlink" title="dir(obj)"></a><code>dir(obj)</code></h4><p>dir是python提供的一个api函数，会返回一个列表，该列表中包含该对象（实例对象或者类对象）的所有的属性和方法（包括从父类中获取的）</p><a id="more"></a><h4 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a><code>__dict__</code></h4><p><strong>dict</strong>字典中存储的是对象或类的部分属性，键为属性名，值为属性值。<br>实例对象的<strong>dict</strong>中只存储跟实例对象相关的属性。<br>类对象的<strong>dict</strong>中存储着能和实例对象共享的属性和方法，类的<strong>dict</strong>中并不包含从父类继承的属性和方法。</p><h4 id="dir和-dict-的区别"><a href="#dir和-dict-的区别" class="headerlink" title="dir和__dict__的区别"></a><code>dir</code>和<code>__dict__</code>的区别</h4><ul><li>dir是一个函数，返回的数据是一个list，只有属性名和函数名</li><li><strong>dict</strong>是一个字典，键为属性名\方法（函数）名，值是属性的值或者具体的方法（函数）</li><li>dir用来寻找一个对象的所有的属性和方法，包括从父类中继承的</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    Aname = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line"><span class="meta">@age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, _)</span>:</span></span><br><span class="line">        self.__age = _</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">funA</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'---&gt;funcA'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    Bname = <span class="string">'world'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(B, self).__init__()</span><br><span class="line">        self.__sex = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">funcB</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'---&gt;funB'</span>)</span><br><span class="line"></span><br><span class="line">b = B()</span><br></pre></td></tr></table></figure><p><code>b.__dict__</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;_A__age&#39;: 20, &#39;_B__sex&#39;: &#39;男&#39;&#125;</span><br></pre></td></tr></table></figure><p><code>B.__dict__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'Bname'</span>: <span class="string">'world'</span>, <span class="string">'__init__'</span>: &lt;function B.__init__ at <span class="number">0x7fd2a753e378</span>&gt;, <span class="string">'funcB'</span>: &lt;function B.funcB at <span class="number">0x7fd2a753e400</span>&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><p><code>dir(b)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Aname'</span>, <span class="string">'Bname'</span>, <span class="string">'_A__age'</span>, <span class="string">'_B__sex'</span>, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'age'</span>, <span class="string">'funA'</span>, <span class="string">'funcB'</span>]</span><br></pre></td></tr></table></figure><p><code>dir(B)</code><br>与<code>dir(b)</code>对比可以看出，实例对象的值在这个列表里面不存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Aname'</span>, <span class="string">'Bname'</span>, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'age'</span>, <span class="string">'funA'</span>, <span class="string">'funcB'</span>]</span><br></pre></td></tr></table></figure><h3 id="getattr-和-getattribute-魔法方法"><a href="#getattr-和-getattribute-魔法方法" class="headerlink" title="__getattr__和__getattribute__魔法方法"></a><code>__getattr__</code>和<code>__getattribute__</code>魔法方法</h3><p><code>__getattr__</code>是在查找不到属性时调用<br><code>__getattribute__</code>在访问对象时优先调用，不管属性是否存在，所以不建议重写该魔法方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'chen'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattr__'</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattribute__'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> super(A, self).__getattribute__(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br></pre></td></tr></table></figure><p>当调用存在的属性时打印：<br><code>a.name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__getattribute__</span><br><span class="line">chen</span><br></pre></td></tr></table></figure><p>当调用不存在的属性时打印：<br><code>a.sss</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__getattribute__</span><br><span class="line">__getattr__</span><br><span class="line">sss</span><br></pre></td></tr></table></figure><p>也就是说，不管调用的属性存在不存在，都会调用<code>__getattribute__</code>魔法方法；当调用的属性不存在时，<code>__getattribute__</code>会抛出异常，<code>AttributeError</code>，然后在内部调用<code>__getattr__</code>函数。</p><blockquote><p>注意:<br>不能在<code>__getattribute__</code>方法中使用<code>self.xx</code>或者<code>self.__dict__[xxx]</code>或者<code>hasattr(self, xxx)</code>等操作，会陷入无限递归之中</p></blockquote><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p><code>__get__</code><br><code>__set__</code><br><code>__delete__</code><br>实现上面三个魔法函数之一就可称之为属性描述符，如果只实现了<code>__get__</code>则称为非数据属性描述符(no-data descriptor)，只有同时实现了<code>__get__</code>和<code>__set__</code>才称之为数据属性描述符(data descriptor)。</p><p>以下例子就是实现了一个int类型的数据属性描述符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, numbers.Integral):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'必须是int类型数据'</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'__set__'</span>)</span><br><span class="line">        self.__value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'__get__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'__delete__'</span>)</span><br><span class="line">        <span class="keyword">del</span> self.__value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    age = Integer()</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = Test()</span><br><span class="line">t.age = <span class="number">100</span></span><br><span class="line">print(t.age)</span><br><span class="line"><span class="keyword">del</span> t.age</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__set__</span><br><span class="line">__get__</span><br><span class="line"><span class="number">100</span></span><br><span class="line">__delete__</span><br></pre></td></tr></table></figure><h3 id="属性查找过程"><a href="#属性查找过程" class="headerlink" title="属性查找过程"></a>属性查找过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, numbers.Integral):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'必须是int类型数据'</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'__set__'</span>)</span><br><span class="line">        self.__value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'__get__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'__delete__'</span>)</span><br><span class="line">        <span class="keyword">del</span> self.__value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    age = Integer()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.score = Integer()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattr__'</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattribute__'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> super(Test, self).__getattribute__(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br></pre></td></tr></table></figure><ul><li><p>如果attr是数据属性描述符，并且是类对象属性，即代码中<code>age</code>属性，那么调用时，执行顺序: <code>__getattribute__</code> –&gt; <code>__get__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t.age = <span class="number">100</span></span><br><span class="line">print(t.age)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__set__</span><br><span class="line">__getattribute__</span><br><span class="line">__get__</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>如果attr是数据属性描述符，但为对象实例的属性时，即<code>score</code>属性，执行顺序为就是调用<code>__getattribute__</code>取数据，即直接调用<code>self.__dict__</code>中取数据了，跟是否时数据属性描述符无关。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t.score = <span class="number">99</span></span><br><span class="line">print(t.score)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__getattribute__</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure></li><li><p>如果attr存在，则执行顺序是<code>__geattribute__</code> –&gt; <code>t.__dict__</code> –&gt; <code>Test.__dict__</code></p></li><li><p>如果attr不存在，则查找顺序是<code>__getattribute__</code> –&gt; <code>t.__dict__</code> –&gt; <code>Test.__dict__</code> –&gt; <code>__getattr__</code></p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://www.cnblogs.com/xyz2b/p/<span class="number">10529068.</span>html</span><br><span class="line">https://www.cnblogs.com/xybaby/p/<span class="number">6270551.</span>html</span><br><span class="line">https://www.jianshu.com/p/<span class="number">885</span>d59db57fc</span><br><span class="line">https://blog.csdn.net/qq_26442553/article/details/<span class="number">82467777</span></span><br><span class="line">https://www.cnblogs.com/cccy0/archive/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">20</span>/<span class="number">9063679.</span>html</span><br><span class="line">https://www.cnblogs.com/Vito2008/p/<span class="number">5280216.</span>html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对象的自省机制&quot;&gt;&lt;a href=&quot;#对象的自省机制&quot; class=&quot;headerlink&quot; title=&quot;对象的自省机制&quot;&gt;&lt;/a&gt;对象的自省机制&lt;/h3&gt;&lt;p&gt;自省是通过一定的机制查询到对象的内部结构。&lt;/p&gt;
&lt;h4 id=&quot;dir-obj&quot;&gt;&lt;a href=&quot;#dir-obj&quot; class=&quot;headerlink&quot; title=&quot;dir(obj)&quot;&gt;&lt;/a&gt;&lt;code&gt;dir(obj)&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;dir是python提供的一个api函数，会返回一个列表，该列表中包含该对象（实例对象或者类对象）的所有的属性和方法（包括从父类中获取的）&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>求两个单链表的交叉节点</title>
    <link href="http://yoursite.com/2020/05/23/%E6%B1%82%E4%B8%A4%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BA%A4%E5%8F%89%E8%8A%82%E7%82%B9/"/>
    <id>http://yoursite.com/2020/05/23/%E6%B1%82%E4%B8%A4%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BA%A4%E5%8F%89%E8%8A%82%E7%82%B9/</id>
    <published>2020-05-23T11:33:00.000Z</published>
    <updated>2020-11-15T08:38:42.918Z</updated>
    
    <content type="html"><![CDATA[<p>思路:<br>如果两个单链表有交叉节点,那么他们的尾节点一定是相同的,所以可以计算出链表的长度,然后判断长短,将长度较长的链表的头节点移动(长-短)个节点,然后遍历之后的节点.</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_communal_node</span><span class="params">(head1, head2)</span>:</span></span><br><span class="line">    <span class="comment"># 获取交叉节点</span></span><br><span class="line">    length1= get_length(head1)</span><br><span class="line">    lenght2 = get_length(head2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果链表1的长度大于链表2</span></span><br><span class="line">    <span class="comment"># 那么就将链表1的头节点移动length1-length2个位置</span></span><br><span class="line">    <span class="keyword">if</span> length1 &gt; lenght2:</span><br><span class="line">        <span class="keyword">while</span> lenght2 &lt; length1:</span><br><span class="line">            head1 = head1.next</span><br><span class="line">            lenght2 += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 同上</span></span><br><span class="line">    <span class="keyword">elif</span> lenght2 &gt; length1:</span><br><span class="line">        <span class="keyword">while</span> length1 &lt; lenght2:</span><br><span class="line">            head2 = head2.next</span><br><span class="line">            length1 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从同一起点位置开始移动</span></span><br><span class="line">    <span class="keyword">while</span> (head1 <span class="keyword">and</span> head2):</span><br><span class="line">        <span class="comment"># 如果值相等(实际上应该判断是否是同一个节点),就说明这个是交叉的节点</span></span><br><span class="line">        <span class="keyword">if</span> head1.val == head2.val:</span><br><span class="line">            <span class="keyword">return</span> head1</span><br><span class="line"></span><br><span class="line">        head1 = head1.next</span><br><span class="line">        head2 = head2.next</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_length</span><span class="params">(head)</span>:</span></span><br><span class="line">    <span class="comment"># 获取链表长度</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="comment"># head = copy.deepcopy(_head)</span></span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line">        head = head.next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_head</span><span class="params">(links)</span>:</span></span><br><span class="line">    <span class="comment"># 构建链表,返回头节点</span></span><br><span class="line">    head = <span class="literal">None</span></span><br><span class="line">    cur = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> links:</span><br><span class="line">        node = Node(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            head = node</span><br><span class="line">            cur = head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur.next = node</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    head1 = get_head([<span class="string">'java'</span>, <span class="string">'world'</span>, <span class="string">'node'</span>, <span class="string">'B+'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</span><br><span class="line">    head2 = get_head([<span class="string">'ab'</span>, <span class="string">'bc'</span>, <span class="string">'ef'</span>, <span class="string">'hello'</span>, <span class="string">'python'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</span><br><span class="line"></span><br><span class="line">    node = get_communal_node(head1, head2)</span><br><span class="line">    print(node)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思路:&lt;br&gt;如果两个单链表有交叉节点,那么他们的尾节点一定是相同的,所以可以计算出链表的长度,然后判断长短,将长度较长的链表的头节点移动(长-短)个节点,然后遍历之后的节点.&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>django-rest-framework --- 分页</title>
    <link href="http://yoursite.com/2020/05/23/django-rest-framework-%E5%88%86%E9%A1%B5/"/>
    <id>http://yoursite.com/2020/05/23/django-rest-framework-%E5%88%86%E9%A1%B5/</id>
    <published>2020-05-23T11:32:00.000Z</published>
    <updated>2020-11-15T08:38:42.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>drf框架的分页主要有三种：</p><ol><li>普通分页，看第n页，每页显示m条数据</li><li>切割分页，在第n个位置，向后查看m条数据</li><li>加密分页，与普通分页一样，不过对url中的请求页码进行加密</li></ol><a id="more"></a><h3 id="普通分页"><a href="#普通分页" class="headerlink" title="普通分页"></a>普通分页</h3><h4 id="自定义分页类"><a href="#自定义分页类" class="headerlink" title="自定义分页类"></a>自定义分页类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> pagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentPagination</span><span class="params">(pagination.PageNumberPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 默认值 ，每一页的数量，如果没有size参数的话</span></span><br><span class="line">    page_size = <span class="number">8</span></span><br><span class="line">    <span class="comment"># 最大数量，即使 带上了size参数，也无法超过这个值</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 通过GET请求获取每一页需要的数量，/?size=x的size参数</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span></span><br><span class="line">    <span class="comment"># url中要查找的page参数，即/?page=x中的page参数</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span></span><br></pre></td></tr></table></figure><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Student.objects.all().order_by(<span class="string">'-id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 实例化我们定义的分页类</span></span><br><span class="line">        pagination = StudentPagination()</span><br><span class="line">        <span class="comment"># 对实例化类进行传参控制</span></span><br><span class="line">        students = pagination.paginate_queryset(self.get_queryset(), request=request, view=self)</span><br><span class="line">        <span class="comment"># 将分页后的对象作序列化</span></span><br><span class="line">        serializer = StudentSerializer(students, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pagination.get_paginated_response(serializer.data)</span><br></pre></td></tr></table></figure><h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.StudentView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在请求时，可以使用<code>http://127.0.0.1:8000/students/?page=10&amp;size=3</code>，那么在使用时，会自动从链接中提取page和size的值了。此处的意思是，请求第10页的3个数据。</p><h3 id="切割分页"><a href="#切割分页" class="headerlink" title="切割分页"></a>切割分页</h3><h4 id="自定义分页类-1"><a href="#自定义分页类-1" class="headerlink" title="自定义分页类"></a>自定义分页类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentLimitOffsetPagination</span><span class="params">(pagination.LimitOffsetPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 默认每一页显示多少条数据</span></span><br><span class="line">    default_limit = <span class="number">8</span></span><br><span class="line">    <span class="comment"># url中设置显示数据数量的参数</span></span><br><span class="line">    limit_query_param = <span class="string">'limit'</span></span><br><span class="line">    <span class="comment"># 从数据库中的第几条开始查询，查询limit条</span></span><br><span class="line">    offset_query_param = <span class="string">'offset'</span></span><br><span class="line">    <span class="comment"># 每一次请求，返回最大数量</span></span><br><span class="line">    max_limit = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>其他的写法跟普通分页无异。</p><h3 id="加密分页"><a href="#加密分页" class="headerlink" title="加密分页"></a>加密分页</h3><h4 id="自定义分页类-2"><a href="#自定义分页类-2" class="headerlink" title="自定义分页类"></a>自定义分页类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentCursorPagination</span><span class="params">(pagination.CursorPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 查询参数</span></span><br><span class="line">    cursor_query_param = <span class="string">'cursor'</span></span><br><span class="line">    <span class="comment"># 排序方式</span></span><br><span class="line">    ordering = <span class="string">'-id'</span></span><br><span class="line">    <span class="comment"># 每页查询数量</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span></span><br><span class="line">    <span class="comment"># 每页大小</span></span><br><span class="line">    page_size = <span class="number">8</span></span><br><span class="line">    <span class="comment"># 最大限制</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>但返回数据却有不同，无法通过修改url来得到指定某页的数据，只能通过返回数据中的previous和next来得到上一页或者下一页的数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"next"</span>: <span class="string">"http://127.0.0.1:8000/students/?cursor=cD04NQ%3D%3D"</span>,</span><br><span class="line">    <span class="attr">"previous"</span>: <span class="string">"http://127.0.0.1:8000/students/?cursor=cj0xJnA9OTI%3D"</span>,</span><br><span class="line">    <span class="attr">"results"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">92</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"test91"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">101</span>,</span><br><span class="line">            <span class="attr">"sex"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"height"</span>: <span class="number">0.349139736956964</span>,</span><br><span class="line">            <span class="attr">"weight"</span>: <span class="number">105.24197499223212</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;drf框架的分页主要有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;普通分页，看第n页，每页显示m条数据&lt;/li&gt;
&lt;li&gt;切割分页，在第n个位置，向后查看m条数据&lt;/li&gt;
&lt;li&gt;加密分页，与普通分页一样，不过对url中的请求页码进行加密&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="django-rest-framework" scheme="http://yoursite.com/tags/django-rest-framework/"/>
    
  </entry>
  
  <entry>
    <title>django-rest-framework --- JWTAuthentication</title>
    <link href="http://yoursite.com/2020/05/23/django-rest-framework-JWTAuthentication/"/>
    <id>http://yoursite.com/2020/05/23/django-rest-framework-JWTAuthentication/</id>
    <published>2020-05-23T11:31:00.000Z</published>
    <updated>2020-11-15T08:38:42.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。它具备两个特点：</p><ul><li>简洁(Compact)<br>可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</li></ul><ul><li>自包含(Self-contained)<br>负载中包含了所有用户所需要的信息，避免了多次查询数据库</li></ul><a id="more"></a><h4 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a>JWT 组成</h4><ul><li><p>Header 头部<br>头部包含了两部分，token 类型和采用的加密算法,它会使用 Base64 编码组成 JWT 结构的第一部分.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Payload 负载<br>这部分就是我们存放信息的地方了，你可以把用户 ID 等信息放在这里，JWT 规范里面对这部分有进行了比较详细的介绍，常用的由 iss（签发者），exp（过期时间），sub（面向的用户），aud（接收方），iat（签发时间）。<br>同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"iss"</span>: <span class="string">"lion1ou JWT"</span>,</span><br><span class="line">    <span class="string">"iat"</span>: <span class="number">1441593502</span>,</span><br><span class="line">    <span class="string">"exp"</span>: <span class="number">1441594722</span>,</span><br><span class="line">    <span class="string">"aud"</span>: <span class="string">"qxinhai.cn"</span>,</span><br><span class="line">    <span class="string">"sub"</span>: <span class="string">"qxinhai@yeah.net"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Signature 签名<br>前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过。<br>三个部分通过.连接在一起就是我们的 JWT 了，它可能长这个样子，长度貌似和你的加密算法和私钥有关系。<br><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU3ZmVmMTY0ZTU0YWY2NGZmYzUzZGJkNSIsInhzcmYiOiI0ZWE1YzUwOGE2NTY2ZTc2MjQwNTQzZjhmZWIwNmZkNDU3Nzc3YmUzOTU0OWM0MDE2NDM2YWZkYTY1ZDIzMzBlIiwiaWF0IjoxNDc2NDI3OTMzfQ.PA3QjeyZSUh7H0GfE0vJaKW4LjKJuC3dVLQiY4hii8s</code><br>其实到这一步可能就有人会想了，HTTP 请求总会带上 token，这样这个 token 传来传去占用不必要的带宽啊。如果你这么想了，那你可以去了解下 HTTP2，HTTP2 对头部进行了压缩，相信也解决了这个问题。</p></li><li><p>签名的目的<br>最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</p></li><li><p>信息暴露<br>在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？<br>是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。<br>因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。</p></li></ul><h4 id="JWT-使用"><a href="#JWT-使用" class="headerlink" title="JWT 使用"></a>JWT 使用</h4><ol><li>首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。</li><li>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT。形成的JWT就是一个形同lll.zzz.xxx的字符串。</li><li>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。</li><li>前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题)</li><li>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。</li><li>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>｀pip install djangorestframework-jwt｀</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在settings.py中添加以下app</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'rest_framework'</span>,</span><br><span class="line"><span class="string">'rest_framework_jwt'</span>,</span><br></pre></td></tr></table></figure><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户数据添加进载荷</span></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    登录功能</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        username = request.data.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.data.get(<span class="string">'password'</span>)</span><br><span class="line">        user = User.objects.filter(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user.check_password(password):</span><br><span class="line">            payload = jwt_payload_handler(user)</span><br><span class="line">            token = jwt_encode_handler(payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'token'</span>: token&#125;, status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'message'</span>: <span class="string">'登录失败'</span>&#125;, status=status.HTTP_401_UNAUTHORIZED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        data = [</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'java'</span>, <span class="string">'price'</span>: <span class="number">57</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'python'</span>, <span class="string">'price'</span>: <span class="number">93</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'books'</span>: data&#125;)</span><br></pre></td></tr></table></figure><p>如果用户登录成功，将返回token值。<br>主要靠以下两个函数来生成token值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将用户数据添加进载荷</span></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">payload = jwt_payload_handler(user)</span><br><span class="line">token = jwt_encode_handler(payload)</span><br></pre></td></tr></table></figure><p>下次访问时，需要使用token值来验证身份。<br>不管是前端访问，还是requests访问，都要严格按照以下格式要求:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Authorization'</span>: <span class="string">'JWT '</span> + token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JWT和token之间有空格。</p><p>从源码看，继承顺序是这样的:<br><code>JSONWebTokenAuthentication -&gt; BaseJSONWebTokenAuthentication -&gt; BaseAuthentication</code>，最终也是继承自<code>BaseAuthentication</code>，也同样有个跟<code>TokenAuthentication</code>和<code>BasicAuthentication</code>的问题，那就是没有对<code>如果不传入Authorization数据</code>这种情况抛异常处理。详细讲就是，一个视图类使用了<code>JSONWebTokenAuthentication</code>认证，如果你不传入<code>Authorization</code>数据，它不会抛异常，但如果你传入了这个数据，数据却错了，就会抛异常。<br>看了认证相关的源码，都是在<code>authenticate()</code>函数中返回了<code>None</code>之后，就没有做任何判断了。不太清楚官方的正确做法应该是什么，但在解决<code>不传入Authorization数据却能正常访问</code>问题时，会使用以下两种方式。</p><ol><li><p>重写dispath和handle_exception函数<br>在调用get或者post函数之前，都会先调用dispatch函数，在此时判断用户是否验证成功.<br>验证成功时,<code>request.user</code>会返回登录的User对象，否则是<code>AnonymousUser</code>, <code>request.auth</code>也会打返回token值。在此时可以通过这两个数据，判断是否需要继续执行接下来实际的视图函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    并不一定要继承APIView，可以按照需求继承</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        重写dispatch函数，在post和get之前调用</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        response = super(BasicApiView, self).dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 登录的用户</span></span><br><span class="line">        <span class="comment"># request.user</span></span><br><span class="line">        <span class="comment"># token值</span></span><br><span class="line">        <span class="comment"># request.auth</span></span><br><span class="line">        <span class="comment"># 如果用户认证失败</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.user <span class="keyword">or</span> isinstance(request.user, AnonymousUser):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 抛出异常</span></span><br><span class="line">                <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'认证失败'</span>)</span><br><span class="line">            <span class="keyword">except</span> exceptions.AuthenticationFailed <span class="keyword">as</span> exc:</span><br><span class="line">                <span class="comment"># 捕获处理后的异常</span></span><br><span class="line">                response = self.handle_exception(exc)</span><br><span class="line">                <span class="comment"># 一定要加上这一行，否则报错</span></span><br><span class="line">                response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_exception</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        异常处理</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 如果是验证失败的异常，返回401</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(exc, (exceptions.AuthenticationFailed, exceptions.NotAuthenticated)):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'message'</span>: str(exc)&#125;, status=status.HTTP_401_UNAUTHORIZED)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 其他的错误统一归为内部错误，如果有需要单独处理，放在之前用if判断处理</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'message'</span>: str(exc)&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span><span class="params">(BasicApiView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        data = [</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'java'</span>, <span class="string">'price'</span>: <span class="number">57</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'python'</span>, <span class="string">'price'</span>: <span class="number">93</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'books'</span>: data&#125;)</span><br></pre></td></tr></table></figure></li><li><p>继承认证类，重写authenticate()函数</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JWTAuthentication</span><span class="params">(JSONWebTokenAuthentication)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取返回值(user, token)</span></span><br><span class="line">        user_auth_tuple = super().authenticate(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果返回值为空，则说明验证失败</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_auth_tuple <span class="keyword">or</span> <span class="keyword">not</span> user_auth_tuple[<span class="number">0</span>] <span class="keyword">or</span> <span class="keyword">not</span> user_auth_tuple[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'帐号或密码错误'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 否则继续往下执行</span></span><br><span class="line">        <span class="keyword">return</span> user_auth_tuple</span><br></pre></td></tr></table></figure><p>然后在视图类中配置即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authentication_classes = [JWTAuthentication, ]</span><br></pre></td></tr></table></figure><p>以上是最基本的用法，如果有定制要求，也不会差的太远。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="JSONWebTokenAuthentication"><a href="#JSONWebTokenAuthentication" class="headerlink" title="JSONWebTokenAuthentication"></a>JSONWebTokenAuthentication</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_jwt_value</span><span class="params">(self, request)</span>:</span></span><br><span class="line">  <span class="comment"># 获取请求头中Authoriztion数据</span></span><br><span class="line">      auth = get_authorization_header(request).split()</span><br><span class="line">      <span class="comment"># 获取标志位，如果没有自定义，就是 JWT</span></span><br><span class="line">      auth_header_prefix = api_settings.JWT_AUTH_HEADER_PREFIX.lower()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> auth:</span><br><span class="line">          <span class="keyword">if</span> api_settings.JWT_AUTH_COOKIE:</span><br><span class="line">              <span class="keyword">return</span> request.COOKIES.get(api_settings.JWT_AUTH_COOKIE)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> smart_text(auth[<span class="number">0</span>].lower()) != auth_header_prefix:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> len(auth) == <span class="number">1</span>:</span><br><span class="line">          msg = _(<span class="string">'Invalid Authorization header. No credentials provided.'</span>)</span><br><span class="line">          <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">      <span class="keyword">elif</span> len(auth) &gt; <span class="number">2</span>:</span><br><span class="line">          msg = _(<span class="string">'Invalid Authorization header. Credentials string '</span></span><br><span class="line">                  <span class="string">'should not contain spaces.'</span>)</span><br><span class="line">          <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 返回token数据</span></span><br><span class="line">      <span class="keyword">return</span> auth[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="comment"># token数据</span></span><br><span class="line">       jwt_value = self.get_jwt_value(request)</span><br><span class="line">       <span class="keyword">if</span> jwt_value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">       <span class="comment"># 解析token值</span></span><br><span class="line">       <span class="comment"># jwt_decode_handler = api_settings.JWT_DECODE_HANDLER</span></span><br><span class="line">       <span class="comment"># 具体代码见源码分析</span></span><br><span class="line">           payload = jwt_decode_handler(jwt_value)</span><br><span class="line">       <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">           msg = _(<span class="string">'Signature has expired.'</span>)</span><br><span class="line">           <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">       <span class="keyword">except</span> jwt.DecodeError:</span><br><span class="line">           msg = _(<span class="string">'Error decoding signature.'</span>)</span><br><span class="line">           <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">       <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">           <span class="keyword">raise</span> exceptions.AuthenticationFailed()</span><br><span class="line"></span><br><span class="line">       user = self.authenticate_credentials(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证成功后，返回登录的User对象和token数据</span></span><br><span class="line">       <span class="keyword">return</span> (user, jwt_value)</span><br></pre></td></tr></table></figure><h4 id="rest-framework-jwt-settings"><a href="#rest-framework-jwt-settings" class="headerlink" title="rest_framework_jwt.settings"></a>rest_framework_jwt.settings</h4><p>路径:<code>rest_framework_jwt.settings.py</code></p><p>我们一般都可以用CTRL + 左键查看函数\属性的具体信息，但我在下面使用下面两行代码时却发现无法点击，所以好奇就看了下相关的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将用户数据添加进载荷</span></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br></pre></td></tr></table></figure><p>api_settings是APISettings的对象实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api_settings = APISettings(USER_SETTINGS, DEFAULTS, IMPORT_STRINGS)</span><br></pre></td></tr></table></figure><p>settings实际上就是django运行时使用的配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br></pre></td></tr></table></figure><p>用户可以在配置文件中配置JWT_AUTH数据，所以在创建apt_settings对象时就从配置文件中将所有的用户自定义的数据读取出来，存放到USER_SETTINGS中，并传入ApiSettings中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER_SETTINGS = getattr(settings, <span class="string">'JWT_AUTH'</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>DEFAULTS中的数据是最齐全的，用户能自定义的数据都在该字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">DEFAULTS = &#123;</span><br><span class="line">    <span class="string">'JWT_ENCODE_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_encode_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_DECODE_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_decode_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PAYLOAD_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_payload_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USER_ID_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PRIVATE_KEY'</span>:</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PUBLIC_KEY'</span>:</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USERNAME_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_get_username_from_payload_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_response_payload_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_SECRET_KEY'</span>: settings.SECRET_KEY,</span><br><span class="line">    <span class="string">'JWT_GET_USER_SECRET_KEY'</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">'JWT_ALGORITHM'</span>: <span class="string">'HS256'</span>,</span><br><span class="line">    <span class="string">'JWT_VERIFY'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'JWT_VERIFY_EXPIRATION'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'JWT_LEEWAY'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(seconds=<span class="number">300</span>),</span><br><span class="line">    <span class="string">'JWT_AUDIENCE'</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">'JWT_ISSUER'</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_ALLOW_REFRESH'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'JWT_REFRESH_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">7</span>),</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_AUTH_HEADER_PREFIX'</span>: <span class="string">'JWT'</span>,</span><br><span class="line">    <span class="string">'JWT_AUTH_COOKIE'</span>: <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户可导入（调用）的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IMPORT_STRINGS = (</span><br><span class="line">    <span class="string">'JWT_ENCODE_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_DECODE_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_PAYLOAD_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USER_ID_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USERNAME_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_GET_USER_SECRET_KEY'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="APISettings"><a href="#APISettings" class="headerlink" title="APISettings"></a>APISettings</h4><p>APISettings的路径：<code>rest-framework.settings</code><br><code>__getattr__</code>魔法方法的作用是，对象实例在调用方法或者属性时都将调用<code>__getattr__</code>。那么此处的作用，就相当于如果你想要调用<code>rest_framework_jwt.utils.jwt_payload_handler</code>函数，你就只需要使用<code>api_settings.JWT_PAYLOAD_HANDLER</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    <span class="comment"># defautls配置文件数据是最齐全的，如果defaults没有，就说明对象调用错了。</span></span><br><span class="line">    <span class="comment"># attr是属性名，或者方法名</span></span><br><span class="line">    <span class="keyword">if</span> attr <span class="keyword">not</span> <span class="keyword">in</span> self.defaults:</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">"Invalid API setting: '%s'"</span> % attr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 判断用户是否自定义了attr属性</span></span><br><span class="line">        val = self.user_settings[attr]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="comment"># 如果用户没有自定义，那么就从配置文件中读取</span></span><br><span class="line">        val = self.defaults[attr]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果attr在import_strings中，就说明其实是一个函数</span></span><br><span class="line">    <span class="comment"># 现在存入的是一个有具体路径的字符串，需要将其转换成可调用的函数</span></span><br><span class="line">    <span class="keyword">if</span> attr <span class="keyword">in</span> self.import_strings:</span><br><span class="line">        val = perform_import(val, attr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加入缓存</span></span><br><span class="line">    <span class="comment"># 再次调用attr时，不会再触发__getattr__魔法方法</span></span><br><span class="line">    self._cached_attrs.add(attr)</span><br><span class="line">    <span class="comment"># 这行代码，类似于这种效果</span></span><br><span class="line">    <span class="comment"># a = A() setattr(a, 'a', 10)</span></span><br><span class="line">    <span class="comment"># 打印 a.a 将返回10</span></span><br><span class="line">    setattr(self, attr, val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure><p><code>rest_framework.settings</code>下也有个api_settings,<br><code>api_settings = APISettings(None, DEFAULTS, IMPORT_STRINGS)</code>，与<code>rest_framework_jwt.settings</code>下的api_settings不是同一个，不要混用了。</p><h4 id="jwt-payload-handler"><a href="#jwt-payload-handler" class="headerlink" title="jwt_payload_handler"></a>jwt_payload_handler</h4><p>路径：<code>rest_framework_jwt.utils.jwt_payload_handler</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_payload_handler</span><span class="params">(user)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 将用户id，用户名，token的有效时间，邮箱都写入载荷中</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">'user_id'</span>: user.pk,</span><br><span class="line">        <span class="string">'username'</span>: username,</span><br><span class="line">        <span class="string">'exp'</span>: datetime.utcnow() + api_settings.JWT_EXPIRATION_DELTA</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> hasattr(user, <span class="string">'email'</span>):</span><br><span class="line">        payload[<span class="string">'email'</span>] = user.email</span><br><span class="line">    <span class="keyword">if</span> isinstance(user.pk, uuid.UUID):</span><br><span class="line">        payload[<span class="string">'user_id'</span>] = str(user.pk)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_encode_handler</span><span class="params">(payload)</span>:</span></span><br><span class="line">    key = api_settings.JWT_PRIVATE_KEY <span class="keyword">or</span> jwt_get_secret_key(payload)</span><br><span class="line">    <span class="keyword">return</span> jwt.encode(</span><br><span class="line">        payload,</span><br><span class="line">        key,</span><br><span class="line">        api_settings.JWT_ALGORITHM</span><br><span class="line">    ).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_decode_handler</span><span class="params">(token)</span>:</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        <span class="string">'verify_exp'</span>: api_settings.JWT_VERIFY_EXPIRATION,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># get user from token, BEFORE verification, to get user secret key</span></span><br><span class="line">    unverified_payload = jwt.decode(token, <span class="literal">None</span>, <span class="literal">False</span>)</span><br><span class="line">    secret_key = jwt_get_secret_key(unverified_payload)</span><br><span class="line">    <span class="keyword">return</span> jwt.decode(</span><br><span class="line">        token,</span><br><span class="line">        api_settings.JWT_PUBLIC_KEY <span class="keyword">or</span> secret_key,</span><br><span class="line">        api_settings.JWT_VERIFY,</span><br><span class="line">        options=options,</span><br><span class="line">        leeway=api_settings.JWT_LEEWAY,</span><br><span class="line">        audience=api_settings.JWT_AUDIENCE,</span><br><span class="line">        issuer=api_settings.JWT_ISSUER,</span><br><span class="line">        algorithms=[api_settings.JWT_ALGORITHM]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h4 id="用户自定义数据"><a href="#用户自定义数据" class="headerlink" title="用户自定义数据"></a>用户自定义数据</h4><p>以下是常用的几个，如果需要更多的，查看官方文档。</p><h5 id="JWT-SECRET-KEY"><a href="#JWT-SECRET-KEY" class="headerlink" title="JWT_SECRET_KEY"></a>JWT_SECRET_KEY</h5><p>用来给token加密的，默认是<code>settings.SECRET_KEY</code></p><h5 id="JWT-ALGORITHM"><a href="#JWT-ALGORITHM" class="headerlink" title="JWT_ALGORITHM"></a>JWT_ALGORITHM</h5><p>加密算法，默认是HS256</p><h5 id="JWT-VERIFY"><a href="#JWT-VERIFY" class="headerlink" title="JWT_VERIFY"></a>JWT_VERIFY</h5><p>解密失败时将抛出一个DecodeError错误，默认是True，改为False时，仍可以获取载荷</p><h5 id="JWT-VERIFY-EXPIRATION"><a href="#JWT-VERIFY-EXPIRATION" class="headerlink" title="JWT_VERIFY_EXPIRATION"></a>JWT_VERIFY_EXPIRATION</h5><p>是否设置有效时间，默认是True</p><h5 id="JWT-LEEWAY"><a href="#JWT-LEEWAY" class="headerlink" title="JWT_LEEWAY"></a>JWT_LEEWAY</h5><p>token过期时间的缓冲期，默认为0.就是说，如果设置了一个token的过期时间是10分钟，但如果你设置了这个值为1分钟，那么在10～11分钟内，该token仍有效。</p><h5 id="JWT-EXPIRATION-DELTA"><a href="#JWT-EXPIRATION-DELTA" class="headerlink" title="JWT_EXPIRATION_DELTA"></a>JWT_EXPIRATION_DELTA</h5><p>token的有效时间，默认是5分钟。<code>datetime.timedelta</code>数据类型。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;getblimp.github.io&#x2F;django-rest-framework-jwt&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.django-rest-framework.org&#x2F;api-guide&#x2F;settings&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;180a870a308a</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;chengqiang20152015&#x2F;article&#x2F;details&#x2F;81146545</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;  JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。它具备两个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简洁(Compact)&lt;br&gt;可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;自包含(Self-contained)&lt;br&gt;负载中包含了所有用户所需要的信息，避免了多次查询数据库&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="django-rest-framework" scheme="http://yoursite.com/tags/django-rest-framework/"/>
    
  </entry>
  
  <entry>
    <title>django-rest-framework --- 认证</title>
    <link href="http://yoursite.com/2020/05/23/django-rest-framework-%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2020/05/23/django-rest-framework-%E8%AE%A4%E8%AF%81/</id>
    <published>2020-05-23T11:30:00.000Z</published>
    <updated>2020-11-15T08:38:42.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    USER_TYPE = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'普通用户'</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'VIP'</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'SVIP'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user_type = models.IntegerField(choices=USER_TYPE, default=USER_TYPE[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    username = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserToken</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user = models.OneToOneField(UserInfo, on_delete=models.CASCADE)</span><br><span class="line">    token = models.CharField(max_length=<span class="number">256</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="自定义认证对象"><a href="#自定义认证对象" class="headerlink" title="自定义认证对象"></a>自定义认证对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerAuthentication</span><span class="params">(authentication.BaseAuthentication)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取url中的token值</span></span><br><span class="line">        token = request._request.GET.get(<span class="string">'token'</span>)</span><br><span class="line">        <span class="comment"># 判断对应用户是否存在</span></span><br><span class="line">        user_token = UserToken.objects.filter(token=token).first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_token:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'用户认证失败'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 必须返回一个包含两个元素的 tuple</span></span><br><span class="line">        <span class="keyword">return</span> (user_token.user, user_token)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> UserInfo, UserToken</span><br><span class="line"><span class="keyword">from</span> students.authenticates <span class="keyword">import</span> CustomerAuthentication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(user)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">    ctime = str(time.time())</span><br><span class="line"></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(ctime.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    m.update(user.username.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        ret = &#123;<span class="string">'code'</span>: <span class="number">200</span>, <span class="string">'msg'</span>: <span class="string">'success'</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">            password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">            user = UserInfo.objects.filter(username=username).first()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">                UserInfo.objects.create(username=username, password=password)</span><br><span class="line">                ret[<span class="string">'code'</span>] = <span class="number">201</span></span><br><span class="line">                ret[<span class="string">'msg'</span>] = <span class="string">'创建成功'</span></span><br><span class="line"></span><br><span class="line">            token = md5(user)</span><br><span class="line">            UserToken.objects.update_or_create(user=user, defaults=&#123;<span class="string">'token'</span>: token&#125;)</span><br><span class="line">            ret[<span class="string">'token'</span>] = token</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">import</span> traceback</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            ret[<span class="string">'code'</span>] = <span class="number">1002</span></span><br><span class="line">            ret[<span class="string">'msg'</span>] = <span class="string">'请求异常'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    authentication_classes = [CustomerAuthentication, ]</span><br><span class="line"></span><br><span class="line">    ORDER_DATA = &#123;</span><br><span class="line">        <span class="number">1</span>: &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'apple'</span>,</span><br><span class="line">            <span class="string">'number'</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="number">2</span>: &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'banana'</span>,</span><br><span class="line">            <span class="string">'number'</span>: <span class="number">30</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(OrderApiView.ORDER_DATA)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当用户登录时，生成token并保存到数据表中，每次请求时都带上 token;</p><p>在视图类中重写authentication_classes属性，将自定义认证对象以列表形式赋值给他，当调用该视图时会自动验证；</p><p>如果想让所有的drf视图都使用同一个认证类，那么可以在settings.py中配置,</p><p><code>&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;:[&#39;students.authenticates.CustomerAuthentication&#39;]</code>;</p><p>若不想使用settings.py中的认证，在视图类中重写authentication_classes属性即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据表&quot;&gt;&lt;a href=&quot;#数据表&quot; class=&quot;headerlink&quot; title=&quot;数据表&quot;&gt;&lt;/a&gt;数据表&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    USER_TYPE = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;普通用户&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;VIP&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;SVIP&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user_type = models.IntegerField(choices=USER_TYPE, default=USER_TYPE[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    username = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserToken&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user = models.OneToOneField(UserInfo, on_delete=models.CASCADE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    token = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
      <category term="django-rest-framework" scheme="http://yoursite.com/tags/django-rest-framework/"/>
    
  </entry>
  
</feed>
