<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MoonMonsters</title>
  
  <subtitle>Do Not Repeat Yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-03-25T17:26:44.734Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_Tao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode --- 电话号码的字母组合</title>
    <link href="http://yoursite.com/2021/03/26/leetcode-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <id>http://yoursite.com/2021/03/26/leetcode-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</id>
    <published>2021-03-25T16:51:00.000Z</published>
    <updated>2021-03-25T17:26:44.734Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">电话号码的字母组合</a></p><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210326005238.png" alt=""></p><p>示例 1：</p><blockquote><p>输入：digits = “23” <br/><br>输出：[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”] <br/></p></blockquote><p>示例 2：</p><blockquote><p>输入：digits = “” <br/><br>输出：[]</p></blockquote><p>示例 3：</p><blockquote><p>输入：digits = “2” <br/><br>输出：[“a”,”b”,”c”]</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits: str)</span>:</span></span><br><span class="line">        number = &#123;</span><br><span class="line">            <span class="string">"2"</span>: [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>],</span><br><span class="line">            <span class="string">"3"</span>: [<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>],</span><br><span class="line">            <span class="string">"4"</span>: [<span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>],</span><br><span class="line">            <span class="string">"5"</span>: [<span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>],</span><br><span class="line">            <span class="string">"6"</span>: [<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>],</span><br><span class="line">            <span class="string">"7"</span>: [<span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>],</span><br><span class="line">            <span class="string">"8"</span>: [<span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>],</span><br><span class="line">            <span class="string">"9"</span>: [<span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits <span class="keyword">or</span> digits == <span class="string">"1"</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        ret = [<span class="string">""</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> digits:</span><br><span class="line">            ret = [r + n <span class="keyword">for</span> r <span class="keyword">in</span> ret <span class="keyword">for</span> n <span class="keyword">in</span> number[i]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">d = <span class="string">"23"</span></span><br><span class="line">print(s.letterCombinations(d))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/letter-combinations-of-a-pho
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode --- 三数之和</title>
    <link href="http://yoursite.com/2021/03/26/leetcode-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2021/03/26/leetcode-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-03-25T16:48:00.000Z</published>
    <updated>2021-03-25T16:50:24.290Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">三数之和</a></p><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>示例 1</p><blockquote><p>输入：nums = [-1,0,1,2,-1,-4] <br/><br>输出：[[-1,-1,2],[-1,0,1]] <br/></p></blockquote><p>示例 2</p><blockquote><p>输入：nums = [] <br/><br>输出：[] <br/></p></blockquote><p>示例 3</p><blockquote><p>输入：nums = [0] <br/><br>输出：[] <br/></p></blockquote><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSum</span><span class="params">(self, nums: list)</span> -&gt; list:</span></span><br><span class="line">        result = set()</span><br><span class="line">        nums = sorted(nums)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"></span><br><span class="line">            m = nums[i]</span><br><span class="line">            <span class="keyword">if</span> m &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            left = i + <span class="number">1</span></span><br><span class="line">            right = len(nums) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> left &lt; right:</span><br><span class="line">                n = nums[left]</span><br><span class="line">                o = nums[right]</span><br><span class="line">                <span class="keyword">if</span> m + n + o == <span class="number">0</span>:</span><br><span class="line">                    result.add(tuple(sorted([m, n, o])))</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> m + n + o &gt; <span class="number">0</span>:</span><br><span class="line">                    right -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [list(r) <span class="keyword">for</span> r <span class="keyword">in</span> result]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">ns = [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-4</span>]</span><br><span class="line">print(s.threeSum(ns))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/3sum/&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode --- 无重复字符的最长子串</title>
    <link href="http://yoursite.com/2021/03/26/leetcode-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>http://yoursite.com/2021/03/26/leetcode-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</id>
    <published>2021-03-25T16:44:00.000Z</published>
    <updated>2021-03-25T16:47:08.742Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">无重复字符的最长子串</a></p><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1</p><blockquote><p>输入: s = “abcabcbb”    <br/><br>输出: 3     <br/><br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br/></p></blockquote><p>示例 2</p><blockquote><p>输入: s = “bbbbb”<br/><br>输出: 1    <br/><br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。    <br/></p></blockquote><p>示例 3</p><blockquote><p>输入: s = “pwwkew”<br/><br>输出: 3    <br/><br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。<br/></p></blockquote><p>示例 4:</p><blockquote><p>输入: s = “” <br/><br>输出: 0</p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        temp = <span class="string">""</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ss <span class="keyword">in</span> s:</span><br><span class="line">            index = temp.find(ss)</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">-1</span>:</span><br><span class="line">                temp += ss</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = temp[index + <span class="number">1</span>:] + ss</span><br><span class="line">            <span class="keyword">if</span> len(temp) &gt; length:</span><br><span class="line">                length = len(temp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string = <span class="string">"aabaab!bb"</span></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.lengthOfLongestSubstring(string))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/longest-substring-without-re
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode --- 两数之和</title>
    <link href="http://yoursite.com/2021/03/26/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2021/03/26/leetcode-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2021-03-25T16:39:00.000Z</published>
    <updated>2021-03-25T16:43:10.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">两数之和</a></p><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例1</p><blockquote><p>输入：nums = [2,7,11,15], target = 9 <br/><br>输出：[0,1] <br/><br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br/></p></blockquote><p>示例 2：</p><blockquote><p>输入：nums = [3,2,4], target = 6 <br/><br>输出：[1,2]    <br/></p></blockquote><p>示例 3：</p><blockquote><p>输入：nums = [3,3], target = 6    <br/><br>输出：[0,1]    <br/></p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: list, target: int)</span> -&gt; list:</span></span><br><span class="line">        numDict = dict()</span><br><span class="line">        <span class="keyword">for</span> index, n <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            numDict.setdefault(n, []).append(index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            tmp = target - n</span><br><span class="line">            values = numDict.get(tmp)</span><br><span class="line">            <span class="keyword">if</span> values:</span><br><span class="line">                <span class="keyword">if</span> tmp == n:</span><br><span class="line">                    <span class="keyword">if</span> len(values) &gt;= <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">return</span> values[:<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> [numDict[n][<span class="number">0</span>], numDict[tmp][<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ns = [<span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">target = <span class="number">6</span></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.twoSum(ns, target))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/two-sum/&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode --- 旋转链表</title>
    <link href="http://yoursite.com/2021/03/07/leetcode-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2021/03/07/leetcode-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2021-03-07T08:18:00.000Z</published>
    <updated>2021-03-07T08:20:35.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">旋转链表</a></p><p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p><p>示例1</p><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2 <br/><br>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL <br/><br>解释:    <br/><br>向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL <br/><br>向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL    <br/></p></blockquote><p>示例2</p><blockquote><p>输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4    <br/><br>输出: 2-&gt;0-&gt;1-&gt;NULL    <br/><br>解释:    <br/><br>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL    <br/><br>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL    <br/><br>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL    <br/><br>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL    <br/></p></blockquote><a id="more"></a><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateRight</span><span class="params">(self, head: ListNode, k: int)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next <span class="keyword">or</span> k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        tail = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> tail:</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> tail.next:</span><br><span class="line">                tail = tail.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        target = k % length</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 构建循环链表</span></span><br><span class="line">        tail.next = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> index &lt; length - target:</span><br><span class="line">            tail = tail.next</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新的尾节点的下一个节点, 作为头结点</span></span><br><span class="line">        new_head = tail.next</span><br><span class="line">        tail.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">links</span><span class="params">(nums)</span>:</span></span><br><span class="line">    head = <span class="literal">None</span></span><br><span class="line">    cur = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            head = ListNode(n)</span><br><span class="line">            cur = head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = ListNode(n)</span><br><span class="line">            cur.next = node</span><br><span class="line">            cur = node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(head)</span>:</span></span><br><span class="line">    cur = head</span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        print(cur.val, end=<span class="string">" "</span>)</span><br><span class="line">        cur = cur.next</span><br><span class="line">    print(<span class="string">"\n"</span> + <span class="string">"-"</span> * <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    head = links(nums)</span><br><span class="line">    traverse(head)</span><br><span class="line">    s = Solution()</span><br><span class="line">    new_head = s.rotateRight(head, <span class="number">2</span>)</span><br><span class="line">    traverse(new_head)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/rotate-list/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;旋转链表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。&lt;/p&gt;
&lt;p&gt;示例1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, k = 2 &lt;br/&gt;&lt;br&gt;输出: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL &lt;br/&gt;&lt;br&gt;解释:    &lt;br/&gt;&lt;br&gt;向右旋转 1 步: 5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;NULL &lt;br/&gt;&lt;br&gt;向右旋转 2 步: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL    &lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例2&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL, k = 4    &lt;br/&gt;&lt;br&gt;输出: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL    &lt;br/&gt;&lt;br&gt;解释:    &lt;br/&gt;&lt;br&gt;向右旋转 1 步: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL    &lt;br/&gt;&lt;br&gt;向右旋转 2 步: 1-&amp;gt;2-&amp;gt;0-&amp;gt;NULL    &lt;br/&gt;&lt;br&gt;向右旋转 3 步: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL    &lt;br/&gt;&lt;br&gt;向右旋转 4 步: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL    &lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>leetcode ---  简化路径</title>
    <link href="http://yoursite.com/2021/03/07/leetcode-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2021/03/07/leetcode-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/</id>
    <published>2021-03-07T06:23:00.000Z</published>
    <updated>2021-03-07T06:31:05.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/simplify-path/" target="_blank" rel="noopener">简化路径</a></p><p>给你一个字符串 <code>path</code> ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 <code>&#39;/&#39;</code> 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点<code>（.）</code>表示当前目录本身；此外，两个点 <code>（..）</code> 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，<code>&#39;//&#39;</code>）都被视为单个斜杠 <code>&#39;/&#39;</code> 。 对于此问题，任何其他格式的点（例如，<code>&#39;...&#39;</code>）均被视为文件/目录名称。</p><p>请注意，返回的 规范路径 必须遵循下述格式：</p><ul><li>始终以斜杠 <code>&#39;/&#39;</code> 开头。</li><li>两个目录名之间必须只有一个斜杠 <code>&#39;/&#39;</code> 。</li><li>最后一个目录名（如果存在）不能 以 <code>&#39;/&#39;</code> 结尾。</li><li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。</li></ul><p>返回简化后得到的 规范路径 。</p><a id="more"></a><p>示例1</p><blockquote><p>输入：path = “/home/“<br/><br>输出：”/home” <br/><br>解释：注意，最后一个目录名后面没有斜杠。<br/></p></blockquote><p>示例2</p><blockquote><p>输入：path = “/../“ <br/><br>输出：”/“    <br/><br>解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。<br/></p></blockquote><p>示例3</p><blockquote><p>输入：path = “/home//foo/“ <br/><br>输出：”/home/foo” <br/><br>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。 <br/></p></blockquote><p>示例4</p><blockquote><p>输入：path = “/a/./b/../../c/“ <br/><br>输出：”/c” <br/></p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>直接用栈处理, 如果是返回上一层<code>..</code>则出栈, 如果是本层<code>.</code>则不处理, 否则入栈.</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">simplifyPath</span><span class="params">(self, path: str)</span> -&gt; str:</span></span><br><span class="line">        stack = list()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> path.split(<span class="string">"/"</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> p == <span class="string">"."</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> p == <span class="string">".."</span>:</span><br><span class="line">                <span class="keyword">if</span> stack:</span><br><span class="line">                    stack.pop(<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(p)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">            result = <span class="string">"/"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="string">"/"</span>.join(stack)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result.startswith(<span class="string">"/"</span>):</span><br><span class="line">            result = <span class="string">"/"</span> + result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">path = <span class="string">"/../"</span></span><br><span class="line">print(s.simplifyPath(path))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/simplify-path/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简化路径&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个字符串 &lt;code&gt;path&lt;/code&gt; ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 &lt;code&gt;&amp;#39;/&amp;#39;&lt;/code&gt; 开头），请你将其转化为更加简洁的规范路径。&lt;/p&gt;
&lt;p&gt;在 Unix 风格的文件系统中，一个点&lt;code&gt;（.）&lt;/code&gt;表示当前目录本身；此外，两个点 &lt;code&gt;（..）&lt;/code&gt; 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，&lt;code&gt;&amp;#39;//&amp;#39;&lt;/code&gt;）都被视为单个斜杠 &lt;code&gt;&amp;#39;/&amp;#39;&lt;/code&gt; 。 对于此问题，任何其他格式的点（例如，&lt;code&gt;&amp;#39;...&amp;#39;&lt;/code&gt;）均被视为文件/目录名称。&lt;/p&gt;
&lt;p&gt;请注意，返回的 规范路径 必须遵循下述格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;始终以斜杠 &lt;code&gt;&amp;#39;/&amp;#39;&lt;/code&gt; 开头。&lt;/li&gt;
&lt;li&gt;两个目录名之间必须只有一个斜杠 &lt;code&gt;&amp;#39;/&amp;#39;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;最后一个目录名（如果存在）不能 以 &lt;code&gt;&amp;#39;/&amp;#39;&lt;/code&gt; 结尾。&lt;/li&gt;
&lt;li&gt;此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回简化后得到的 规范路径 。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>redis分布式锁实现</title>
    <link href="http://yoursite.com/2021/02/24/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2021/02/24/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-02-24T15:16:00.000Z</published>
    <updated>2021-02-24T15:25:06.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是分布式锁"><a href="#什么是分布式锁" class="headerlink" title="什么是分布式锁"></a>什么是分布式锁</h3><p>我们在开发应用的时候，如果需要对某一个共享变量进行多线程同步访问的时候，可以使用我们学到的锁进行处理，并且可以完美的运行，毫无Bug！</p><p>注意这是单机应用，后来业务发展，需要做集群，一个应用需要部署到几台机器上然后做负载均衡，大致如下图：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224231757.png" alt=""></p><p>上图可以看到，变量A存在三个服务器内存中（这个变量A主要体现是在一个类中的一个成员变量，是一个有状态的对象），如果不加任何控制的话，变量A同时都会在分配一块内存，三个请求发过来同时对这个变量操作，显然结果是不对的！即使不是同时发过来，三个请求分别操作三个不同内存区域的数据，变量A之间不存在共享，也不具有可见性，处理的结果也是不对的！</p><p>如果我们业务中确实存在这个场景的话，我们就需要一种方法解决这个问题！</p><p>为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用并发处理相关的功能进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的应用并不能提供分布式锁的能力。为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁应该具备哪些条件：</p><blockquote></blockquote><ul><li>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；</li><li>高可用的获取锁与释放锁；</li><li>高性能的获取锁与释放锁；</li><li>具备可重入特性；</li><li>具备锁失效机制，防止死锁；</li><li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败</li></ul><a id="more"></a><h3 id="基于redis实现分布式锁"><a href="#基于redis实现分布式锁" class="headerlink" title="基于redis实现分布式锁"></a>基于redis实现分布式锁</h3><h4 id="选用Redis实现分布式锁原因"><a href="#选用Redis实现分布式锁原因" class="headerlink" title="选用Redis实现分布式锁原因"></a>选用Redis实现分布式锁原因</h4><ul><li>Redis有很高的性能；</li><li>Redis命令对此支持较好，实现起来比较方便</li></ul><h4 id="使用命令介绍："><a href="#使用命令介绍：" class="headerlink" title="使用命令介绍："></a>使用命令介绍：</h4><ul><li>SETNX</li></ul><p><code>SETNX key val</code>：当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0。</p><ul><li>expire</li></ul><p><code>expire key timeout</code>：为key设置一个超时时间，单位为second，超过这个时间锁会自动释放，避免死锁。</p><ul><li>delete</li></ul><p><code>delete key</code>：删除key</p><p>在使用Redis实现分布式锁的时候，主要就会使用到这三个命令。</p><h4 id="实现思想："><a href="#实现思想：" class="headerlink" title="实现思想："></a>实现思想：</h4><ul><li><p>获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。</p></li><li><p>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</p></li><li><p>释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放。</p></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, client, lock_name, acquire_time=<span class="number">5</span>, time_out=<span class="number">5</span>)</span>:</span></span><br><span class="line">        self._client: redis.Redis = client</span><br><span class="line">        self._lock_name = lock_name</span><br><span class="line">        self._acquire_time = acquire_time</span><br><span class="line">        self._time_out = time_out</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">acquire</span><span class="params">(self)</span>:</span></span><br><span class="line">        identifier = str(uuid.uuid4())</span><br><span class="line">        <span class="comment"># 最大获取锁的时间</span></span><br><span class="line">        end = time.time() + self._acquire_time</span><br><span class="line">        <span class="comment"># 超过获取锁的最大时间, 那么获取锁失败</span></span><br><span class="line">        <span class="keyword">while</span> time.time() &lt; end:</span><br><span class="line">            <span class="comment"># 判断是否获取锁成功</span></span><br><span class="line">            <span class="keyword">if</span> self._client.setnx(self._lock_name, identifier):</span><br><span class="line">                <span class="comment"># 设置锁的过期时间, 防止进程崩溃导致其他进程无法获取锁</span></span><br><span class="line">                self._client.expire(self._lock_name, self._time_out)</span><br><span class="line">                <span class="keyword">return</span> identifier</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> self._client.ttl(self._lock_name):</span><br><span class="line">                self._client.expire(self._lock_name, self._time_out)</span><br><span class="line">            time.sleep(<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">release</span><span class="params">(self, identifier)</span>:</span></span><br><span class="line">        pipe = self._client.pipeline(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 用于监视一个(或多个) key ，</span></span><br><span class="line">                <span class="comment"># 如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断</span></span><br><span class="line">                pipe.watch(self._lock_name)</span><br><span class="line">                lock_value = self._client.get(self._lock_name)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> lock_value:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 原子处理, 删除加锁值</span></span><br><span class="line">                <span class="keyword">if</span> lock_value.decode() == identifier:</span><br><span class="line">                    <span class="comment"># 用于标记一个事务块的开始</span></span><br><span class="line">                    pipe.multi()</span><br><span class="line">                    <span class="comment"># 删除用来加锁的值</span></span><br><span class="line">                    pipe.delete(self._lock_name)</span><br><span class="line">                    <span class="comment"># 事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 EXEC 命令原子性(atomic)地执行。</span></span><br><span class="line">                    pipe.execute()</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                pipe.unwatch()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> redis.exceptions.WatchError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(thread_name)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line"></span><br><span class="line">    client = redis.Redis(host=<span class="string">"localhost"</span>, port=<span class="number">6379</span>, db=<span class="number">10</span>)</span><br><span class="line">    lock = RedisLock(client, <span class="string">"test-redis-lock"</span>)</span><br><span class="line"></span><br><span class="line">    identifier = lock.acquire()</span><br><span class="line">    print(<span class="string">"线程:&#123;&#125;获取了锁"</span>.format(thread_name))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> count &lt; <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">"线程:&#123;&#125;的count值小于1了"</span>.format(thread_name))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    print(<span class="string">"线程:&#123;&#125;抢到了票, 还剩下&#123;&#125;张票"</span>.format(thread_name, count))</span><br><span class="line">    lock.release(identifier)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    threads = [Thread(target=test, args=(<span class="string">"thread-&#123;&#125;"</span>.format(i),)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>)]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><p>当然, 这个是自己手动实现的.<br>往上也已经有很好用的三方库可以直接使用了.<br><a href="https://pypi.org/project/python-redis-lock/" target="_blank" rel="noopener">python-redis-lock 3.7.0</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/112016634" target="_blank" rel="noopener">Python 使用 Redis 实现分布式锁</a><br><a href="https://www.cnblogs.com/chengege/p/11074055.html" target="_blank" rel="noopener">Redis分布式锁的python实现</a><br><a href="https://www.cnblogs.com/angelyan/p/11523846.html" target="_blank" rel="noopener">python基于redis实现分布式锁</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是分布式锁&quot;&gt;&lt;a href=&quot;#什么是分布式锁&quot; class=&quot;headerlink&quot; title=&quot;什么是分布式锁&quot;&gt;&lt;/a&gt;什么是分布式锁&lt;/h3&gt;&lt;p&gt;我们在开发应用的时候，如果需要对某一个共享变量进行多线程同步访问的时候，可以使用我们学到的锁进行处理，并且可以完美的运行，毫无Bug！&lt;/p&gt;
&lt;p&gt;注意这是单机应用，后来业务发展，需要做集群，一个应用需要部署到几台机器上然后做负载均衡，大致如下图：&lt;br&gt;&lt;img src=&quot;https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224231757.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图可以看到，变量A存在三个服务器内存中（这个变量A主要体现是在一个类中的一个成员变量，是一个有状态的对象），如果不加任何控制的话，变量A同时都会在分配一块内存，三个请求发过来同时对这个变量操作，显然结果是不对的！即使不是同时发过来，三个请求分别操作三个不同内存区域的数据，变量A之间不存在共享，也不具有可见性，处理的结果也是不对的！&lt;/p&gt;
&lt;p&gt;如果我们业务中确实存在这个场景的话，我们就需要一种方法解决这个问题！&lt;/p&gt;
&lt;p&gt;为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用并发处理相关的功能进行互斥控制。但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的应用并不能提供分布式锁的能力。为了解决这个问题就需要一种跨机器的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！&lt;/p&gt;
&lt;p&gt;分布式锁应该具备哪些条件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；&lt;/li&gt;
&lt;li&gt;高可用的获取锁与释放锁；&lt;/li&gt;
&lt;li&gt;高性能的获取锁与释放锁；&lt;/li&gt;
&lt;li&gt;具备可重入特性；&lt;/li&gt;
&lt;li&gt;具备锁失效机制，防止死锁；&lt;/li&gt;
&lt;li&gt;具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>三方库推荐</title>
    <link href="http://yoursite.com/2021/02/24/%E4%B8%89%E6%96%B9%E5%BA%93%E6%8E%A8%E8%8D%90/"/>
    <id>http://yoursite.com/2021/02/24/%E4%B8%89%E6%96%B9%E5%BA%93%E6%8E%A8%E8%8D%90/</id>
    <published>2021-02-24T14:28:49.000Z</published>
    <updated>2021-02-24T14:29:31.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><a href="https://pypi.org/project/python-redis-lock/" target="_blank" rel="noopener">python-redis-lock 3.7.0, redis分布式锁</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://pypi.org/project/python-redis-lock/&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[转]利用 Linux 指令分析 Web 日志</title>
    <link href="http://yoursite.com/2021/02/24/%E8%BD%AC-%E5%88%A9%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90-Web-%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2021/02/24/%E8%BD%AC-%E5%88%A9%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90-Web-%E6%97%A5%E5%BF%97/</id>
    <published>2021-02-24T14:08:00.000Z</published>
    <updated>2021-02-24T15:25:25.933Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=478#/detail/pc?id=4617" target="_blank" rel="noopener">高级技巧之日志分析：利用 Linux 指令分析 Web 日志</a></p><h3 id="第一步：能不能这样做？"><a href="#第一步：能不能这样做？" class="headerlink" title="第一步：能不能这样做？"></a>第一步：能不能这样做？</h3><p>当我们想要分析一个线上文件的时候，首先要思考，能不能这样做？ 这里你可以先用<code>htop</code>指令看一下当前的负载。如果你的机器上没有<code>htop</code>，可以考虑用<code>yum</code>或者<code>apt</code>去安装。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224220935.png" alt=""></p><p>如上图所示，我的机器上 8 个 CPU 都是 0 负载，2G的内存用了一半多，还有富余。 我们用<code>wget</code>将目标文件下载到本地（如果你没有 wget，可以用yum或者apt安装）。</p><blockquote><pre><code>wget 某网址（自己替代）</code></pre></blockquote><p>然后我们用ls查看文件大小。发现这只是一个 7M 的文件，因此对线上的影响可以忽略不计。如果文件太大，建议你用scp指令将文件拷贝到闲置服务器再分析。下图中我使用了<code>--block-size</code>让<code>ls</code>以<code>M</code>为单位显示文件大小。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221141.png" alt=""><br>确定了当前机器的CPU和内存允许我进行分析后，我们就可以开始第二步操作了。</p><h3 id="第二步：LESS-日志文件"><a href="#第二步：LESS-日志文件" class="headerlink" title="第二步：LESS 日志文件"></a>第二步：LESS 日志文件</h3><p>在分析日志前，给你提个醒，记得要<code>less</code>一下，看看日志里面的内容。之前我们说过，尽量使用<code>less</code>这种不需要读取全部文件的指令，因为在线上执行<code>cat</code>是一件非常危险的事情，这可能导致线上服务器资源不足。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221407.png" alt=""><br>如上图所示，我们看到<code>nginx</code>的<code>access_log</code>每一行都是一次用户的访问，从左到右依次是：</p><ul><li>IP 地址；</li><li>时间；</li><li>HTTP 请求的方法、路径和协议版本、返回的状态码；</li><li>User Agent。</li></ul><a id="more"></a><h3 id="第三步：PV-分析"><a href="#第三步：PV-分析" class="headerlink" title="第三步：PV 分析"></a>第三步：PV 分析</h3><p><code>PV（Page View）</code>，用户每访问一个页面就是一次Page View。对于nginx的acess_log来说，分析 PV 非常简单，我们直接使用<code>wc -l</code>就可以看到整体的<code>PV</code>。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221531.png" alt=""><br>如上图所示：我们看到了一共有 51462 条 PV。</p><h3 id="第四步：PV-分组"><a href="#第四步：PV-分组" class="headerlink" title="第四步：PV 分组"></a>第四步：PV 分组</h3><p>通常一个日志中可能有几天的 PV，为了得到更加直观的数据，有时候需要按天进行分组。为了简化这个问题，我们先来看看日志中都有哪些天的日志。</p><p>使用<code>awk &#39;{print $4}&#39; access.log  | less</code>可以看到如下结果。<code>awk</code>是一个处理文本的领域专有语言。这里就牵扯到领域专有语言这个概念，英文是Domain Specific Language。领域专有语言，就是为了处理某个领域专门设计的语言。比如awk是用来分析处理文本的DSL，html是专门用来描述网页的DSL，SQL是专门用来查询数据的DSL……大家还可以根据自己的业务设计某种针对业务的DSL。</p><p>你可以看到我们用<code>$4</code>代表文本的第 4 列，也就是时间所在的这一列，如下图所示：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221707.png" alt=""><br>我们想要按天统计，可以利用 awk提供的字符串截取的能力。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221724.png" alt=""><br>上图中，我们使用<code>awk</code>的<code>substr</code>函数，数字<code>2</code>代表从第 2 个字符开始，数字11代表截取 11 个字符。</p><p>接下来我们就可以分组统计每天的日志条数了。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221752.png" alt=""></p><p>上图中，使用<code>sort</code>进行排序，然后使用<code>uniq -c</code>进行统计。你可以看到从 2015 年 5 月 17 号一直到 6 月 4 号的日志，还可以看到每天的 PV 量大概是在 2000~3000 之间。</p><h3 id="第五步：分析-UV"><a href="#第五步：分析-UV" class="headerlink" title="第五步：分析 UV"></a>第五步：分析 UV</h3><p>接下来我们分析 UV。<code>UV（Uniq Visitor）</code>，也就是统计访问人数。通常确定用户的身份是一个复杂的事情，但是我们可以用 <code>IP</code> 访问来近似统计 UV。<br><a href="https://s0.lgstatic.com/i/image/M00/5C/74/Ciqc1F-BkNeAam2YAACxCjlKsvc488.png" target="_blank" rel="noopener">https://s0.lgstatic.com/i/image/M00/5C/74/Ciqc1F-BkNeAam2YAACxCjlKsvc488.png</a><br><img src="/images/pasted-1.png" alt="upload successful"></p><p>上图中，我们使用 <code>awk</code> 去打印<code>$1</code>也就是第一列，接着<code>sort</code>排序，然后用uniq去重，最后用<code>wc -l</code>查看条数。 这样我们就知道日志文件中一共有2660个 IP，也就是2660个 UV。</p><h3 id="第六步：分组分析-UV"><a href="#第六步：分组分析-UV" class="headerlink" title="第六步：分组分析 UV"></a>第六步：分组分析 UV</h3><p>接下来我们尝试按天分组分析每天的 UV 情况。这个情况比较复杂，需要较多的指令，我们先创建一个叫作sum.sh的bash脚本文件，写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line">awk '&#123;print substr($4, 2, 11) " " $1&#125;' access.log |\</span><br><span class="line">    sort | uniq |\</span><br><span class="line">    awk '&#123;uv[$1]++;next&#125;END&#123;for (ip in uv) print ip, uv[ip]&#125;'</span><br></pre></td></tr></table></figure><p>具体分析如下。</p><ul><li>文件首部我们使用#!，表示我们将使用后面的/usr/bin/bash执行这个文件。</li><li>第一次awk我们将第 4 列的日期和第 1 列的ip地址拼接在一起。</li><li>下面的sort是把整个文件进行一次字典序排序，相当于先根据日期排序，再根据 IP 排序。</li><li>接下来我们用uniq去重，日期 +IP 相同的行就只保留一个。</li><li>最后的awk我们再根据第 1 列的时间和第 2 列的 IP 进行统计。</li></ul><p>为了理解最后这一行描述，我们先来简单了解下<code>awk</code>的原理。</p><p><code>awk</code>本身是逐行进行处理的。因此我们的<code>next</code>关键字是提醒<code>awk</code>跳转到下一行输入。 对每一行输入，awk会根据第 1 列的字符串（也就是日期）进行累加。之后的<code>END</code>关键字代表一个触发器，就是 END 后面用 {} 括起来的语句会在所有输入都处理完之后执行——当所有输入都执行完，结果被累加到<code>uv</code>中后，通过<code>foreach</code>遍历<code>uv</code>中所有的<code>key</code>，去打印<code>ip</code>和<code>ip对应的数量</code>。</p><p>编写完上面的脚本之后，我们保存退出编辑器。接着执行<code>chmod +x ./sum.sh</code>，给<code>sum.sh</code>增加执行权限。然后我们可以像下图这样执行，获得结果：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224222148.png" alt=""></p><p>如上图，IP地址已经按天进行统计好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://kaiwu.lagou.com/course/courseInfo.htm?courseId=478#/detail/pc?id=4617&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;高级技巧之日志分析：利用 Linux 指令分析 Web 日志&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一步：能不能这样做？&quot;&gt;&lt;a href=&quot;#第一步：能不能这样做？&quot; class=&quot;headerlink&quot; title=&quot;第一步：能不能这样做？&quot;&gt;&lt;/a&gt;第一步：能不能这样做？&lt;/h3&gt;&lt;p&gt;当我们想要分析一个线上文件的时候，首先要思考，能不能这样做？ 这里你可以先用&lt;code&gt;htop&lt;/code&gt;指令看一下当前的负载。如果你的机器上没有&lt;code&gt;htop&lt;/code&gt;，可以考虑用&lt;code&gt;yum&lt;/code&gt;或者&lt;code&gt;apt&lt;/code&gt;去安装。&lt;br&gt;&lt;img src=&quot;https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224220935.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，我的机器上 8 个 CPU 都是 0 负载，2G的内存用了一半多，还有富余。 我们用&lt;code&gt;wget&lt;/code&gt;将目标文件下载到本地（如果你没有 wget，可以用yum或者apt安装）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;wget 某网址（自己替代）&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;然后我们用ls查看文件大小。发现这只是一个 7M 的文件，因此对线上的影响可以忽略不计。如果文件太大，建议你用scp指令将文件拷贝到闲置服务器再分析。下图中我使用了&lt;code&gt;--block-size&lt;/code&gt;让&lt;code&gt;ls&lt;/code&gt;以&lt;code&gt;M&lt;/code&gt;为单位显示文件大小。&lt;br&gt;&lt;img src=&quot;https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221141.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;确定了当前机器的CPU和内存允许我进行分析后，我们就可以开始第二步操作了。&lt;/p&gt;
&lt;h3 id=&quot;第二步：LESS-日志文件&quot;&gt;&lt;a href=&quot;#第二步：LESS-日志文件&quot; class=&quot;headerlink&quot; title=&quot;第二步：LESS 日志文件&quot;&gt;&lt;/a&gt;第二步：LESS 日志文件&lt;/h3&gt;&lt;p&gt;在分析日志前，给你提个醒，记得要&lt;code&gt;less&lt;/code&gt;一下，看看日志里面的内容。之前我们说过，尽量使用&lt;code&gt;less&lt;/code&gt;这种不需要读取全部文件的指令，因为在线上执行&lt;code&gt;cat&lt;/code&gt;是一件非常危险的事情，这可能导致线上服务器资源不足。&lt;br&gt;&lt;img src=&quot;https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221407.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;如上图所示，我们看到&lt;code&gt;nginx&lt;/code&gt;的&lt;code&gt;access_log&lt;/code&gt;每一行都是一次用户的访问，从左到右依次是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP 地址；&lt;/li&gt;
&lt;li&gt;时间；&lt;/li&gt;
&lt;li&gt;HTTP 请求的方法、路径和协议版本、返回的状态码；&lt;/li&gt;
&lt;li&gt;User Agent。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode - 合并区间</title>
    <link href="http://yoursite.com/2021/02/02/leetcode-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2021/02/02/leetcode-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</id>
    <published>2021-02-01T16:36:56.000Z</published>
    <updated>2021-02-01T16:38:32.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">合并区间</a></p><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals &#x3D; [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">输出：[[1,6],[8,10],[15,18]]</span><br><span class="line">解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals &#x3D; [[1,4],[4,5]]</span><br><span class="line">输出：[[1,5]]</span><br><span class="line">解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; intervals.length &lt;&#x3D; 10^4</span><br><span class="line">intervals[i].length &#x3D;&#x3D; 2</span><br><span class="line">0 &lt;&#x3D; starti &lt;&#x3D; endi &lt;&#x3D; 10^4</span><br></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, intervals)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type intervals: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        intervals = sorted(intervals, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">        current = intervals[<span class="number">0</span>]</span><br><span class="line">        rv = list()</span><br><span class="line">        <span class="keyword">for</span> inter <span class="keyword">in</span> intervals[<span class="number">1</span>:]:</span><br><span class="line">            <span class="comment"># 如果无法合并的话, 那么将前一个区间放入列表</span></span><br><span class="line">            <span class="comment"># current移动到后一个区间上</span></span><br><span class="line">            <span class="keyword">if</span> current[<span class="number">1</span>] &lt; inter[<span class="number">0</span>]:</span><br><span class="line">                rv.append(current)</span><br><span class="line">                current = inter</span><br><span class="line">            <span class="comment"># 前一个区间的较大值, 在后一个区间范围内</span></span><br><span class="line">            <span class="comment"># 合并两个区间, 但此时不将current放入列表, 需要继续合并</span></span><br><span class="line">            <span class="keyword">elif</span> inter[<span class="number">0</span>] &lt;= current[<span class="number">1</span>] &lt;= inter[<span class="number">1</span>]:</span><br><span class="line">                current = [current[<span class="number">0</span>], inter[<span class="number">1</span>]]</span><br><span class="line">            <span class="comment"># 前一个区间包括了后一个区间, 不做处理</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        rv.append(current)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    i = [[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">6</span>], [<span class="number">8</span>, <span class="number">10</span>], [<span class="number">15</span>, <span class="number">18</span>]]</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.merge(i))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-intervals/&quot; target=&quot;_b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构 - 最小栈的实现</title>
    <link href="http://yoursite.com/2021/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2021/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-01-31T10:59:00.000Z</published>
    <updated>2021-01-31T11:02:39.649Z</updated>
    
    <content type="html"><![CDATA[<p>题目:<br>实现一个栈, 该栈带有出栈(pop), 入栈(push), 取最小元素(get_min)三个方法, 并且保证三个方法的时间复杂度都是O(1).<br>注: 只是需要通过get_min获取到最小元素, 并不是说pop出来的要是最小元素.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    最小栈的实现</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 主栈, 存储所有数据</span></span><br><span class="line">        self.stack = list()</span><br><span class="line">        <span class="comment"># 辅助栈, 保存最小值列表</span></span><br><span class="line">        self.bak_stack = list()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        入栈</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack) == <span class="number">0</span>:</span><br><span class="line">            self.stack.append(element)</span><br><span class="line">            self.bak_stack.append(element)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.stack.append(element)</span><br><span class="line">        <span class="comment"># 栈顶元素</span></span><br><span class="line">        top = self.bak_stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 如果辅助栈的栈顶元素大于入职元素, 那么就说明入栈元素是新的最小值</span></span><br><span class="line">        <span class="comment"># 放入辅助栈的栈顶</span></span><br><span class="line">        <span class="keyword">if</span> top &gt;= element:</span><br><span class="line">            self.bak_stack.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(self.stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        top = self.stack.pop(<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 如果当前主栈的栈顶元素和辅助栈的一致, 那么也需要将辅助栈的栈顶pop掉</span></span><br><span class="line">        <span class="keyword">if</span> top == self.bak_stack[<span class="number">-1</span>]:</span><br><span class="line">            self.bak_stack.pop(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> top</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_min</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(self.bak_stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取最小元素时, 直接从辅助栈中获取</span></span><br><span class="line">        <span class="keyword">return</span> self.bak_stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_print</span><span class="params">(_ms: MinStack)</span>:</span></span><br><span class="line">    print(<span class="string">"抛出栈顶元素: %s, 当前数组: %s, 最小元素: %s"</span> % (_ms.pop(), _ms.stack, _ms.get_min()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    array = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">7</span>)]</span><br><span class="line">    array.append(array[<span class="number">3</span>])</span><br><span class="line">    array.append(<span class="number">-1</span>)</span><br><span class="line">    array.append(array[<span class="number">4</span>])</span><br><span class="line">    array.append(<span class="number">-1</span>)</span><br><span class="line">    print(<span class="string">"初始化数组: "</span>, array)</span><br><span class="line">    ms = MinStack()</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> array:</span><br><span class="line">        ms.push(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        _print(ms)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">初始化数组:  [80, 65, 4, 52, 90, 37, 70, 52, -1, 90, -1]</span><br><span class="line">抛出栈顶元素: -1, 当前数组: [80, 65, 4, 52, 90, 37, 70, 52, -1, 90], 最小元素: -1</span><br><span class="line">抛出栈顶元素: 90, 当前数组: [80, 65, 4, 52, 90, 37, 70, 52, -1], 最小元素: -1</span><br><span class="line">抛出栈顶元素: -1, 当前数组: [80, 65, 4, 52, 90, 37, 70, 52], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 52, 当前数组: [80, 65, 4, 52, 90, 37, 70], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 70, 当前数组: [80, 65, 4, 52, 90, 37], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 37, 当前数组: [80, 65, 4, 52, 90], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 90, 当前数组: [80, 65, 4, 52], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 52, 当前数组: [80, 65, 4], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 4, 当前数组: [80, 65], 最小元素: 65</span><br><span class="line">抛出栈顶元素: 65, 当前数组: [80], 最小元素: 80</span><br><span class="line">抛出栈顶元素: 80, 当前数组: [], 最小元素: None</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目:&lt;br&gt;实现一个栈, 该栈带有出栈(pop), 入栈(push), 取最小元素(get_min)三个方法, 并且保证三个方法的时间复杂度都是O(1).&lt;br&gt;注: 只是需要通过get_min获取到最小元素, 并不是说pop出来的要是最小元素.&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]django - QuerySet特性及高级使用技巧，如何减少数据库的访问</title>
    <link href="http://yoursite.com/2021/01/30/django-QuerySet%E7%89%B9%E6%80%A7%E5%8F%8A%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%8C%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2021/01/30/django-QuerySet%E7%89%B9%E6%80%A7%E5%8F%8A%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%8C%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BF%E9%97%AE/</id>
    <published>2021-01-30T08:34:00.000Z</published>
    <updated>2021-02-01T05:34:53.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/OyJy6Do4_4eA7tMXU0NlZQ" target="_blank" rel="noopener">QuerySet特性及高级使用技巧，如何减少数据库的访问，节省内存，提升网站性能。</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>对于中大型网站或Web APP而言，最影响网站性能的就是数据库查询部分了。一是因为反复从数据库读写数据很消耗时间和计算资源，二是当返回的查询数据集queryset非常大时还会占据很多内存。</p><h3 id="什么是QuerySet"><a href="#什么是QuerySet" class="headerlink" title="什么是QuerySet"></a>什么是QuerySet</h3><p>QuerySet是Django提供的强大的数据库接口(API)。正是因为通过它，我们可以使用filter, exclude, get等方法进行数据库查询，而不需要使用原始的SQL语言与数据库进行交互。从数据库中查询出来的结果一般是一个集合，这个集合叫就做 queryset。</p><h3 id="Django的QuerySet是惰性的"><a href="#Django的QuerySet是惰性的" class="headerlink" title="Django的QuerySet是惰性的"></a>Django的QuerySet是惰性的</h3><p>Django的QuerySet是惰性的。下例中article_list试图从数据库查询一个标题含有django的全部文章列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br></pre></td></tr></table></figure><p>但是当我们定义article_list的时候，Django的数据接口QuerySet并没有对数据库进行任何查询。无论你加多少过滤条件，Django都不会对数据库进行查询。只有当你需要对article_list做进一步运算时（比如打印出查询结果，判断是否存在，统计查询结果长度)，Django才会真正执行对数据库的查询(见下例1)。这个过程被称为queryset的<code>执行(evaluation)</code>。Django这样设计的本意是尽量减少对数据库的无效操作，比如查询了结果而不用是计算资源的很大浪费。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example 1</span></span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">    print(article.title)</span><br></pre></td></tr></table></figure><h3 id="Django的QuerySet自带缓存-Cache"><a href="#Django的QuerySet自带缓存-Cache" class="headerlink" title="Django的QuerySet自带缓存(Cache)"></a>Django的QuerySet自带缓存(Cache)</h3><p>在例1中，当你遍历queryset(article_list)时，所有匹配的记录会从数据库获取。这些结果会载入内存并保存在queryset内置的cache中。这样如果你再次遍历或读取这个article_list时，Django就不需要重复查询了，这样也可以减少对数据库的查询。</p><p>下例中例2比例3要好，因为在你打印文章标题后，Django不仅执行了查询，还把查询到的article_list放在了缓存里。这个article_list是可以复用的。例3就不行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 2: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">    print(article.title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 3: Bad</span></span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> Article.objects.filter(title__contains=<span class="string">"django"</span>):</span><br><span class="line">    print(article.title)</span><br></pre></td></tr></table></figure><h3 id="用if也会导致queryset的执行"><a href="#用if也会导致queryset的执行" class="headerlink" title="用if也会导致queryset的执行"></a>用if也会导致queryset的执行</h3><p>不知道你注意到上述例2中有个问题没有？万一article_list是个空数据集呢? 虽然for….in…用到空集合上也不会出现raise什么错误，但专业优秀的我们怎么能允许这样的低级事情发生呢？最好的做法就是在loop前加个if判断（例4）。因为django会对执行过的queryset进行缓存(if也会导致queryset执行, 缓存article_list)，所以我们在遍历article_list时不用担心Django会对数据库进行二次查询。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 4: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br><span class="line"><span class="keyword">if</span> article_list:</span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">        print(article.title)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No records"</span>)</span><br></pre></td></tr></table></figure><p>但有时我们只希望了解查询的结果是否存在，而不需要使用整个数据集，这时if触发整个queryset的缓存变成了一件坏事情。哎，程序员要担心的事情着不少。这时你可以用exists()方法。与if判断不同，exists只会检查查询结果是否存在，返回True或False，而不会缓存article_list(见例5）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 5: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br><span class="line"><span class="keyword">if</span> article_list.exists():</span><br><span class="line">    print(<span class="string">"Records found."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No records"</span>)</span><br></pre></td></tr></table></figure><p><code>注意</code>: 判断查询结果是否存在到底用if还是exists取决于你是否希望缓存查询数据集复用，如果是用if，反之用exists。</p><h3 id="统计查询结果数量优选count方法"><a href="#统计查询结果数量优选count方法" class="headerlink" title="统计查询结果数量优选count方法"></a>统计查询结果数量优选count方法</h3><p><code>len()</code>与<code>count()</code>均能统计查询结果的数量。一般来说count更快，因为它是<code>从数据库层面直接获取查询结果的数量</code>，而不是返回整个数据集，而len会导致queryset的执行，需要将整个queryset载入内存后才能统计其长度。但事情也没有绝对，如果<code>数据集queryset已经在缓存里了，使用len更快</code>，因为它不需要跟数据库再次打交道。</p><p>下面三个例子中，只有例7最差，尽量不要用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 6: Good</span></span><br><span class="line">count = Article.objects.filter(title__contains=<span class="string">"django"</span>).count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 7:Bad</span></span><br><span class="line">count = Article.objects.filter(title__contains=<span class="string">"django"</span>).len()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 8: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br><span class="line"><span class="keyword">if</span> article_list:</span><br><span class="line">    print(<span class="string">"&#123;&#125; records found."</span>.format(article_list.len()))</span><br></pre></td></tr></table></figure><h3 id="当queryset非常大时，数据请按需去取"><a href="#当queryset非常大时，数据请按需去取" class="headerlink" title="当queryset非常大时，数据请按需去取"></a>当queryset非常大时，数据请按需去取</h3><p>当查询到的queryset的非常大时，会大量占用内存(缓存)。我们可以使用<code>values</code>和<code>value_list</code>方法按需提取数据。比如例1中我们只需要打印文章标题，这时我们完全没有必要把每篇文章对象的全部信息都提取出来载入到内存中。我们可以做如下改进（例9）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 9: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>).values(<span class="string">'title'</span>)</span><br><span class="line"><span class="keyword">if</span> article_list:</span><br><span class="line">    print(article.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>).values_list(<span class="string">'id'</span>, <span class="string">'title'</span>)</span><br><span class="line"><span class="keyword">if</span> article_list:</span><br><span class="line">    print(article.title)</span><br></pre></td></tr></table></figure><p><code>注意</code>: values和values_list返回的是字典形式字符串数据，而不是对象集合。如果不理解请不要乱用。<br>另外还可以使用iterator()方法可以优化程序对内存的使用，其工作原理是不对queryset进行缓存，而是采用迭代方法逐一返回查询结果，但这有时会增加数据库的访问次数，新手一般也驾驭不了。</p><h3 id="更新数据库部分字段请用update方法"><a href="#更新数据库部分字段请用update方法" class="headerlink" title="更新数据库部分字段请用update方法"></a>更新数据库部分字段请用update方法</h3><p>如果需要对数据库中的某条已有数据或某些字段进行更新，更好的方式是用update，而不是save方法。我们现在可以对比下面两个案例。例10中需要把整个Article对象的数据(标题，正文…..)先提取出来，缓存到内存中，变更信息后再写入数据库。而例11直接对标题做了更新，不需要把整个文章对象的数据载入内存，显然更高效。尽管单篇文章占用内存不多，但是万一用户非常多呢，那么占用的内存加起来也是很恐怖的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 10: Bad</span></span><br><span class="line">article = Article.objects.get(id=<span class="number">10</span>)</span><br><span class="line">Article.title = <span class="string">"Django"</span></span><br><span class="line">article.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 11: Good</span></span><br><span class="line">Article.objects.filter(id=<span class="number">10</span>).update(title=<span class="string">'Django'</span>)</span><br></pre></td></tr></table></figure><p>update方法还会返回已更新条目的数量，这点也非常有用。当然事情也没有绝对，save方法对于单个模型的更新还是很有优势的，比如save(commit=False), article.author = request.user等等事情update都做不来。</p><h3 id="专业地使用explain方法"><a href="#专业地使用explain方法" class="headerlink" title="专业地使用explain方法"></a>专业地使用explain方法</h3><p>Django 2.1中QuerySet新增了explain方法，可以统计一个查询所消耗的执行时间。这可以帮助程序员更好地优化查询结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(Blog.objects.filter(title=<span class="string">'My Blog'</span>).explain(verbose=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">Seq Scan on public.blog  (cost=<span class="number">0.00</span>.<span class="number">.35</span><span class="number">.50</span> rows=<span class="number">10</span> width=<span class="number">12</span>) (actual time=<span class="number">0.004</span>.<span class="number">.0</span><span class="number">.004</span> rows=<span class="number">10</span> loops=<span class="number">1</span>)</span><br><span class="line">  Output: id, title</span><br><span class="line">  Filter: (blog.title = <span class="string">'My Blog'</span>::bpchar)</span><br><span class="line">Planning time: <span class="number">0.064</span> ms</span><br><span class="line">Execution time: <span class="number">0.058</span> ms</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Django QuerySet的惰性和缓存特性对于减少数据库的访问次数非常有用。你需要根据不同应用场景选择合适的方法(比如exists, count, update, values) 来减少数据库的访问，减少查询结果占用的内存空间从而提升网站的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/OyJy6Do4_4eA7tMXU0NlZQ&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 - 优先队列</title>
    <link href="http://yoursite.com/2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</id>
    <published>2021-01-26T14:48:21.000Z</published>
    <updated>2021-01-26T14:48:22.879Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    优先队列</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.array = list()</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        入队</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.array.append(element)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        self.up_adjust()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">up_adjust</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        向上调整</span></span><br><span class="line"><span class="string">        插入元素后, 放在最末尾</span></span><br><span class="line"><span class="string">        需要往上调整, 变成最大堆</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 插入的元素的位置</span></span><br><span class="line">        child_index = self.size - <span class="number">1</span></span><br><span class="line">        parent_index = (child_index - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 插入的元素, 一直往上移动</span></span><br><span class="line">        tmp = self.array[child_index]</span><br><span class="line">        <span class="comment"># 直到移动到第一个根节点, 或者比父节点小</span></span><br><span class="line">        <span class="keyword">while</span> child_index &gt; <span class="number">0</span> <span class="keyword">and</span> tmp &gt; self.array[parent_index]:</span><br><span class="line">            <span class="comment"># tmp往上移动, 将父节点赋值给子节点</span></span><br><span class="line">            self.array[child_index] = self.array[parent_index]</span><br><span class="line">            <span class="comment"># 往上移动一层</span></span><br><span class="line">            child_index = parent_index</span><br><span class="line">            parent_index = (child_index - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 移动到最终位置</span></span><br><span class="line">        self.array[child_index] = tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取优先队列的最大优先值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.size &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"队列为空"</span>)</span><br><span class="line">        <span class="comment"># 返回最大优先值</span></span><br><span class="line">        head = self.array[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 将最后一个节点移动到根节点位置</span></span><br><span class="line">        self.array[<span class="number">0</span>] = self.array[self.size - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 自顶向下移动</span></span><br><span class="line">        self.down_adjust()</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">down_adjust</span><span class="params">(self)</span>:</span></span><br><span class="line">        parent_index = <span class="number">0</span></span><br><span class="line">        tmp = self.array[parent_index]</span><br><span class="line">        child_index = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> child_index &lt; self.size:</span><br><span class="line">            <span class="comment"># 如果有右孩子节点, 并且值大于左孩子节点, 那么父节点往右孩子节点移动</span></span><br><span class="line">            <span class="comment"># 需要构建最大堆, 所以需要保证父节点要大于子节点</span></span><br><span class="line">            <span class="keyword">if</span> child_index + <span class="number">1</span> &lt; self.size <span class="keyword">and</span> self.array[child_index + <span class="number">1</span>] &gt; self.array[child_index]:</span><br><span class="line">                child_index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 父节点并最大子节点都大, 那么退出</span></span><br><span class="line">            <span class="keyword">if</span> tmp &gt;= self.array[child_index]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 将最大子节点移动到父节点位置</span></span><br><span class="line">            self.array[parent_index] = self.array[child_index]</span><br><span class="line">            <span class="comment"># 移动到子节点位置</span></span><br><span class="line">            parent_index = child_index</span><br><span class="line">            <span class="comment"># 判断左孩子节点</span></span><br><span class="line">            child_index = <span class="number">2</span> * child_index + <span class="number">1</span></span><br><span class="line">        self.array[parent_index] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    queue = PriorityQueue()</span><br><span class="line">    queue.enqueue(<span class="number">3</span>)</span><br><span class="line">    queue.enqueue(<span class="number">20</span>)</span><br><span class="line">    queue.enqueue(<span class="number">30</span>)</span><br><span class="line">    queue.enqueue(<span class="number">50</span>)</span><br><span class="line">    queue.enqueue(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(queue.dequeue())</span><br><span class="line">    print(queue.dequeue())</span><br><span class="line">    print(queue.dequeue())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>django - LocMemCache源码分析</title>
    <link href="http://yoursite.com/2021/01/24/django-LocMemCache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2021/01/24/django-LocMemCache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2021-01-24T01:04:00.000Z</published>
    <updated>2021-01-24T01:04:56.511Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Thread-safe in-memory cache backend."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.cache.backends.base <span class="keyword">import</span> DEFAULT_TIMEOUT, BaseCache</span><br><span class="line"><span class="keyword">from</span> django.utils.synch <span class="keyword">import</span> RWLock</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> django.utils.six.moves <span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Global in-memory store of cache data. Keyed by name, to provide</span></span><br><span class="line"><span class="comment"># multiple named local memory caches.</span></span><br><span class="line">_caches = &#123;&#125;</span><br><span class="line">_expire_info = &#123;&#125;</span><br><span class="line">_locks = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dummy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""A context manager that does nothing special."""</span></span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocMemCache</span><span class="params">(BaseCache)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, params)</span>:</span></span><br><span class="line">        BaseCache.__init__(self, params)</span><br><span class="line">        <span class="comment"># 使用字典, 保存数据到内存</span></span><br><span class="line">        <span class="comment"># 按照_cull_frequency看, 此处可以设置成OrderDict, 并且按LRU方式, 删除较少访问的数据</span></span><br><span class="line">        self._cache = _caches.setdefault(name, &#123;&#125;)</span><br><span class="line">        <span class="comment"># 存储key过期信息</span></span><br><span class="line">        self._expire_info = _expire_info.setdefault(name, &#123;&#125;)</span><br><span class="line">        <span class="comment"># 使用了读写锁</span></span><br><span class="line">        self._lock = _locks.setdefault(name, RWLock())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        添加缓存数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 生成key值</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        <span class="comment"># 对key值校验</span></span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        <span class="comment"># 获取写锁</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            <span class="comment"># 判断key值是否过期</span></span><br><span class="line">            <span class="keyword">if</span> self._has_expired(key):</span><br><span class="line">                <span class="comment"># key没有过期或者不存在, 则缓存数据</span></span><br><span class="line">                self._set(key, pickled, timeout)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None, version=None, acquire_lock=True)</span>:</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        pickled = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 获取读锁</span></span><br><span class="line">        <span class="keyword">with</span> (self._lock.reader() <span class="keyword">if</span> acquire_lock <span class="keyword">else</span> dummy()):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._has_expired(key):</span><br><span class="line">                pickled = self._cache[key]</span><br><span class="line">        <span class="comment"># 获取到了数据</span></span><br><span class="line">        <span class="keyword">if</span> pickled <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 反序列化</span></span><br><span class="line">                <span class="keyword">return</span> pickle.loads(pickled)</span><br><span class="line">            <span class="keyword">except</span> pickle.PickleError:</span><br><span class="line">                <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> (self._lock.writer() <span class="keyword">if</span> acquire_lock <span class="keyword">else</span> dummy()):</span><br><span class="line">            <span class="comment"># 如果没有拿到数据, 则从缓存和过期信息中, 删除所有key值</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">del</span> self._cache[key]</span><br><span class="line">                <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        实际上的缓存操作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 判断缓存的key值数量, 是否超过配置数量, 默认是300</span></span><br><span class="line">        <span class="keyword">if</span> len(self._cache) &gt;= self._max_entries:</span><br><span class="line">            <span class="comment">#</span></span><br><span class="line">            self._cull()</span><br><span class="line">        self._cache[key] = value</span><br><span class="line">        <span class="comment"># 缓存过期时间信息</span></span><br><span class="line">        self._expire_info[key] = self.get_backend_timeout(timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        缓存操作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            self._set(key, pickled, timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self, key, delta=<span class="number">1</span>, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        数值增加</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            value = self.get(key, version=version, acquire_lock=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"Key '%s' not found"</span> % key)</span><br><span class="line">            <span class="comment"># 没有确保value是数字判断?</span></span><br><span class="line">            new_value = value + delta</span><br><span class="line">            key = self.make_key(key, version=version)</span><br><span class="line">            pickled = pickle.dumps(new_value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">            self._cache[key] = pickled</span><br><span class="line">        <span class="keyword">return</span> new_value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_key</span><span class="params">(self, key, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        判断key值是否存在</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="keyword">with</span> self._lock.reader():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._has_expired(key):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不存在则清空key值相关数据</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            <span class="comment"># ...还不如直接调用self._delete(key)函数</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">del</span> self._cache[key]</span><br><span class="line">                <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_has_expired</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        key值是否过期</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 获取过期时间</span></span><br><span class="line">        exp = self._expire_info.get(key, <span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 如果过期时间不存在(key值不存在的意思), 获取超过当前时间</span></span><br><span class="line">        <span class="keyword">if</span> exp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> exp &gt; time.time():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_cull</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        删除频率</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 如果设置为0, 则清空所有缓存</span></span><br><span class="line">        <span class="comment"># 默认是3</span></span><br><span class="line">        <span class="keyword">if</span> self._cull_frequency == <span class="number">0</span>:</span><br><span class="line">            self.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 按取模操作, 按照设置的频率删除数据</span></span><br><span class="line">            doomed = [k <span class="keyword">for</span> (i, k) <span class="keyword">in</span> enumerate(self._cache) <span class="keyword">if</span> i % self._cull_frequency == <span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> doomed:</span><br><span class="line">                self._delete(k)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_delete</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self._cache[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, key, version=None)</span>:</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            self._delete(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        清空所有缓存信息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cache.clear()</span><br><span class="line">        self._expire_info.clear()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django - 读写锁</title>
    <link href="http://yoursite.com/2021/01/23/django-%E8%AF%BB%E5%86%99%E9%94%81/"/>
    <id>http://yoursite.com/2021/01/23/django-%E8%AF%BB%E5%86%99%E9%94%81/</id>
    <published>2021-01-23T05:13:37.000Z</published>
    <updated>2021-01-23T05:23:21.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码来源"><a href="#代码来源" class="headerlink" title="代码来源"></a>代码来源</h3><p>django1.11 版本, 完整源码路径<code>from django.utils.synch import RWLock</code></p><p>实现方法主要是<code>RLock+Semaphore</code>结合使用.</p><p>在阅读<code>LocMemCache</code>本地内存缓存代码时, 注意到这一部分功能, 添加解释后以后可以用.</p><p>但在django3或者更之前的版本, 已经不再没有在<code>LocMemCache</code>中用<code>RWLock</code>, 而是直接使用python自带的<code>from threading import Lock</code>了.</p><a id="more"></a><h3 id="源码及解释"><a href="#源码及解释" class="headerlink" title="源码及解释"></a>源码及解释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Synchronization primitives:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - reader-writer lock (preference to writers)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(Contributed to Django by eugene@lazutkin.com)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RWLock</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Classic implementation of reader-writer lock with preference to writers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Readers can access a resource simultaneously.</span></span><br><span class="line"><span class="string">    Writers get an exclusive access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    API is self-descriptive:</span></span><br><span class="line"><span class="string">        reader_enters()</span></span><br><span class="line"><span class="string">        reader_leaves()</span></span><br><span class="line"><span class="string">        writer_enters()</span></span><br><span class="line"><span class="string">        writer_leaves()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 可重入锁</span></span><br><span class="line">        self.mutex = threading.RLock()</span><br><span class="line">        <span class="comment"># 读锁信号量</span></span><br><span class="line">        self.can_read = threading.Semaphore(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 写锁信号量</span></span><br><span class="line">        self.can_write = threading.Semaphore(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 正在进行读操作的数量</span></span><br><span class="line">        self.active_readers = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 正在写操作的数量</span></span><br><span class="line">        self.active_writers = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 等待操作</span></span><br><span class="line">        self.waiting_readers = <span class="number">0</span></span><br><span class="line">        self.waiting_writers = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader_enters</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 加锁</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 如果没有进行写操作</span></span><br><span class="line">            <span class="keyword">if</span> self.active_writers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 那么读操作+1</span></span><br><span class="line">                self.active_readers += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 激活读操作</span></span><br><span class="line">                self.can_read.release()</span><br><span class="line">            <span class="comment"># 否则, 等待中的读操作+1</span></span><br><span class="line">            <span class="comment"># 等待写操作完成</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.waiting_readers += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 获取读锁</span></span><br><span class="line">        self.can_read.acquire()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader_leaves</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 释放</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 读操作数-1</span></span><br><span class="line">            self.active_readers -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 没有读操作, 并且有等待中的写操作</span></span><br><span class="line">            <span class="keyword">if</span> self.active_readers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers != <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 释放写操作的锁</span></span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.waiting_writers -= <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @contextlib.contextmanager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># contextlib.contextmanager装饰器的作用</span></span><br><span class="line">        <span class="comment"># 当代码被 with self.reader() 修饰时, 先执行yield之前的代码, 再执行代码块, 最后执行yield后的代码</span></span><br><span class="line">        <span class="comment"># 以此完成先获取锁再释放锁的操作</span></span><br><span class="line">        <span class="comment"># 获取锁</span></span><br><span class="line">        self.reader_enters()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 释放锁</span></span><br><span class="line">            self.reader_leaves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer_enters</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 释放写锁</span></span><br><span class="line">            <span class="keyword">if</span> self.active_writers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers == <span class="number">0</span> <span class="keyword">and</span> self.active_readers == <span class="number">0</span>:</span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.waiting_writers += <span class="number">1</span></span><br><span class="line">        self.can_write.acquire()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer_leaves</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            self.active_writers -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 释放写锁</span></span><br><span class="line">            <span class="keyword">if</span> self.waiting_writers != <span class="number">0</span>:</span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.waiting_writers -= <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line">            <span class="comment"># 释放读锁</span></span><br><span class="line">            <span class="keyword">elif</span> self.waiting_readers != <span class="number">0</span>:</span><br><span class="line">                t = self.waiting_readers</span><br><span class="line">                self.waiting_readers = <span class="number">0</span></span><br><span class="line">                self.active_readers += t</span><br><span class="line">                <span class="keyword">while</span> t &gt; <span class="number">0</span>:</span><br><span class="line">                    self.can_read.release()</span><br><span class="line">                    t -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @contextlib.contextmanager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.writer_enters()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.writer_leaves()</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lock = RWLock()</span><br><span class="line"><span class="keyword">with</span> lock.reader():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">with</span> lock.writer():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码来源&quot;&gt;&lt;a href=&quot;#代码来源&quot; class=&quot;headerlink&quot; title=&quot;代码来源&quot;&gt;&lt;/a&gt;代码来源&lt;/h3&gt;&lt;p&gt;django1.11 版本, 完整源码路径&lt;code&gt;from django.utils.synch import RWLock&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实现方法主要是&lt;code&gt;RLock+Semaphore&lt;/code&gt;结合使用.&lt;/p&gt;
&lt;p&gt;在阅读&lt;code&gt;LocMemCache&lt;/code&gt;本地内存缓存代码时, 注意到这一部分功能, 添加解释后以后可以用.&lt;/p&gt;
&lt;p&gt;但在django3或者更之前的版本, 已经不再没有在&lt;code&gt;LocMemCache&lt;/code&gt;中用&lt;code&gt;RWLock&lt;/code&gt;, 而是直接使用python自带的&lt;code&gt;from threading import Lock&lt;/code&gt;了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>golang - 解析yaml配置文件</title>
    <link href="http://yoursite.com/2020/12/14/golang-%E8%A7%A3%E6%9E%90yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/12/14/golang-%E8%A7%A3%E6%9E%90yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2020-12-14T13:09:00.000Z</published>
    <updated>2021-01-26T14:49:08.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-解析yaml配置文件"><a href="#golang-解析yaml配置文件" class="headerlink" title="golang - 解析yaml配置文件"></a>golang - 解析yaml配置文件</h1><h3 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u <span class="string">"github.com/spf13/viper"</span></span><br></pre></td></tr></table></figure><h3 id="文件整体结构"><a href="#文件整体结构" class="headerlink" title="文件整体结构"></a>文件整体结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── configs</span><br><span class="line">│   └── stand_alone.yaml</span><br><span class="line">└── pkg</span><br><span class="line">    └── settings</span><br><span class="line">        ├── section.go</span><br><span class="line">        └── setting.go</span><br></pre></td></tr></table></figure><h3 id="yaml配置文件"><a href="#yaml配置文件" class="headerlink" title="yaml配置文件"></a>yaml配置文件</h3><p>路径: configs/stand_alone.yaml</p><p>详细格式可以参考:</p><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></p><p><a href="https://en.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">YAML</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server:</span></span><br><span class="line">  <span class="attr">StorageRoot:</span> <span class="string">"Storage/upload"</span></span><br><span class="line">  <span class="attr">ListenAddress:</span> <span class="string">":8888"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="定义Setting结构体"><a href="#定义Setting结构体" class="headerlink" title="定义Setting结构体"></a>定义Setting结构体</h3><p>路径: pkg/settings/setting.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/spf13/viper"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Setting <span class="keyword">struct</span> &#123;</span><br><span class="line">    vp *viper.Viper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSetting</span><span class="params">()</span> <span class="params">(*Setting, error)</span></span> &#123;</span><br><span class="line">    vp := viper.New()</span><br><span class="line">    vp.SetConfigName(<span class="string">"stand_alone.yaml"</span>)</span><br><span class="line">    vp.AddConfigPath(<span class="string">"stand_alone/configs"</span>)</span><br><span class="line">    vp.SetConfigType(<span class="string">"yaml"</span>)</span><br><span class="line"></span><br><span class="line">    err := vp.ReadInConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;Setting&#123;vp&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义Section结构体"><a href="#定义Section结构体" class="headerlink" title="定义Section结构体"></a>定义Section结构体</h3><p>路径: pkg/settings/section.go</p><p>如果有多组配置, 那么按照格式, 创建多个struct变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    StorageRoot   <span class="keyword">string</span></span><br><span class="line">    ListenAddress <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Setting)</span> <span class="title">ReadSection</span><span class="params">(sType <span class="keyword">string</span>, section <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    err := s.vp.UnmarshalKey(sType, section)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"Storage/stand_alone/pkg/settings"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    setting, err := settings.NewSetting()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(<span class="string">"err: "</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> server *settings.Server</span><br><span class="line">    _ = setting.ReadSection(<span class="string">"Server"</span>, &amp;server)</span><br><span class="line">    fmt.Println(server.StorageRoot, server.ListenAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;golang-解析yaml配置文件&quot;&gt;&lt;a href=&quot;#golang-解析yaml配置文件&quot; class=&quot;headerlink&quot; title=&quot;golang - 解析yaml配置文件&quot;&gt;&lt;/a&gt;golang - 解析yaml配置文件&lt;/h1&gt;&lt;h3 id=&quot;安装第三方库&quot;&gt;&lt;a href=&quot;#安装第三方库&quot; class=&quot;headerlink&quot; title=&quot;安装第三方库&quot;&gt;&lt;/a&gt;安装第三方库&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; get -u &lt;span class=&quot;string&quot;&gt;&quot;github.com/spf13/viper&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;文件整体结构&quot;&gt;&lt;a href=&quot;#文件整体结构&quot; class=&quot;headerlink&quot; title=&quot;文件整体结构&quot;&gt;&lt;/a&gt;文件整体结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── configs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── stand_alone.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── pkg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── section.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── setting.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;yaml配置文件&quot;&gt;&lt;a href=&quot;#yaml配置文件&quot; class=&quot;headerlink&quot; title=&quot;yaml配置文件&quot;&gt;&lt;/a&gt;yaml配置文件&lt;/h3&gt;&lt;p&gt;路径: configs/stand_alone.yaml&lt;/p&gt;
&lt;p&gt;详细格式可以参考:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/07/yaml.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YAML 语言教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YAML&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;StorageRoot:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Storage/upload&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;ListenAddress:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang - 使用令牌桶限制接口访问频率</title>
    <link href="http://yoursite.com/2020/12/12/golang-%E4%BD%BF%E7%94%A8%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87/"/>
    <id>http://yoursite.com/2020/12/12/golang-%E4%BD%BF%E7%94%A8%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87/</id>
    <published>2020-12-12T11:33:00.000Z</published>
    <updated>2021-01-26T14:49:22.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三方库"><a href="#三方库" class="headerlink" title="三方库"></a>三方库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/juju/ratelimit@v1<span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="令牌桶结构体"><a href="#令牌桶结构体" class="headerlink" title="令牌桶结构体"></a>令牌桶结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/juju/ratelimit"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 令牌桶信息</span></span><br><span class="line"><span class="keyword">type</span> Limiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    limiterBuckets <span class="keyword">map</span>[<span class="keyword">string</span>]*ratelimit.Bucket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 令牌Bucket</span></span><br><span class="line"><span class="keyword">type</span> LimiterBucketRule <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义键值对名称</span></span><br><span class="line">    Key <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 间隔多久放N个令牌</span></span><br><span class="line">    FillInterval time.Duration</span><br><span class="line">    <span class="comment">// 令牌桶的容量</span></span><br><span class="line">    Capacity <span class="keyword">int64</span></span><br><span class="line">    <span class="comment">// 每次到达间隔时间后所放的具体令牌数量</span></span><br><span class="line">    Quantum <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">type</span> LimiterIface <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 获取对应的限流器的键值对名称</span></span><br><span class="line">    Key(c *gin.Context) <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 获取令牌桶</span></span><br><span class="line">    GetBucket(key <span class="keyword">string</span>) (*ratelimit.Bucket, <span class="keyword">bool</span>)</span><br><span class="line">    <span class="comment">// 新增令牌桶</span></span><br><span class="line">    AddBuckets(rules ...LimiterBucketRule) LimiterIface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="实现令牌桶的接口"><a href="#实现令牌桶的接口" class="headerlink" title="实现令牌桶的接口"></a>实现令牌桶的接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/juju/ratelimit"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MethodLimiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Limiter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个令牌桶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMethodLimiter</span><span class="params">()</span> <span class="title">LimiterIface</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MethodLimiter&#123;</span><br><span class="line">        Limiter: &amp;Limiter&#123;</span><br><span class="line">            limiterBuckets: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*ratelimit.Bucket),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值对, 使用核心路由做key值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">Key</span><span class="params">(c *gin.Context)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    uri := c.Request.RequestURI</span><br><span class="line">    index := strings.Index(uri, <span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uri</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uri[:index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Bucket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">GetBucket</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(*ratelimit.Bucket, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    bucket, ok := l.limiterBuckets[key]</span><br><span class="line">    <span class="keyword">return</span> bucket, ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加bucket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">AddBuckets</span><span class="params">(rules ...LimiterBucketRule)</span> <span class="title">LimiterIface</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, rule := <span class="keyword">range</span> rules &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := l.limiterBuckets[rule.Key]; !ok &#123;</span><br><span class="line">            l.limiterBuckets[rule.Key] = ratelimit.NewBucketWithQuantum(rule.FillInterval, rule.Capacity, rule.Quantum)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/app"</span></span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/errcode"</span></span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/limiter"</span></span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RateLimiter</span><span class="params">(l limiter.LimiterIface)</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取令牌的key值</span></span><br><span class="line">        key := l.Key(c)</span><br><span class="line">        <span class="keyword">if</span> bucket, ok := l.GetBucket(key); ok &#123;</span><br><span class="line">            <span class="comment">// 传入1, 表示已使用一个令牌</span></span><br><span class="line">            count := bucket.TakeAvailable(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 如果剩余可用令牌数为0, 则抛出异常, 禁止访问</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">                response := app.NewResponse(c)</span><br><span class="line">                response.ToErrorResponse(errcode.TooManyRequests)</span><br><span class="line">                c.Abort()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c.Next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入gin的中间件"><a href="#加入gin的中间件" class="headerlink" title="加入gin的中间件"></a>加入gin的中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制了/auth的访问频率</span></span><br><span class="line"><span class="comment">// 限制时间间隔, 1秒钟</span></span><br><span class="line"><span class="comment">// 一秒钟内, 最多被访问10次</span></span><br><span class="line"><span class="comment">// 当一秒后, 重新放入10个令牌到令牌桶内, 也就是下一秒可再次被访问10次</span></span><br><span class="line"><span class="keyword">var</span> methodLimiters = limiter.NewMethodLimiter().AddBuckets(limiter.LimiterBucketRule&#123;</span><br><span class="line">    <span class="comment">// 令牌桶限制的url</span></span><br><span class="line">    Key: <span class="string">"/auth"</span>,</span><br><span class="line">    <span class="comment">// 时间间隔</span></span><br><span class="line">    FillInterval: time.Second * <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 令牌总容量</span></span><br><span class="line">    Capacity: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// 重新放入令牌桶数量</span></span><br><span class="line">    Quantum: <span class="number">10</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r := gin.New()</span><br><span class="line">r.Use(middleware.RateLimiter(methodLimiters))</span><br></pre></td></tr></table></figure><h3 id="从配置文件中读取方式"><a href="#从配置文件中读取方式" class="headerlink" title="从配置文件中读取方式"></a>从配置文件中读取方式</h3><h4 id="配置yaml"><a href="#配置yaml" class="headerlink" title="配置yaml"></a>配置yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Limiter:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Limits:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">"/auth"</span></span><br><span class="line">      <span class="attr">FillInterval:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">Capacity:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">Quantum:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">"/api/v1/tags"</span></span><br><span class="line">      <span class="attr">FillInterval:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">Capacity:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">Quantum:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="配置Setting"><a href="#配置Setting" class="headerlink" title="配置Setting"></a>配置Setting</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LimiterSetting <span class="keyword">struct</span> &#123;</span><br><span class="line">    Limits []<span class="keyword">struct</span> &#123;</span><br><span class="line">        Key          <span class="keyword">string</span></span><br><span class="line">        FillInterval time.Duration</span><br><span class="line">        Capacity     <span class="keyword">int64</span></span><br><span class="line">        Quantum      <span class="keyword">int64</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改中间件参数传入方式"><a href="#修改中间件参数传入方式" class="headerlink" title="修改中间件参数传入方式"></a>修改中间件参数传入方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newLimiter</span><span class="params">()</span> <span class="title">limiter</span>.<span class="title">LimiterIface</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rules []limiter.LimiterBucketRule</span><br><span class="line">    <span class="keyword">for</span> _, limit := <span class="keyword">range</span> global.LimiterSetting.Limits &#123;</span><br><span class="line">        rules = <span class="built_in">append</span>(rules, limiter.LimiterBucketRule&#123;</span><br><span class="line">            <span class="comment">// 令牌桶限制的url</span></span><br><span class="line">            Key: limit.Key,</span><br><span class="line">            <span class="comment">// 时间间隔</span></span><br><span class="line">            FillInterval: limit.FillInterval * time.Second,</span><br><span class="line">            <span class="comment">// 令牌总容量</span></span><br><span class="line">            Capacity: limit.Capacity,</span><br><span class="line">            <span class="comment">// 重新放入令牌桶数量</span></span><br><span class="line">            Quantum: limit.Quantum,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> methodLimiters = limiter.NewMethodLimiter().AddBuckets(rules...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> methodLimiters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Use(middleware.RateLimiter(newLimiter()))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三方库&quot;&gt;&lt;a href=&quot;#三方库&quot; class=&quot;headerlink&quot; title=&quot;三方库&quot;&gt;&lt;/a&gt;三方库&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; get -u github.com/juju/ratelimit@v1&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&quot;令牌桶结构体&quot;&gt;&lt;a href=&quot;#令牌桶结构体&quot; class=&quot;headerlink&quot; title=&quot;令牌桶结构体&quot;&gt;&lt;/a&gt;令牌桶结构体&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; limiter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;github.com/juju/ratelimit&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 令牌桶信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Limiter &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    limiterBuckets &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]*ratelimit.Bucket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 令牌Bucket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; LimiterBucketRule &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 自定义键值对名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Key &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 间隔多久放N个令牌&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FillInterval time.Duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 令牌桶的容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Capacity &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 每次到达间隔时间后所放的具体令牌数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Quantum &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; LimiterIface &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取对应的限流器的键值对名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Key(c *gin.Context) &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取令牌桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GetBucket(key &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) (*ratelimit.Bucket, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 新增令牌桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AddBuckets(rules ...LimiterBucketRule) LimiterIface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="gin" scheme="http://yoursite.com/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>[转]使用PySnooper调试代码</title>
    <link href="http://yoursite.com/2020/11/18/%E8%BD%AC-%E4%BD%BF%E7%94%A8PySnooper%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2020/11/18/%E8%BD%AC-%E4%BD%BF%E7%94%A8PySnooper%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</id>
    <published>2020-11-18T12:01:00.000Z</published>
    <updated>2021-01-26T14:49:47.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/wSmzU4cn0mTwlrtCSENeqg" target="_blank" rel="noopener">求你了，别再用 print 调试代码了</a></p><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pip install pysnooper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> conda install -c conda-forge pysnooper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yay -S python-pysnooper</span></span><br></pre></td></tr></table></figure><h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><p>下面这段代码，定义了一个 demo_func 的函数，在里面生成一个 profile 的字典变量，然后去更新它，最后返回。</p><p>代码本身没有什么实际意义，但是用来演示 PySnooper 已经足够。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pysnooper</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">"name"</span>] = <span class="string">"写代码的明哥"</span></span><br><span class="line">    profile[<span class="string">"age"</span>] = <span class="number">27</span></span><br><span class="line">    profile[<span class="string">"gender"</span>] = <span class="string">"male"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    profile = demo_func()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><a id="more"></a><p>现在我使用终端命令行的方式来运行它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iswbm ~]# python3 demo.py </span><br><span class="line">Source path:... demo.py</span><br><span class="line">17:52:49.624943 call         4 def demo_func():</span><br><span class="line">17:52:49.625124 line         5     profile = &#123;&#125;</span><br><span class="line">New var:....... profile = &#123;&#125;</span><br><span class="line">17:52:49.625156 line         6     profile["name"] = "写代码的明哥"</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥'&#125;</span><br><span class="line">17:52:49.625207 line         7     profile["age"] = 27</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥', 'age': 27&#125;</span><br><span class="line">17:52:49.625254 line         8     profile["gender"] = "male"</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥', 'age': 27, 'gender': 'male'&#125;</span><br><span class="line">17:52:49.625306 line        10     return profile</span><br><span class="line">17:52:49.625344 return      10     return profile</span><br><span class="line">Return value:.. &#123;'name': '写代码的明哥', 'age': 27, 'gender': 'male'&#125;</span><br><span class="line">Elapsed time: 00:00:00.000486</span><br></pre></td></tr></table></figure><p>可以看到 PySnooper 把函数运行的过程全部记录了下来，包括：</p><ul><li>代码的片段、行号等信息，以及每一行代码是何时调用的？</li><li>函数内局部变量的值如何变化的？何时新增了变量，何时修改了变量。</li><li>函数的返回值是什么？</li><li>运行函数消耗了多少时间？<br>而作为开发者，要得到这些如此详细的调试信息，你需要做的非常简单，只要给你想要调试的函数上带上一顶帽子（装饰器） – <code>@pysnooper.snoop()</code> 即可。</li></ul><h3 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h3><h4 id="重定向到日志文件"><a href="#重定向到日志文件" class="headerlink" title="重定向到日志文件"></a>重定向到日志文件</h4><p><code>@pysnooper.snoop()</code> 不加任何参数时，会默认将调试的信息输出到标准输出。</p><p>对于单次调试就能解决的 BUG ，这样没有什么问题，但是有一些 BUG 只有在特定的场景下才会出现，需要你把程序放在后面跑个一段时间才能复现。</p><p>这种情况下，你可以将调试信息重定向输出到某一日志文件中，方便追溯排查。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(output='/var/log/debug.log')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="跟踪非局部变量值"><a href="#跟踪非局部变量值" class="headerlink" title="跟踪非局部变量值"></a>跟踪非局部变量值</h4><p>PySnooper 是以函数为单位进行调试的，它默认只会跟踪函数体内的局部变量，若想跟踪全局变量，可以给 <code>pysnooper.snoop()</code> 加上 <code>watch</code> 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">out = &#123;<span class="string">"foo"</span>: <span class="string">"bar"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(watch=('out["foo"]'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>如此一来，PySnooper 会在 <code>out[&quot;foo&quot;]</code> 值有变化时，也将其打印出来<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200531.png" alt=""><br>watch 参数，接收一个可迭代对象（可以是list 或者 tuple），里面的元素为字符串表达式，什么意思呢？看下面例子就知道了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(watch=('out["foo"]', 'foo.bar', 'self.foo["bar"]'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>和 <code>watch</code> 相对的，<code>pysnooper.snoop()</code> 还可以接收一个函数 <code>watch_explode</code>，表示除了这几个参数外的其他所有全局变量都监控。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(watch_explode=('foo', 'bar'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="设置跟踪函数的深度"><a href="#设置跟踪函数的深度" class="headerlink" title="设置跟踪函数的深度"></a>设置跟踪函数的深度</h4><p>当你使用 PySnooper 调试某个函数时，若该函数中还调用了其他函数，PySnooper 是不会傻傻的跟踪进去的。</p><p>如果你想继续跟踪该函数中调用的其他函数，可以通过指定 <code>depth</code> 参数来设置跟踪深度（不指定的话默认为 1）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(depth=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><h4 id="设置调试日志的前缀"><a href="#设置调试日志的前缀" class="headerlink" title="设置调试日志的前缀"></a>设置调试日志的前缀</h4><p>当你在使用 PySnooper 跟踪多个函数时，调试的日志会显得杂乱无章，不方便查看。</p><p>在这种情况下，PySnooper 提供了一个参数，方便你为不同的函数设置不同的标志，方便你在查看日志时进行区分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(output="/var/log/debug.log", prefix="demo_func: ")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200734.png" alt=""></p><h4 id="设置最大的输出长度"><a href="#设置最大的输出长度" class="headerlink" title="设置最大的输出长度"></a>设置最大的输出长度</h4><p>默认情况下，PySnooper 输出的变量和异常信息，如果超过 100 个字符，被会截断为 100 个字符。</p><p>当然你也可以通过指定参数 进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(max_variable_length=200）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>您也可以使用max_variable_length=None它从不截断它们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(max_variable_length=None）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="支持多线程调试模式"><a href="#支持多线程调试模式" class="headerlink" title="支持多线程调试模式"></a>支持多线程调试模式</h4><p>PySnooper 同样支持多线程的调试，通过设置参数 <code>thread_info=True</code>，它就会在日志中打印出是在哪个线程对变量进行的修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(thread_info=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200903.png" alt=""></p><h4 id="自定义对象的格式输出"><a href="#自定义对象的格式输出" class="headerlink" title="自定义对象的格式输出"></a>自定义对象的格式输出</h4><p><code>pysnooper.snoop()</code> 函数有一个参数是 <code>custom_repr</code>，它接收一个元组对象。</p><p>在这个元组里，你可以指定特定类型的对象以特定格式进行输出。</p><p>这边我举个例子。</p><p>假如我要跟踪 <code>person</code> 这个 <code>Person</code> 类型的对象，由于它不是常规的 Python 基础类型，PySnooper 是无法正常输出它的信息的。</p><p>因此我在 <code>pysnooper.snoop()</code> 函数中设置了 <code>custom_repr</code> 参数，该参数的第一个元素为 <code>Person</code>，第二个元素为 <code>print_persion_obj</code> 函数。</p><p>PySnooper 在打印对象的调试信息时，会逐个判断它是否是 Person 类型的对象，若是，就将该对象传入 <code>print_persion_obj</code> 函数中，由该函数来决定如何显示这个对象的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pysnooper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_person_obj</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"&lt;Person <span class="subst">&#123;obj.name&#125;</span> <span class="subst">&#123;obj.age&#125;</span> <span class="subst">&#123;obj.gender&#125;</span>&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(Person, print_person_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    person = Person()</span><br><span class="line">    person.name = <span class="string">"写代码的明哥"</span></span><br><span class="line">    person.age = <span class="number">27</span></span><br><span class="line">    person.gender = <span class="string">"male"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    profile = demo_func()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行一下，观察一下效果。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118201026.png" alt=""><br>如果你要自定义格式输出的有很多个类型，那么 custom_repr 参数的值可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=((Person, print_person_obj), (numpy.ndarray, print_ndarray)))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>还有一点我提醒一下，元组的第一个元素可以是类型（如类名Person 或者其他基础类型 list等），也可以是一个判断对象类型的函数。</p><p>也就是说，下面三种写法是等价的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【第一种写法】</span></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(Person, print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【第二种写法】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_persion_obj</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> isinstance(obj, Person)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(is_persion_obj, print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【第三种写法】</span></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(lambda obj: isinstance(obj, Person), print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wSmzU4cn0mTwlrtCSENeqg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;求你了，别再用 print 调试代码了&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;快速安装&quot;&gt;&lt;a href=&quot;#快速安装&quot; class=&quot;headerlink&quot; title=&quot;快速安装&quot;&gt;&lt;/a&gt;快速安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; python3 -m pip install pysnooper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; conda install -c conda-forge pysnooper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; yay -S python-pysnooper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;简单案例&quot;&gt;&lt;a href=&quot;#简单案例&quot; class=&quot;headerlink&quot; title=&quot;简单案例&quot;&gt;&lt;/a&gt;简单案例&lt;/h3&gt;&lt;p&gt;下面这段代码，定义了一个 demo_func 的函数，在里面生成一个 profile 的字典变量，然后去更新它，最后返回。&lt;/p&gt;
&lt;p&gt;代码本身没有什么实际意义，但是用来演示 PySnooper 已经足够。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pysnooper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@pysnooper.snoop()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;demo_func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;写代码的明哥&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile[&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile[&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile = demo_func()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>友情链接</title>
    <link href="http://yoursite.com/2020/11/15/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2020/11/15/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</id>
    <published>2020-11-15T08:32:00.000Z</published>
    <updated>2021-01-14T03:34:26.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="https://docs.python.org/zh-cn/3/index.html" target="_blank" rel="noopener">Python3官方文档</a></p><p><a href="https://docs.djangoproject.com/en/2.2/" target="_blank" rel="noopener">Django官方文档</a></p><p><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">Django中文版</a></p><p><a href="https://www.django-rest-framework.org/" target="_blank" rel="noopener">rest-framework官方文档</a></p><p><a href="http://drf.jiuyou.info/#/" target="_blank" rel="noopener">rest-framework文档中文版</a></p><p><a href="https://redis-py.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">python-redis官方文档</a></p><p><a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/#id8" target="_blank" rel="noopener">django-redis 中文文档</a></p><p><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ官方文档</a></p><h3 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h3><p><a href="https://www.the5fire.com" target="_blank" rel="noopener">the5fire: Django企业开发实战作者</a></p><p><a href="https://github.com/MoonMonsters/eat_pyspark_in_10_days" target="_blank" rel="noopener">如何用10天吃掉pyspark</a></p><h3 id="Golang学习"><a href="#Golang学习" class="headerlink" title="Golang学习"></a>Golang学习</h3><p><a href="https://lailin.xyz/post/go-design-pattern.html" target="_blank" rel="noopener">golang设计模式</a></p><p><a href="https://wskdsgcf.gitbook.io/mastering-go-zh-cn/" target="_blank" rel="noopener">mastering-go-zh-cn: golang入门</a></p><p><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md" target="_blank" rel="noopener">the-way-to-go_ZH_CN: golang入门</a></p><p><a href="https://github.com/geektutu/7days-golang" target="_blank" rel="noopener">从零开始系列…</a></p><p><a href="https://chai2010.cn/advanced-go-programming-book/" target="_blank" rel="noopener">Go语言高级编程(Advanced Go Programming)</a></p><p><a href="https://draveness.me/golang/" target="_blank" rel="noopener">Go 语言设计与实现</a></p><p><a href="https://geektutu.com" target="_blank" rel="noopener">极客兔兔</a></p><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p><a href="https://gitee.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener">Redis可视化客户端</a></p><p><a href="https://dbeaver.io/download/" target="_blank" rel="noopener">数据库客户端</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方网站&quot;&gt;&lt;a href=&quot;#官方网站&quot; class=&quot;headerlink&quot; title=&quot;官方网站&quot;&gt;&lt;/a&gt;官方网站&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/index.html&quot; target=&quot;_
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang - 接口文档框架swagger</title>
    <link href="http://yoursite.com/2020/11/15/golang-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6swagger/"/>
    <id>http://yoursite.com/2020/11/15/golang-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6swagger/</id>
    <published>2020-11-15T06:20:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/swaggo/swag/cmd/swag@v1.6.5</span><br><span class="line">go get -u github.com/swaggo/gin-swagger@v1.2.0</span><br><span class="line">go get -u github.com/swaggo/files</span><br><span class="line">go get -u github.com/alecthomas/template</span><br></pre></td></tr></table></figure><p>验证是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ swag -v</span><br><span class="line">swag version v1.6.5</span><br></pre></td></tr></table></figure><h3 id="写入注解"><a href="#写入注解" class="headerlink" title="写入注解"></a>写入注解</h3><p>在安装完Swagger关联库后, 就需要在项目里的API接口编写注解,以便后续在生成时能够正确的运行.</p><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Summary</td><td>摘要</td></tr><tr><td>@Produce</td><td>API可以长生的MIME类型的列表. 我们可以把MIME类型简单的理解为响应类型, 例如JSON, XML, HTML等.</td></tr><tr><td>@Param</td><td>参数格式, 从左到右分别为: 参数名, 入参类型, 数据类型, 是否必填和注释</td></tr><tr><td>@Success</td><td>响应成功, 从左到右分别为: 状态码, 参数类型, 数据类型和注释</td></tr><tr><td>@Failure</td><td>响应失败, 从左到右分别为状态码, 参数类型, 数据类型和注释</td></tr><tr><td>@Router</td><td>路由, 从左到右分别为: 路由地址和HTTP方法</td></tr></tbody></table><h4 id="API函数代码示例"><a href="#API函数代码示例" class="headerlink" title="API函数代码示例"></a>API函数代码示例</h4><p>用的是Gin框架.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTag</span><span class="params">()</span> <span class="title">Tag</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Tag&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Get</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 获取多个标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param name query string false "标签名称" maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state query int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param page query int false "页码"</span></span><br><span class="line"><span class="comment">// @Param page_size query int false "每页数量"</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">List</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 新增标签</span></span><br><span class="line"><span class="comment">// @Product json</span></span><br><span class="line"><span class="comment">// @Param name body string true "标签名称" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param created_by body string false "创建者" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags [post]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Create</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 更新标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param id path int true "标签ID"</span></span><br><span class="line"><span class="comment">// @Param name body string false "标签名称" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param modified_by body string true "修改者" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;array&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags/&#123;id&#125; [put]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Update</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 删除标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param id path int true "标签ID"</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; string "删除成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags/&#123;id&#125; [delete]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Delete</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h4><p>针对整个项目, 也能写入注解.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @title 博客系统</span></span><br><span class="line"><span class="comment">// @version 1.0</span></span><br><span class="line"><span class="comment">// @description Go+Gin框架的博客项目</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := routers.NewRouter()</span><br><span class="line"></span><br><span class="line">    s := &amp;http.Server&#123;</span><br><span class="line">        Addr:           <span class="string">":8080"</span>,</span><br><span class="line">        Handler:        router,</span><br><span class="line">        ReadTimeout:    <span class="number">10</span> * time.Second,</span><br><span class="line">        WriteTimeout:   <span class="number">10</span> * time.Second,</span><br><span class="line">        MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    s.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档</h3><p>在项目的主目录下, 使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swag init</span><br></pre></td></tr></table></figure><p>执行完后, 可以看到在docs文件夹中生成了docs.go, swagger.json和swagger.yarm三个文件.</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">"GoProgrammingJourney/blog_service/docs"</span></span><br><span class="line">  ginSwagger <span class="string">"github.com/swaggo/gin-swagger"</span></span><br><span class="line">  <span class="string">"github.com/swaggo/gin-swagger/swaggerFiles"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r := gin.New()</span><br><span class="line">r.GET(<span class="string">"/swagger/*any"</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br></pre></td></tr></table></figure><h3 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h3><p>访问网址可以看到生成后的项目文档了.<br/><br><a href="http://127.0.0.1:8080/swagger/index.html" target="_blank" rel="noopener">http://127.0.0.1:8080/swagger/index.html</a></p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201115143526.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
</feed>
