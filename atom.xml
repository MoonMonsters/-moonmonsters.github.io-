<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MoonMonsters</title>
  
  <subtitle>Do Not Repeat Yourself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-24T14:29:31.335Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>_Tao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三方库推荐</title>
    <link href="http://yoursite.com/2021/02/24/%E4%B8%89%E6%96%B9%E5%BA%93%E6%8E%A8%E8%8D%90/"/>
    <id>http://yoursite.com/2021/02/24/%E4%B8%89%E6%96%B9%E5%BA%93%E6%8E%A8%E8%8D%90/</id>
    <published>2021-02-24T14:28:49.000Z</published>
    <updated>2021-02-24T14:29:31.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><a href="https://pypi.org/project/python-redis-lock/" target="_blank" rel="noopener">python-redis-lock 3.7.0, redis分布式锁</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://pypi.org/project/python-redis-lock/&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[转]利用 Linux 指令分析 Web 日志</title>
    <link href="http://yoursite.com/2021/02/24/%E8%BD%AC-%E5%88%A9%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90-Web-%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2021/02/24/%E8%BD%AC-%E5%88%A9%E7%94%A8-Linux-%E6%8C%87%E4%BB%A4%E5%88%86%E6%9E%90-Web-%E6%97%A5%E5%BF%97/</id>
    <published>2021-02-24T14:08:00.000Z</published>
    <updated>2021-02-24T14:22:26.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=478#/detail/pc?id=4617" target="_blank" rel="noopener">高级技巧之日志分析：利用 Linux 指令分析 Web 日志</a></p><h3 id="第一步：能不能这样做？"><a href="#第一步：能不能这样做？" class="headerlink" title="第一步：能不能这样做？"></a>第一步：能不能这样做？</h3><p>当我们想要分析一个线上文件的时候，首先要思考，能不能这样做？ 这里你可以先用<code>htop</code>指令看一下当前的负载。如果你的机器上没有<code>htop</code>，可以考虑用<code>yum</code>或者<code>apt</code>去安装。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224220935.png" alt=""></p><p>如上图所示，我的机器上 8 个 CPU 都是 0 负载，2G的内存用了一半多，还有富余。 我们用<code>wget</code>将目标文件下载到本地（如果你没有 wget，可以用yum或者apt安装）。</p><blockquote><pre><code>wget 某网址（自己替代）</code></pre></blockquote><p>然后我们用ls查看文件大小。发现这只是一个 7M 的文件，因此对线上的影响可以忽略不计。如果文件太大，建议你用scp指令将文件拷贝到闲置服务器再分析。下图中我使用了<code>--block-size</code>让<code>ls</code>以<code>M</code>为单位显示文件大小。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221141.png" alt=""><br>确定了当前机器的CPU和内存允许我进行分析后，我们就可以开始第二步操作了。</p><h3 id="第二步：LESS-日志文件"><a href="#第二步：LESS-日志文件" class="headerlink" title="第二步：LESS 日志文件"></a>第二步：LESS 日志文件</h3><p>在分析日志前，给你提个醒，记得要<code>less</code>一下，看看日志里面的内容。之前我们说过，尽量使用<code>less</code>这种不需要读取全部文件的指令，因为在线上执行<code>cat</code>是一件非常危险的事情，这可能导致线上服务器资源不足。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221407.png" alt=""><br>如上图所示，我们看到<code>nginx</code>的<code>access_log</code>每一行都是一次用户的访问，从左到右依次是：</p><ul><li>IP 地址；</li><li>时间；</li><li>HTTP 请求的方法、路径和协议版本、返回的状态码；</li><li>User Agent。</li></ul><h3 id="第三步：PV-分析"><a href="#第三步：PV-分析" class="headerlink" title="第三步：PV 分析"></a>第三步：PV 分析</h3><p><code>PV（Page View）</code>，用户每访问一个页面就是一次Page View。对于nginx的acess_log来说，分析 PV 非常简单，我们直接使用<code>wc -l</code>就可以看到整体的<code>PV</code>。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221531.png" alt=""><br>如上图所示：我们看到了一共有 51462 条 PV。</p><h3 id="第四步：PV-分组"><a href="#第四步：PV-分组" class="headerlink" title="第四步：PV 分组"></a>第四步：PV 分组</h3><p>通常一个日志中可能有几天的 PV，为了得到更加直观的数据，有时候需要按天进行分组。为了简化这个问题，我们先来看看日志中都有哪些天的日志。</p><p>使用<code>awk &#39;{print $4}&#39; access.log  | less</code>可以看到如下结果。<code>awk</code>是一个处理文本的领域专有语言。这里就牵扯到领域专有语言这个概念，英文是Domain Specific Language。领域专有语言，就是为了处理某个领域专门设计的语言。比如awk是用来分析处理文本的DSL，html是专门用来描述网页的DSL，SQL是专门用来查询数据的DSL……大家还可以根据自己的业务设计某种针对业务的DSL。</p><p>你可以看到我们用<code>$4</code>代表文本的第 4 列，也就是时间所在的这一列，如下图所示：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221707.png" alt=""><br>我们想要按天统计，可以利用 awk提供的字符串截取的能力。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221724.png" alt=""><br>上图中，我们使用<code>awk</code>的<code>substr</code>函数，数字<code>2</code>代表从第 2 个字符开始，数字11代表截取 11 个字符。</p><p>接下来我们就可以分组统计每天的日志条数了。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224221752.png" alt=""></p><p>上图中，使用<code>sort</code>进行排序，然后使用<code>uniq -c</code>进行统计。你可以看到从 2015 年 5 月 17 号一直到 6 月 4 号的日志，还可以看到每天的 PV 量大概是在 2000~3000 之间。</p><h3 id="第五步：分析-UV"><a href="#第五步：分析-UV" class="headerlink" title="第五步：分析 UV"></a>第五步：分析 UV</h3><p>接下来我们分析 UV。<code>UV（Uniq Visitor）</code>，也就是统计访问人数。通常确定用户的身份是一个复杂的事情，但是我们可以用 <code>IP</code> 访问来近似统计 UV。<br><a href="https://s0.lgstatic.com/i/image/M00/5C/74/Ciqc1F-BkNeAam2YAACxCjlKsvc488.png" target="_blank" rel="noopener">https://s0.lgstatic.com/i/image/M00/5C/74/Ciqc1F-BkNeAam2YAACxCjlKsvc488.png</a><br><img src="/images/pasted-1.png" alt="upload successful"></p><p>上图中，我们使用 <code>awk</code> 去打印<code>$1</code>也就是第一列，接着<code>sort</code>排序，然后用uniq去重，最后用<code>wc -l</code>查看条数。 这样我们就知道日志文件中一共有2660个 IP，也就是2660个 UV。</p><h3 id="第六步：分组分析-UV"><a href="#第六步：分组分析-UV" class="headerlink" title="第六步：分组分析 UV"></a>第六步：分组分析 UV</h3><p>接下来我们尝试按天分组分析每天的 UV 情况。这个情况比较复杂，需要较多的指令，我们先创建一个叫作sum.sh的bash脚本文件，写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span></span><br><span class="line">awk '&#123;print substr($4, 2, 11) " " $1&#125;' access.log |\</span><br><span class="line">    sort | uniq |\</span><br><span class="line">    awk '&#123;uv[$1]++;next&#125;END&#123;for (ip in uv) print ip, uv[ip]&#125;'</span><br></pre></td></tr></table></figure><p>具体分析如下。</p><ul><li>文件首部我们使用#!，表示我们将使用后面的/usr/bin/bash执行这个文件。</li><li>第一次awk我们将第 4 列的日期和第 1 列的ip地址拼接在一起。</li><li>下面的sort是把整个文件进行一次字典序排序，相当于先根据日期排序，再根据 IP 排序。</li><li>接下来我们用uniq去重，日期 +IP 相同的行就只保留一个。</li><li>最后的awk我们再根据第 1 列的时间和第 2 列的 IP 进行统计。</li></ul><p>为了理解最后这一行描述，我们先来简单了解下<code>awk</code>的原理。</p><p><code>awk</code>本身是逐行进行处理的。因此我们的<code>next</code>关键字是提醒<code>awk</code>跳转到下一行输入。 对每一行输入，awk会根据第 1 列的字符串（也就是日期）进行累加。之后的<code>END</code>关键字代表一个触发器，就是 END 后面用 {} 括起来的语句会在所有输入都处理完之后执行——当所有输入都执行完，结果被累加到<code>uv</code>中后，通过<code>foreach</code>遍历<code>uv</code>中所有的<code>key</code>，去打印<code>ip</code>和<code>ip对应的数量</code>。</p><p>编写完上面的脚本之后，我们保存退出编辑器。接着执行<code>chmod +x ./sum.sh</code>，给<code>sum.sh</code>增加执行权限。然后我们可以像下图这样执行，获得结果：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20210224222148.png" alt=""></p><p>如上图，IP地址已经按天进行统计好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://kaiwu.lagou.com/course/courseInfo.htm?courseId=478#/d
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode - 合并区间</title>
    <link href="http://yoursite.com/2021/02/02/leetcode-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"/>
    <id>http://yoursite.com/2021/02/02/leetcode-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</id>
    <published>2021-02-01T16:36:56.000Z</published>
    <updated>2021-02-01T16:38:32.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">合并区间</a></p><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals &#x3D; [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">输出：[[1,6],[8,10],[15,18]]</span><br><span class="line">解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals &#x3D; [[1,4],[4,5]]</span><br><span class="line">输出：[[1,5]]</span><br><span class="line">解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;&#x3D; intervals.length &lt;&#x3D; 10^4</span><br><span class="line">intervals[i].length &#x3D;&#x3D; 2</span><br><span class="line">0 &lt;&#x3D; starti &lt;&#x3D; endi &lt;&#x3D; 10^4</span><br></pre></td></tr></table></figure><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, intervals)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type intervals: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        intervals = sorted(intervals, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">        current = intervals[<span class="number">0</span>]</span><br><span class="line">        rv = list()</span><br><span class="line">        <span class="keyword">for</span> inter <span class="keyword">in</span> intervals[<span class="number">1</span>:]:</span><br><span class="line">            <span class="comment"># 如果无法合并的话, 那么将前一个区间放入列表</span></span><br><span class="line">            <span class="comment"># current移动到后一个区间上</span></span><br><span class="line">            <span class="keyword">if</span> current[<span class="number">1</span>] &lt; inter[<span class="number">0</span>]:</span><br><span class="line">                rv.append(current)</span><br><span class="line">                current = inter</span><br><span class="line">            <span class="comment"># 前一个区间的较大值, 在后一个区间范围内</span></span><br><span class="line">            <span class="comment"># 合并两个区间, 但此时不将current放入列表, 需要继续合并</span></span><br><span class="line">            <span class="keyword">elif</span> inter[<span class="number">0</span>] &lt;= current[<span class="number">1</span>] &lt;= inter[<span class="number">1</span>]:</span><br><span class="line">                current = [current[<span class="number">0</span>], inter[<span class="number">1</span>]]</span><br><span class="line">            <span class="comment"># 前一个区间包括了后一个区间, 不做处理</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        rv.append(current)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    i = [[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">6</span>], [<span class="number">8</span>, <span class="number">10</span>], [<span class="number">15</span>, <span class="number">18</span>]]</span><br><span class="line">    s = Solution()</span><br><span class="line">    print(s.merge(i))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-intervals/&quot; target=&quot;_b
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构 - 最小栈的实现</title>
    <link href="http://yoursite.com/2021/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2021/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9C%80%E5%B0%8F%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-01-31T10:59:00.000Z</published>
    <updated>2021-01-31T11:02:39.649Z</updated>
    
    <content type="html"><![CDATA[<p>题目:<br>实现一个栈, 该栈带有出栈(pop), 入栈(push), 取最小元素(get_min)三个方法, 并且保证三个方法的时间复杂度都是O(1).<br>注: 只是需要通过get_min获取到最小元素, 并不是说pop出来的要是最小元素.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    最小栈的实现</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 主栈, 存储所有数据</span></span><br><span class="line">        self.stack = list()</span><br><span class="line">        <span class="comment"># 辅助栈, 保存最小值列表</span></span><br><span class="line">        self.bak_stack = list()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        入栈</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack) == <span class="number">0</span>:</span><br><span class="line">            self.stack.append(element)</span><br><span class="line">            self.bak_stack.append(element)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        self.stack.append(element)</span><br><span class="line">        <span class="comment"># 栈顶元素</span></span><br><span class="line">        top = self.bak_stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 如果辅助栈的栈顶元素大于入职元素, 那么就说明入栈元素是新的最小值</span></span><br><span class="line">        <span class="comment"># 放入辅助栈的栈顶</span></span><br><span class="line">        <span class="keyword">if</span> top &gt;= element:</span><br><span class="line">            self.bak_stack.append(element)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(self.stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        top = self.stack.pop(<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 如果当前主栈的栈顶元素和辅助栈的一致, 那么也需要将辅助栈的栈顶pop掉</span></span><br><span class="line">        <span class="keyword">if</span> top == self.bak_stack[<span class="number">-1</span>]:</span><br><span class="line">            self.bak_stack.pop(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> top</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_min</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(self.bak_stack) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取最小元素时, 直接从辅助栈中获取</span></span><br><span class="line">        <span class="keyword">return</span> self.bak_stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_print</span><span class="params">(_ms: MinStack)</span>:</span></span><br><span class="line">    print(<span class="string">"抛出栈顶元素: %s, 当前数组: %s, 最小元素: %s"</span> % (_ms.pop(), _ms.stack, _ms.get_min()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    array = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">7</span>)]</span><br><span class="line">    array.append(array[<span class="number">3</span>])</span><br><span class="line">    array.append(<span class="number">-1</span>)</span><br><span class="line">    array.append(array[<span class="number">4</span>])</span><br><span class="line">    array.append(<span class="number">-1</span>)</span><br><span class="line">    print(<span class="string">"初始化数组: "</span>, array)</span><br><span class="line">    ms = MinStack()</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> array:</span><br><span class="line">        ms.push(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(array)):</span><br><span class="line">        _print(ms)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">初始化数组:  [80, 65, 4, 52, 90, 37, 70, 52, -1, 90, -1]</span><br><span class="line">抛出栈顶元素: -1, 当前数组: [80, 65, 4, 52, 90, 37, 70, 52, -1, 90], 最小元素: -1</span><br><span class="line">抛出栈顶元素: 90, 当前数组: [80, 65, 4, 52, 90, 37, 70, 52, -1], 最小元素: -1</span><br><span class="line">抛出栈顶元素: -1, 当前数组: [80, 65, 4, 52, 90, 37, 70, 52], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 52, 当前数组: [80, 65, 4, 52, 90, 37, 70], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 70, 当前数组: [80, 65, 4, 52, 90, 37], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 37, 当前数组: [80, 65, 4, 52, 90], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 90, 当前数组: [80, 65, 4, 52], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 52, 当前数组: [80, 65, 4], 最小元素: 4</span><br><span class="line">抛出栈顶元素: 4, 当前数组: [80, 65], 最小元素: 65</span><br><span class="line">抛出栈顶元素: 65, 当前数组: [80], 最小元素: 80</span><br><span class="line">抛出栈顶元素: 80, 当前数组: [], 最小元素: None</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目:&lt;br&gt;实现一个栈, 该栈带有出栈(pop), 入栈(push), 取最小元素(get_min)三个方法, 并且保证三个方法的时间复杂度都是O(1).&lt;br&gt;注: 只是需要通过get_min获取到最小元素, 并不是说pop出来的要是最小元素.&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]django - QuerySet特性及高级使用技巧，如何减少数据库的访问</title>
    <link href="http://yoursite.com/2021/01/30/django-QuerySet%E7%89%B9%E6%80%A7%E5%8F%8A%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%8C%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2021/01/30/django-QuerySet%E7%89%B9%E6%80%A7%E5%8F%8A%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%EF%BC%8C%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BF%E9%97%AE/</id>
    <published>2021-01-30T08:34:00.000Z</published>
    <updated>2021-02-01T05:34:53.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/OyJy6Do4_4eA7tMXU0NlZQ" target="_blank" rel="noopener">QuerySet特性及高级使用技巧，如何减少数据库的访问，节省内存，提升网站性能。</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>对于中大型网站或Web APP而言，最影响网站性能的就是数据库查询部分了。一是因为反复从数据库读写数据很消耗时间和计算资源，二是当返回的查询数据集queryset非常大时还会占据很多内存。</p><h3 id="什么是QuerySet"><a href="#什么是QuerySet" class="headerlink" title="什么是QuerySet"></a>什么是QuerySet</h3><p>QuerySet是Django提供的强大的数据库接口(API)。正是因为通过它，我们可以使用filter, exclude, get等方法进行数据库查询，而不需要使用原始的SQL语言与数据库进行交互。从数据库中查询出来的结果一般是一个集合，这个集合叫就做 queryset。</p><h3 id="Django的QuerySet是惰性的"><a href="#Django的QuerySet是惰性的" class="headerlink" title="Django的QuerySet是惰性的"></a>Django的QuerySet是惰性的</h3><p>Django的QuerySet是惰性的。下例中article_list试图从数据库查询一个标题含有django的全部文章列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br></pre></td></tr></table></figure><p>但是当我们定义article_list的时候，Django的数据接口QuerySet并没有对数据库进行任何查询。无论你加多少过滤条件，Django都不会对数据库进行查询。只有当你需要对article_list做进一步运算时（比如打印出查询结果，判断是否存在，统计查询结果长度)，Django才会真正执行对数据库的查询(见下例1)。这个过程被称为queryset的<code>执行(evaluation)</code>。Django这样设计的本意是尽量减少对数据库的无效操作，比如查询了结果而不用是计算资源的很大浪费。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example 1</span></span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">    print(article.title)</span><br></pre></td></tr></table></figure><h3 id="Django的QuerySet自带缓存-Cache"><a href="#Django的QuerySet自带缓存-Cache" class="headerlink" title="Django的QuerySet自带缓存(Cache)"></a>Django的QuerySet自带缓存(Cache)</h3><p>在例1中，当你遍历queryset(article_list)时，所有匹配的记录会从数据库获取。这些结果会载入内存并保存在queryset内置的cache中。这样如果你再次遍历或读取这个article_list时，Django就不需要重复查询了，这样也可以减少对数据库的查询。</p><p>下例中例2比例3要好，因为在你打印文章标题后，Django不仅执行了查询，还把查询到的article_list放在了缓存里。这个article_list是可以复用的。例3就不行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 2: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">    print(article.title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 3: Bad</span></span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> Article.objects.filter(title__contains=<span class="string">"django"</span>):</span><br><span class="line">    print(article.title)</span><br></pre></td></tr></table></figure><h3 id="用if也会导致queryset的执行"><a href="#用if也会导致queryset的执行" class="headerlink" title="用if也会导致queryset的执行"></a>用if也会导致queryset的执行</h3><p>不知道你注意到上述例2中有个问题没有？万一article_list是个空数据集呢? 虽然for….in…用到空集合上也不会出现raise什么错误，但专业优秀的我们怎么能允许这样的低级事情发生呢？最好的做法就是在loop前加个if判断（例4）。因为django会对执行过的queryset进行缓存(if也会导致queryset执行, 缓存article_list)，所以我们在遍历article_list时不用担心Django会对数据库进行二次查询。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 4: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br><span class="line"><span class="keyword">if</span> article_list:</span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">        print(article.title)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No records"</span>)</span><br></pre></td></tr></table></figure><p>但有时我们只希望了解查询的结果是否存在，而不需要使用整个数据集，这时if触发整个queryset的缓存变成了一件坏事情。哎，程序员要担心的事情着不少。这时你可以用exists()方法。与if判断不同，exists只会检查查询结果是否存在，返回True或False，而不会缓存article_list(见例5）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 5: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br><span class="line"><span class="keyword">if</span> article_list.exists():</span><br><span class="line">    print(<span class="string">"Records found."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"No records"</span>)</span><br></pre></td></tr></table></figure><p><code>注意</code>: 判断查询结果是否存在到底用if还是exists取决于你是否希望缓存查询数据集复用，如果是用if，反之用exists。</p><h3 id="统计查询结果数量优选count方法"><a href="#统计查询结果数量优选count方法" class="headerlink" title="统计查询结果数量优选count方法"></a>统计查询结果数量优选count方法</h3><p><code>len()</code>与<code>count()</code>均能统计查询结果的数量。一般来说count更快，因为它是<code>从数据库层面直接获取查询结果的数量</code>，而不是返回整个数据集，而len会导致queryset的执行，需要将整个queryset载入内存后才能统计其长度。但事情也没有绝对，如果<code>数据集queryset已经在缓存里了，使用len更快</code>，因为它不需要跟数据库再次打交道。</p><p>下面三个例子中，只有例7最差，尽量不要用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 6: Good</span></span><br><span class="line">count = Article.objects.filter(title__contains=<span class="string">"django"</span>).count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 7:Bad</span></span><br><span class="line">count = Article.objects.filter(title__contains=<span class="string">"django"</span>).len()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 8: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>)</span><br><span class="line"><span class="keyword">if</span> article_list:</span><br><span class="line">    print(<span class="string">"&#123;&#125; records found."</span>.format(article_list.len()))</span><br></pre></td></tr></table></figure><h3 id="当queryset非常大时，数据请按需去取"><a href="#当queryset非常大时，数据请按需去取" class="headerlink" title="当queryset非常大时，数据请按需去取"></a>当queryset非常大时，数据请按需去取</h3><p>当查询到的queryset的非常大时，会大量占用内存(缓存)。我们可以使用<code>values</code>和<code>value_list</code>方法按需提取数据。比如例1中我们只需要打印文章标题，这时我们完全没有必要把每篇文章对象的全部信息都提取出来载入到内存中。我们可以做如下改进（例9）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 9: Good</span></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>).values(<span class="string">'title'</span>)</span><br><span class="line"><span class="keyword">if</span> article_list:</span><br><span class="line">    print(article.title)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">article_list = Article.objects.filter(title__contains=<span class="string">"django"</span>).values_list(<span class="string">'id'</span>, <span class="string">'title'</span>)</span><br><span class="line"><span class="keyword">if</span> article_list:</span><br><span class="line">    print(article.title)</span><br></pre></td></tr></table></figure><p><code>注意</code>: values和values_list返回的是字典形式字符串数据，而不是对象集合。如果不理解请不要乱用。<br>另外还可以使用iterator()方法可以优化程序对内存的使用，其工作原理是不对queryset进行缓存，而是采用迭代方法逐一返回查询结果，但这有时会增加数据库的访问次数，新手一般也驾驭不了。</p><h3 id="更新数据库部分字段请用update方法"><a href="#更新数据库部分字段请用update方法" class="headerlink" title="更新数据库部分字段请用update方法"></a>更新数据库部分字段请用update方法</h3><p>如果需要对数据库中的某条已有数据或某些字段进行更新，更好的方式是用update，而不是save方法。我们现在可以对比下面两个案例。例10中需要把整个Article对象的数据(标题，正文…..)先提取出来，缓存到内存中，变更信息后再写入数据库。而例11直接对标题做了更新，不需要把整个文章对象的数据载入内存，显然更高效。尽管单篇文章占用内存不多，但是万一用户非常多呢，那么占用的内存加起来也是很恐怖的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example 10: Bad</span></span><br><span class="line">article = Article.objects.get(id=<span class="number">10</span>)</span><br><span class="line">Article.title = <span class="string">"Django"</span></span><br><span class="line">article.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example 11: Good</span></span><br><span class="line">Article.objects.filter(id=<span class="number">10</span>).update(title=<span class="string">'Django'</span>)</span><br></pre></td></tr></table></figure><p>update方法还会返回已更新条目的数量，这点也非常有用。当然事情也没有绝对，save方法对于单个模型的更新还是很有优势的，比如save(commit=False), article.author = request.user等等事情update都做不来。</p><h3 id="专业地使用explain方法"><a href="#专业地使用explain方法" class="headerlink" title="专业地使用explain方法"></a>专业地使用explain方法</h3><p>Django 2.1中QuerySet新增了explain方法，可以统计一个查询所消耗的执行时间。这可以帮助程序员更好地优化查询结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(Blog.objects.filter(title=<span class="string">'My Blog'</span>).explain(verbose=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">Seq Scan on public.blog  (cost=<span class="number">0.00</span>.<span class="number">.35</span><span class="number">.50</span> rows=<span class="number">10</span> width=<span class="number">12</span>) (actual time=<span class="number">0.004</span>.<span class="number">.0</span><span class="number">.004</span> rows=<span class="number">10</span> loops=<span class="number">1</span>)</span><br><span class="line">  Output: id, title</span><br><span class="line">  Filter: (blog.title = <span class="string">'My Blog'</span>::bpchar)</span><br><span class="line">Planning time: <span class="number">0.064</span> ms</span><br><span class="line">Execution time: <span class="number">0.058</span> ms</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Django QuerySet的惰性和缓存特性对于减少数据库的访问次数非常有用。你需要根据不同应用场景选择合适的方法(比如exists, count, update, values) 来减少数据库的访问，减少查询结果占用的内存空间从而提升网站的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/OyJy6Do4_4eA7tMXU0NlZQ&quot; target=&quot;_b
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 - 优先队列</title>
    <link href="http://yoursite.com/2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</id>
    <published>2021-01-26T14:48:21.000Z</published>
    <updated>2021-01-26T14:48:22.879Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    优先队列</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.array = list()</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        入队</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.array.append(element)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        self.up_adjust()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">up_adjust</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        向上调整</span></span><br><span class="line"><span class="string">        插入元素后, 放在最末尾</span></span><br><span class="line"><span class="string">        需要往上调整, 变成最大堆</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 插入的元素的位置</span></span><br><span class="line">        child_index = self.size - <span class="number">1</span></span><br><span class="line">        parent_index = (child_index - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 插入的元素, 一直往上移动</span></span><br><span class="line">        tmp = self.array[child_index]</span><br><span class="line">        <span class="comment"># 直到移动到第一个根节点, 或者比父节点小</span></span><br><span class="line">        <span class="keyword">while</span> child_index &gt; <span class="number">0</span> <span class="keyword">and</span> tmp &gt; self.array[parent_index]:</span><br><span class="line">            <span class="comment"># tmp往上移动, 将父节点赋值给子节点</span></span><br><span class="line">            self.array[child_index] = self.array[parent_index]</span><br><span class="line">            <span class="comment"># 往上移动一层</span></span><br><span class="line">            child_index = parent_index</span><br><span class="line">            parent_index = (child_index - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 移动到最终位置</span></span><br><span class="line">        self.array[child_index] = tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取优先队列的最大优先值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.size &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"队列为空"</span>)</span><br><span class="line">        <span class="comment"># 返回最大优先值</span></span><br><span class="line">        head = self.array[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 将最后一个节点移动到根节点位置</span></span><br><span class="line">        self.array[<span class="number">0</span>] = self.array[self.size - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 自顶向下移动</span></span><br><span class="line">        self.down_adjust()</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">down_adjust</span><span class="params">(self)</span>:</span></span><br><span class="line">        parent_index = <span class="number">0</span></span><br><span class="line">        tmp = self.array[parent_index]</span><br><span class="line">        child_index = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> child_index &lt; self.size:</span><br><span class="line">            <span class="comment"># 如果有右孩子节点, 并且值大于左孩子节点, 那么父节点往右孩子节点移动</span></span><br><span class="line">            <span class="comment"># 需要构建最大堆, 所以需要保证父节点要大于子节点</span></span><br><span class="line">            <span class="keyword">if</span> child_index + <span class="number">1</span> &lt; self.size <span class="keyword">and</span> self.array[child_index + <span class="number">1</span>] &gt; self.array[child_index]:</span><br><span class="line">                child_index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 父节点并最大子节点都大, 那么退出</span></span><br><span class="line">            <span class="keyword">if</span> tmp &gt;= self.array[child_index]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 将最大子节点移动到父节点位置</span></span><br><span class="line">            self.array[parent_index] = self.array[child_index]</span><br><span class="line">            <span class="comment"># 移动到子节点位置</span></span><br><span class="line">            parent_index = child_index</span><br><span class="line">            <span class="comment"># 判断左孩子节点</span></span><br><span class="line">            child_index = <span class="number">2</span> * child_index + <span class="number">1</span></span><br><span class="line">        self.array[parent_index] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    queue = PriorityQueue()</span><br><span class="line">    queue.enqueue(<span class="number">3</span>)</span><br><span class="line">    queue.enqueue(<span class="number">20</span>)</span><br><span class="line">    queue.enqueue(<span class="number">30</span>)</span><br><span class="line">    queue.enqueue(<span class="number">50</span>)</span><br><span class="line">    queue.enqueue(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(queue.dequeue())</span><br><span class="line">    print(queue.dequeue())</span><br><span class="line">    print(queue.dequeue())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>django - LocMemCache源码分析</title>
    <link href="http://yoursite.com/2021/01/24/django-LocMemCache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2021/01/24/django-LocMemCache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2021-01-24T01:04:00.000Z</published>
    <updated>2021-01-24T01:04:56.511Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Thread-safe in-memory cache backend."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.cache.backends.base <span class="keyword">import</span> DEFAULT_TIMEOUT, BaseCache</span><br><span class="line"><span class="keyword">from</span> django.utils.synch <span class="keyword">import</span> RWLock</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> django.utils.six.moves <span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Global in-memory store of cache data. Keyed by name, to provide</span></span><br><span class="line"><span class="comment"># multiple named local memory caches.</span></span><br><span class="line">_caches = &#123;&#125;</span><br><span class="line">_expire_info = &#123;&#125;</span><br><span class="line">_locks = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dummy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""A context manager that does nothing special."""</span></span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocMemCache</span><span class="params">(BaseCache)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, params)</span>:</span></span><br><span class="line">        BaseCache.__init__(self, params)</span><br><span class="line">        <span class="comment"># 使用字典, 保存数据到内存</span></span><br><span class="line">        <span class="comment"># 按照_cull_frequency看, 此处可以设置成OrderDict, 并且按LRU方式, 删除较少访问的数据</span></span><br><span class="line">        self._cache = _caches.setdefault(name, &#123;&#125;)</span><br><span class="line">        <span class="comment"># 存储key过期信息</span></span><br><span class="line">        self._expire_info = _expire_info.setdefault(name, &#123;&#125;)</span><br><span class="line">        <span class="comment"># 使用了读写锁</span></span><br><span class="line">        self._lock = _locks.setdefault(name, RWLock())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        添加缓存数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 生成key值</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        <span class="comment"># 对key值校验</span></span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        <span class="comment"># 获取写锁</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            <span class="comment"># 判断key值是否过期</span></span><br><span class="line">            <span class="keyword">if</span> self._has_expired(key):</span><br><span class="line">                <span class="comment"># key没有过期或者不存在, 则缓存数据</span></span><br><span class="line">                self._set(key, pickled, timeout)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None, version=None, acquire_lock=True)</span>:</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        pickled = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 获取读锁</span></span><br><span class="line">        <span class="keyword">with</span> (self._lock.reader() <span class="keyword">if</span> acquire_lock <span class="keyword">else</span> dummy()):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._has_expired(key):</span><br><span class="line">                pickled = self._cache[key]</span><br><span class="line">        <span class="comment"># 获取到了数据</span></span><br><span class="line">        <span class="keyword">if</span> pickled <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 反序列化</span></span><br><span class="line">                <span class="keyword">return</span> pickle.loads(pickled)</span><br><span class="line">            <span class="keyword">except</span> pickle.PickleError:</span><br><span class="line">                <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> (self._lock.writer() <span class="keyword">if</span> acquire_lock <span class="keyword">else</span> dummy()):</span><br><span class="line">            <span class="comment"># 如果没有拿到数据, 则从缓存和过期信息中, 删除所有key值</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">del</span> self._cache[key]</span><br><span class="line">                <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        实际上的缓存操作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 判断缓存的key值数量, 是否超过配置数量, 默认是300</span></span><br><span class="line">        <span class="keyword">if</span> len(self._cache) &gt;= self._max_entries:</span><br><span class="line">            <span class="comment">#</span></span><br><span class="line">            self._cull()</span><br><span class="line">        self._cache[key] = value</span><br><span class="line">        <span class="comment"># 缓存过期时间信息</span></span><br><span class="line">        self._expire_info[key] = self.get_backend_timeout(timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        缓存操作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            self._set(key, pickled, timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self, key, delta=<span class="number">1</span>, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        数值增加</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            value = self.get(key, version=version, acquire_lock=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"Key '%s' not found"</span> % key)</span><br><span class="line">            <span class="comment"># 没有确保value是数字判断?</span></span><br><span class="line">            new_value = value + delta</span><br><span class="line">            key = self.make_key(key, version=version)</span><br><span class="line">            pickled = pickle.dumps(new_value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">            self._cache[key] = pickled</span><br><span class="line">        <span class="keyword">return</span> new_value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_key</span><span class="params">(self, key, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        判断key值是否存在</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="keyword">with</span> self._lock.reader():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._has_expired(key):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不存在则清空key值相关数据</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            <span class="comment"># ...还不如直接调用self._delete(key)函数</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">del</span> self._cache[key]</span><br><span class="line">                <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_has_expired</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        key值是否过期</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 获取过期时间</span></span><br><span class="line">        exp = self._expire_info.get(key, <span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 如果过期时间不存在(key值不存在的意思), 获取超过当前时间</span></span><br><span class="line">        <span class="keyword">if</span> exp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> exp &gt; time.time():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_cull</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        删除频率</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 如果设置为0, 则清空所有缓存</span></span><br><span class="line">        <span class="comment"># 默认是3</span></span><br><span class="line">        <span class="keyword">if</span> self._cull_frequency == <span class="number">0</span>:</span><br><span class="line">            self.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 按取模操作, 按照设置的频率删除数据</span></span><br><span class="line">            doomed = [k <span class="keyword">for</span> (i, k) <span class="keyword">in</span> enumerate(self._cache) <span class="keyword">if</span> i % self._cull_frequency == <span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> doomed:</span><br><span class="line">                self._delete(k)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_delete</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self._cache[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, key, version=None)</span>:</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            self._delete(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        清空所有缓存信息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cache.clear()</span><br><span class="line">        self._expire_info.clear()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>django - 读写锁</title>
    <link href="http://yoursite.com/2021/01/23/django-%E8%AF%BB%E5%86%99%E9%94%81/"/>
    <id>http://yoursite.com/2021/01/23/django-%E8%AF%BB%E5%86%99%E9%94%81/</id>
    <published>2021-01-23T05:13:37.000Z</published>
    <updated>2021-01-23T05:23:21.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码来源"><a href="#代码来源" class="headerlink" title="代码来源"></a>代码来源</h3><p>django1.11 版本, 完整源码路径<code>from django.utils.synch import RWLock</code></p><p>实现方法主要是<code>RLock+Semaphore</code>结合使用.</p><p>在阅读<code>LocMemCache</code>本地内存缓存代码时, 注意到这一部分功能, 添加解释后以后可以用.</p><p>但在django3或者更之前的版本, 已经不再没有在<code>LocMemCache</code>中用<code>RWLock</code>, 而是直接使用python自带的<code>from threading import Lock</code>了.</p><a id="more"></a><h3 id="源码及解释"><a href="#源码及解释" class="headerlink" title="源码及解释"></a>源码及解释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Synchronization primitives:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - reader-writer lock (preference to writers)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(Contributed to Django by eugene@lazutkin.com)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RWLock</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Classic implementation of reader-writer lock with preference to writers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Readers can access a resource simultaneously.</span></span><br><span class="line"><span class="string">    Writers get an exclusive access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    API is self-descriptive:</span></span><br><span class="line"><span class="string">        reader_enters()</span></span><br><span class="line"><span class="string">        reader_leaves()</span></span><br><span class="line"><span class="string">        writer_enters()</span></span><br><span class="line"><span class="string">        writer_leaves()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 可重入锁</span></span><br><span class="line">        self.mutex = threading.RLock()</span><br><span class="line">        <span class="comment"># 读锁信号量</span></span><br><span class="line">        self.can_read = threading.Semaphore(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 写锁信号量</span></span><br><span class="line">        self.can_write = threading.Semaphore(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 正在进行读操作的数量</span></span><br><span class="line">        self.active_readers = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 正在写操作的数量</span></span><br><span class="line">        self.active_writers = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 等待操作</span></span><br><span class="line">        self.waiting_readers = <span class="number">0</span></span><br><span class="line">        self.waiting_writers = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader_enters</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 加锁</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 如果没有进行写操作</span></span><br><span class="line">            <span class="keyword">if</span> self.active_writers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 那么读操作+1</span></span><br><span class="line">                self.active_readers += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 激活读操作</span></span><br><span class="line">                self.can_read.release()</span><br><span class="line">            <span class="comment"># 否则, 等待中的读操作+1</span></span><br><span class="line">            <span class="comment"># 等待写操作完成</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.waiting_readers += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 获取读锁</span></span><br><span class="line">        self.can_read.acquire()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader_leaves</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 释放</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 读操作数-1</span></span><br><span class="line">            self.active_readers -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 没有读操作, 并且有等待中的写操作</span></span><br><span class="line">            <span class="keyword">if</span> self.active_readers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers != <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 释放写操作的锁</span></span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.waiting_writers -= <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @contextlib.contextmanager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># contextlib.contextmanager装饰器的作用</span></span><br><span class="line">        <span class="comment"># 当代码被 with self.reader() 修饰时, 先执行yield之前的代码, 再执行代码块, 最后执行yield后的代码</span></span><br><span class="line">        <span class="comment"># 以此完成先获取锁再释放锁的操作</span></span><br><span class="line">        <span class="comment"># 获取锁</span></span><br><span class="line">        self.reader_enters()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 释放锁</span></span><br><span class="line">            self.reader_leaves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer_enters</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 释放写锁</span></span><br><span class="line">            <span class="keyword">if</span> self.active_writers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers == <span class="number">0</span> <span class="keyword">and</span> self.active_readers == <span class="number">0</span>:</span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.waiting_writers += <span class="number">1</span></span><br><span class="line">        self.can_write.acquire()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer_leaves</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            self.active_writers -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 释放写锁</span></span><br><span class="line">            <span class="keyword">if</span> self.waiting_writers != <span class="number">0</span>:</span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.waiting_writers -= <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line">            <span class="comment"># 释放读锁</span></span><br><span class="line">            <span class="keyword">elif</span> self.waiting_readers != <span class="number">0</span>:</span><br><span class="line">                t = self.waiting_readers</span><br><span class="line">                self.waiting_readers = <span class="number">0</span></span><br><span class="line">                self.active_readers += t</span><br><span class="line">                <span class="keyword">while</span> t &gt; <span class="number">0</span>:</span><br><span class="line">                    self.can_read.release()</span><br><span class="line">                    t -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @contextlib.contextmanager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.writer_enters()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.writer_leaves()</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lock = RWLock()</span><br><span class="line"><span class="keyword">with</span> lock.reader():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">with</span> lock.writer():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码来源&quot;&gt;&lt;a href=&quot;#代码来源&quot; class=&quot;headerlink&quot; title=&quot;代码来源&quot;&gt;&lt;/a&gt;代码来源&lt;/h3&gt;&lt;p&gt;django1.11 版本, 完整源码路径&lt;code&gt;from django.utils.synch import RWLock&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实现方法主要是&lt;code&gt;RLock+Semaphore&lt;/code&gt;结合使用.&lt;/p&gt;
&lt;p&gt;在阅读&lt;code&gt;LocMemCache&lt;/code&gt;本地内存缓存代码时, 注意到这一部分功能, 添加解释后以后可以用.&lt;/p&gt;
&lt;p&gt;但在django3或者更之前的版本, 已经不再没有在&lt;code&gt;LocMemCache&lt;/code&gt;中用&lt;code&gt;RWLock&lt;/code&gt;, 而是直接使用python自带的&lt;code&gt;from threading import Lock&lt;/code&gt;了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>golang - 解析yaml配置文件</title>
    <link href="http://yoursite.com/2020/12/14/golang-%E8%A7%A3%E6%9E%90yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/12/14/golang-%E8%A7%A3%E6%9E%90yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2020-12-14T13:09:00.000Z</published>
    <updated>2021-01-26T14:49:08.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-解析yaml配置文件"><a href="#golang-解析yaml配置文件" class="headerlink" title="golang - 解析yaml配置文件"></a>golang - 解析yaml配置文件</h1><h3 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u <span class="string">"github.com/spf13/viper"</span></span><br></pre></td></tr></table></figure><h3 id="文件整体结构"><a href="#文件整体结构" class="headerlink" title="文件整体结构"></a>文件整体结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── configs</span><br><span class="line">│   └── stand_alone.yaml</span><br><span class="line">└── pkg</span><br><span class="line">    └── settings</span><br><span class="line">        ├── section.go</span><br><span class="line">        └── setting.go</span><br></pre></td></tr></table></figure><h3 id="yaml配置文件"><a href="#yaml配置文件" class="headerlink" title="yaml配置文件"></a>yaml配置文件</h3><p>路径: configs/stand_alone.yaml</p><p>详细格式可以参考:</p><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></p><p><a href="https://en.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">YAML</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server:</span></span><br><span class="line">  <span class="attr">StorageRoot:</span> <span class="string">"Storage/upload"</span></span><br><span class="line">  <span class="attr">ListenAddress:</span> <span class="string">":8888"</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="定义Setting结构体"><a href="#定义Setting结构体" class="headerlink" title="定义Setting结构体"></a>定义Setting结构体</h3><p>路径: pkg/settings/setting.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/spf13/viper"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Setting <span class="keyword">struct</span> &#123;</span><br><span class="line">    vp *viper.Viper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSetting</span><span class="params">()</span> <span class="params">(*Setting, error)</span></span> &#123;</span><br><span class="line">    vp := viper.New()</span><br><span class="line">    vp.SetConfigName(<span class="string">"stand_alone.yaml"</span>)</span><br><span class="line">    vp.AddConfigPath(<span class="string">"stand_alone/configs"</span>)</span><br><span class="line">    vp.SetConfigType(<span class="string">"yaml"</span>)</span><br><span class="line"></span><br><span class="line">    err := vp.ReadInConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;Setting&#123;vp&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义Section结构体"><a href="#定义Section结构体" class="headerlink" title="定义Section结构体"></a>定义Section结构体</h3><p>路径: pkg/settings/section.go</p><p>如果有多组配置, 那么按照格式, 创建多个struct变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    StorageRoot   <span class="keyword">string</span></span><br><span class="line">    ListenAddress <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Setting)</span> <span class="title">ReadSection</span><span class="params">(sType <span class="keyword">string</span>, section <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    err := s.vp.UnmarshalKey(sType, section)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"Storage/stand_alone/pkg/settings"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    setting, err := settings.NewSetting()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(<span class="string">"err: "</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> server *settings.Server</span><br><span class="line">    _ = setting.ReadSection(<span class="string">"Server"</span>, &amp;server)</span><br><span class="line">    fmt.Println(server.StorageRoot, server.ListenAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;golang-解析yaml配置文件&quot;&gt;&lt;a href=&quot;#golang-解析yaml配置文件&quot; class=&quot;headerlink&quot; title=&quot;golang - 解析yaml配置文件&quot;&gt;&lt;/a&gt;golang - 解析yaml配置文件&lt;/h1&gt;&lt;h3 id=&quot;安装第三方库&quot;&gt;&lt;a href=&quot;#安装第三方库&quot; class=&quot;headerlink&quot; title=&quot;安装第三方库&quot;&gt;&lt;/a&gt;安装第三方库&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; get -u &lt;span class=&quot;string&quot;&gt;&quot;github.com/spf13/viper&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;文件整体结构&quot;&gt;&lt;a href=&quot;#文件整体结构&quot; class=&quot;headerlink&quot; title=&quot;文件整体结构&quot;&gt;&lt;/a&gt;文件整体结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── configs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── stand_alone.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── pkg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── section.go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── setting.go&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;yaml配置文件&quot;&gt;&lt;a href=&quot;#yaml配置文件&quot; class=&quot;headerlink&quot; title=&quot;yaml配置文件&quot;&gt;&lt;/a&gt;yaml配置文件&lt;/h3&gt;&lt;p&gt;路径: configs/stand_alone.yaml&lt;/p&gt;
&lt;p&gt;详细格式可以参考:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/07/yaml.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YAML 语言教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YAML&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;StorageRoot:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Storage/upload&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;ListenAddress:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang - 使用令牌桶限制接口访问频率</title>
    <link href="http://yoursite.com/2020/12/12/golang-%E4%BD%BF%E7%94%A8%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87/"/>
    <id>http://yoursite.com/2020/12/12/golang-%E4%BD%BF%E7%94%A8%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87/</id>
    <published>2020-12-12T11:33:00.000Z</published>
    <updated>2021-01-26T14:49:22.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三方库"><a href="#三方库" class="headerlink" title="三方库"></a>三方库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/juju/ratelimit@v1<span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="令牌桶结构体"><a href="#令牌桶结构体" class="headerlink" title="令牌桶结构体"></a>令牌桶结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/juju/ratelimit"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 令牌桶信息</span></span><br><span class="line"><span class="keyword">type</span> Limiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    limiterBuckets <span class="keyword">map</span>[<span class="keyword">string</span>]*ratelimit.Bucket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 令牌Bucket</span></span><br><span class="line"><span class="keyword">type</span> LimiterBucketRule <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义键值对名称</span></span><br><span class="line">    Key <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 间隔多久放N个令牌</span></span><br><span class="line">    FillInterval time.Duration</span><br><span class="line">    <span class="comment">// 令牌桶的容量</span></span><br><span class="line">    Capacity <span class="keyword">int64</span></span><br><span class="line">    <span class="comment">// 每次到达间隔时间后所放的具体令牌数量</span></span><br><span class="line">    Quantum <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">type</span> LimiterIface <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 获取对应的限流器的键值对名称</span></span><br><span class="line">    Key(c *gin.Context) <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 获取令牌桶</span></span><br><span class="line">    GetBucket(key <span class="keyword">string</span>) (*ratelimit.Bucket, <span class="keyword">bool</span>)</span><br><span class="line">    <span class="comment">// 新增令牌桶</span></span><br><span class="line">    AddBuckets(rules ...LimiterBucketRule) LimiterIface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="实现令牌桶的接口"><a href="#实现令牌桶的接口" class="headerlink" title="实现令牌桶的接口"></a>实现令牌桶的接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/juju/ratelimit"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MethodLimiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Limiter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个令牌桶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMethodLimiter</span><span class="params">()</span> <span class="title">LimiterIface</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MethodLimiter&#123;</span><br><span class="line">        Limiter: &amp;Limiter&#123;</span><br><span class="line">            limiterBuckets: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*ratelimit.Bucket),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值对, 使用核心路由做key值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">Key</span><span class="params">(c *gin.Context)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    uri := c.Request.RequestURI</span><br><span class="line">    index := strings.Index(uri, <span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uri</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uri[:index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Bucket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">GetBucket</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(*ratelimit.Bucket, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    bucket, ok := l.limiterBuckets[key]</span><br><span class="line">    <span class="keyword">return</span> bucket, ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加bucket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">AddBuckets</span><span class="params">(rules ...LimiterBucketRule)</span> <span class="title">LimiterIface</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, rule := <span class="keyword">range</span> rules &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := l.limiterBuckets[rule.Key]; !ok &#123;</span><br><span class="line">            l.limiterBuckets[rule.Key] = ratelimit.NewBucketWithQuantum(rule.FillInterval, rule.Capacity, rule.Quantum)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/app"</span></span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/errcode"</span></span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/limiter"</span></span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RateLimiter</span><span class="params">(l limiter.LimiterIface)</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取令牌的key值</span></span><br><span class="line">        key := l.Key(c)</span><br><span class="line">        <span class="keyword">if</span> bucket, ok := l.GetBucket(key); ok &#123;</span><br><span class="line">            <span class="comment">// 传入1, 表示已使用一个令牌</span></span><br><span class="line">            count := bucket.TakeAvailable(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 如果剩余可用令牌数为0, 则抛出异常, 禁止访问</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">                response := app.NewResponse(c)</span><br><span class="line">                response.ToErrorResponse(errcode.TooManyRequests)</span><br><span class="line">                c.Abort()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c.Next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入gin的中间件"><a href="#加入gin的中间件" class="headerlink" title="加入gin的中间件"></a>加入gin的中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制了/auth的访问频率</span></span><br><span class="line"><span class="comment">// 限制时间间隔, 1秒钟</span></span><br><span class="line"><span class="comment">// 一秒钟内, 最多被访问10次</span></span><br><span class="line"><span class="comment">// 当一秒后, 重新放入10个令牌到令牌桶内, 也就是下一秒可再次被访问10次</span></span><br><span class="line"><span class="keyword">var</span> methodLimiters = limiter.NewMethodLimiter().AddBuckets(limiter.LimiterBucketRule&#123;</span><br><span class="line">    <span class="comment">// 令牌桶限制的url</span></span><br><span class="line">    Key: <span class="string">"/auth"</span>,</span><br><span class="line">    <span class="comment">// 时间间隔</span></span><br><span class="line">    FillInterval: time.Second * <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 令牌总容量</span></span><br><span class="line">    Capacity: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// 重新放入令牌桶数量</span></span><br><span class="line">    Quantum: <span class="number">10</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r := gin.New()</span><br><span class="line">r.Use(middleware.RateLimiter(methodLimiters))</span><br></pre></td></tr></table></figure><h3 id="从配置文件中读取方式"><a href="#从配置文件中读取方式" class="headerlink" title="从配置文件中读取方式"></a>从配置文件中读取方式</h3><h4 id="配置yaml"><a href="#配置yaml" class="headerlink" title="配置yaml"></a>配置yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Limiter:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Limits:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">"/auth"</span></span><br><span class="line">      <span class="attr">FillInterval:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">Capacity:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">Quantum:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">"/api/v1/tags"</span></span><br><span class="line">      <span class="attr">FillInterval:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">Capacity:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">Quantum:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="配置Setting"><a href="#配置Setting" class="headerlink" title="配置Setting"></a>配置Setting</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LimiterSetting <span class="keyword">struct</span> &#123;</span><br><span class="line">    Limits []<span class="keyword">struct</span> &#123;</span><br><span class="line">        Key          <span class="keyword">string</span></span><br><span class="line">        FillInterval time.Duration</span><br><span class="line">        Capacity     <span class="keyword">int64</span></span><br><span class="line">        Quantum      <span class="keyword">int64</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改中间件参数传入方式"><a href="#修改中间件参数传入方式" class="headerlink" title="修改中间件参数传入方式"></a>修改中间件参数传入方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newLimiter</span><span class="params">()</span> <span class="title">limiter</span>.<span class="title">LimiterIface</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rules []limiter.LimiterBucketRule</span><br><span class="line">    <span class="keyword">for</span> _, limit := <span class="keyword">range</span> global.LimiterSetting.Limits &#123;</span><br><span class="line">        rules = <span class="built_in">append</span>(rules, limiter.LimiterBucketRule&#123;</span><br><span class="line">            <span class="comment">// 令牌桶限制的url</span></span><br><span class="line">            Key: limit.Key,</span><br><span class="line">            <span class="comment">// 时间间隔</span></span><br><span class="line">            FillInterval: limit.FillInterval * time.Second,</span><br><span class="line">            <span class="comment">// 令牌总容量</span></span><br><span class="line">            Capacity: limit.Capacity,</span><br><span class="line">            <span class="comment">// 重新放入令牌桶数量</span></span><br><span class="line">            Quantum: limit.Quantum,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> methodLimiters = limiter.NewMethodLimiter().AddBuckets(rules...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> methodLimiters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Use(middleware.RateLimiter(newLimiter()))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;三方库&quot;&gt;&lt;a href=&quot;#三方库&quot; class=&quot;headerlink&quot; title=&quot;三方库&quot;&gt;&lt;/a&gt;三方库&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; get -u github.com/juju/ratelimit@v1&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h3 id=&quot;令牌桶结构体&quot;&gt;&lt;a href=&quot;#令牌桶结构体&quot; class=&quot;headerlink&quot; title=&quot;令牌桶结构体&quot;&gt;&lt;/a&gt;令牌桶结构体&lt;/h3&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; limiter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;github.com/gin-gonic/gin&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;github.com/juju/ratelimit&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 令牌桶信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Limiter &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    limiterBuckets &lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;]*ratelimit.Bucket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 令牌Bucket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; LimiterBucketRule &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 自定义键值对名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Key &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 间隔多久放N个令牌&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FillInterval time.Duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 令牌桶的容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Capacity &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 每次到达间隔时间后所放的具体令牌数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Quantum &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; LimiterIface &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取对应的限流器的键值对名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Key(c *gin.Context) &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取令牌桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GetBucket(key &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;) (*ratelimit.Bucket, &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 新增令牌桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AddBuckets(rules ...LimiterBucketRule) LimiterIface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="gin" scheme="http://yoursite.com/tags/gin/"/>
    
  </entry>
  
  <entry>
    <title>[转]使用PySnooper调试代码</title>
    <link href="http://yoursite.com/2020/11/18/%E8%BD%AC-%E4%BD%BF%E7%94%A8PySnooper%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2020/11/18/%E8%BD%AC-%E4%BD%BF%E7%94%A8PySnooper%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</id>
    <published>2020-11-18T12:01:00.000Z</published>
    <updated>2021-01-26T14:49:47.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/wSmzU4cn0mTwlrtCSENeqg" target="_blank" rel="noopener">求你了，别再用 print 调试代码了</a></p><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pip install pysnooper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> conda install -c conda-forge pysnooper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yay -S python-pysnooper</span></span><br></pre></td></tr></table></figure><h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><p>下面这段代码，定义了一个 demo_func 的函数，在里面生成一个 profile 的字典变量，然后去更新它，最后返回。</p><p>代码本身没有什么实际意义，但是用来演示 PySnooper 已经足够。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pysnooper</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">"name"</span>] = <span class="string">"写代码的明哥"</span></span><br><span class="line">    profile[<span class="string">"age"</span>] = <span class="number">27</span></span><br><span class="line">    profile[<span class="string">"gender"</span>] = <span class="string">"male"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    profile = demo_func()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><a id="more"></a><p>现在我使用终端命令行的方式来运行它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iswbm ~]# python3 demo.py </span><br><span class="line">Source path:... demo.py</span><br><span class="line">17:52:49.624943 call         4 def demo_func():</span><br><span class="line">17:52:49.625124 line         5     profile = &#123;&#125;</span><br><span class="line">New var:....... profile = &#123;&#125;</span><br><span class="line">17:52:49.625156 line         6     profile["name"] = "写代码的明哥"</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥'&#125;</span><br><span class="line">17:52:49.625207 line         7     profile["age"] = 27</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥', 'age': 27&#125;</span><br><span class="line">17:52:49.625254 line         8     profile["gender"] = "male"</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥', 'age': 27, 'gender': 'male'&#125;</span><br><span class="line">17:52:49.625306 line        10     return profile</span><br><span class="line">17:52:49.625344 return      10     return profile</span><br><span class="line">Return value:.. &#123;'name': '写代码的明哥', 'age': 27, 'gender': 'male'&#125;</span><br><span class="line">Elapsed time: 00:00:00.000486</span><br></pre></td></tr></table></figure><p>可以看到 PySnooper 把函数运行的过程全部记录了下来，包括：</p><ul><li>代码的片段、行号等信息，以及每一行代码是何时调用的？</li><li>函数内局部变量的值如何变化的？何时新增了变量，何时修改了变量。</li><li>函数的返回值是什么？</li><li>运行函数消耗了多少时间？<br>而作为开发者，要得到这些如此详细的调试信息，你需要做的非常简单，只要给你想要调试的函数上带上一顶帽子（装饰器） – <code>@pysnooper.snoop()</code> 即可。</li></ul><h3 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h3><h4 id="重定向到日志文件"><a href="#重定向到日志文件" class="headerlink" title="重定向到日志文件"></a>重定向到日志文件</h4><p><code>@pysnooper.snoop()</code> 不加任何参数时，会默认将调试的信息输出到标准输出。</p><p>对于单次调试就能解决的 BUG ，这样没有什么问题，但是有一些 BUG 只有在特定的场景下才会出现，需要你把程序放在后面跑个一段时间才能复现。</p><p>这种情况下，你可以将调试信息重定向输出到某一日志文件中，方便追溯排查。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(output='/var/log/debug.log')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="跟踪非局部变量值"><a href="#跟踪非局部变量值" class="headerlink" title="跟踪非局部变量值"></a>跟踪非局部变量值</h4><p>PySnooper 是以函数为单位进行调试的，它默认只会跟踪函数体内的局部变量，若想跟踪全局变量，可以给 <code>pysnooper.snoop()</code> 加上 <code>watch</code> 参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">out = &#123;<span class="string">"foo"</span>: <span class="string">"bar"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(watch=('out["foo"]'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>如此一来，PySnooper 会在 <code>out[&quot;foo&quot;]</code> 值有变化时，也将其打印出来<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200531.png" alt=""><br>watch 参数，接收一个可迭代对象（可以是list 或者 tuple），里面的元素为字符串表达式，什么意思呢？看下面例子就知道了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(watch=('out["foo"]', 'foo.bar', 'self.foo["bar"]'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>和 <code>watch</code> 相对的，<code>pysnooper.snoop()</code> 还可以接收一个函数 <code>watch_explode</code>，表示除了这几个参数外的其他所有全局变量都监控。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(watch_explode=('foo', 'bar'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="设置跟踪函数的深度"><a href="#设置跟踪函数的深度" class="headerlink" title="设置跟踪函数的深度"></a>设置跟踪函数的深度</h4><p>当你使用 PySnooper 调试某个函数时，若该函数中还调用了其他函数，PySnooper 是不会傻傻的跟踪进去的。</p><p>如果你想继续跟踪该函数中调用的其他函数，可以通过指定 <code>depth</code> 参数来设置跟踪深度（不指定的话默认为 1）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(depth=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><h4 id="设置调试日志的前缀"><a href="#设置调试日志的前缀" class="headerlink" title="设置调试日志的前缀"></a>设置调试日志的前缀</h4><p>当你在使用 PySnooper 跟踪多个函数时，调试的日志会显得杂乱无章，不方便查看。</p><p>在这种情况下，PySnooper 提供了一个参数，方便你为不同的函数设置不同的标志，方便你在查看日志时进行区分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(output="/var/log/debug.log", prefix="demo_func: ")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200734.png" alt=""></p><h4 id="设置最大的输出长度"><a href="#设置最大的输出长度" class="headerlink" title="设置最大的输出长度"></a>设置最大的输出长度</h4><p>默认情况下，PySnooper 输出的变量和异常信息，如果超过 100 个字符，被会截断为 100 个字符。</p><p>当然你也可以通过指定参数 进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(max_variable_length=200）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>您也可以使用max_variable_length=None它从不截断它们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(max_variable_length=None）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="支持多线程调试模式"><a href="#支持多线程调试模式" class="headerlink" title="支持多线程调试模式"></a>支持多线程调试模式</h4><p>PySnooper 同样支持多线程的调试，通过设置参数 <code>thread_info=True</code>，它就会在日志中打印出是在哪个线程对变量进行的修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(thread_info=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>效果如下<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200903.png" alt=""></p><h4 id="自定义对象的格式输出"><a href="#自定义对象的格式输出" class="headerlink" title="自定义对象的格式输出"></a>自定义对象的格式输出</h4><p><code>pysnooper.snoop()</code> 函数有一个参数是 <code>custom_repr</code>，它接收一个元组对象。</p><p>在这个元组里，你可以指定特定类型的对象以特定格式进行输出。</p><p>这边我举个例子。</p><p>假如我要跟踪 <code>person</code> 这个 <code>Person</code> 类型的对象，由于它不是常规的 Python 基础类型，PySnooper 是无法正常输出它的信息的。</p><p>因此我在 <code>pysnooper.snoop()</code> 函数中设置了 <code>custom_repr</code> 参数，该参数的第一个元素为 <code>Person</code>，第二个元素为 <code>print_persion_obj</code> 函数。</p><p>PySnooper 在打印对象的调试信息时，会逐个判断它是否是 Person 类型的对象，若是，就将该对象传入 <code>print_persion_obj</code> 函数中，由该函数来决定如何显示这个对象的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pysnooper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_person_obj</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"&lt;Person <span class="subst">&#123;obj.name&#125;</span> <span class="subst">&#123;obj.age&#125;</span> <span class="subst">&#123;obj.gender&#125;</span>&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(Person, print_person_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    person = Person()</span><br><span class="line">    person.name = <span class="string">"写代码的明哥"</span></span><br><span class="line">    person.age = <span class="number">27</span></span><br><span class="line">    person.gender = <span class="string">"male"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    profile = demo_func()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>运行一下，观察一下效果。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118201026.png" alt=""><br>如果你要自定义格式输出的有很多个类型，那么 custom_repr 参数的值可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=((Person, print_person_obj), (numpy.ndarray, print_ndarray)))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>还有一点我提醒一下，元组的第一个元素可以是类型（如类名Person 或者其他基础类型 list等），也可以是一个判断对象类型的函数。</p><p>也就是说，下面三种写法是等价的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 【第一种写法】</span></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(Person, print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【第二种写法】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_persion_obj</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> isinstance(obj, Person)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(is_persion_obj, print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【第三种写法】</span></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(lambda obj: isinstance(obj, Person), print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/wSmzU4cn0mTwlrtCSENeqg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;求你了，别再用 print 调试代码了&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;快速安装&quot;&gt;&lt;a href=&quot;#快速安装&quot; class=&quot;headerlink&quot; title=&quot;快速安装&quot;&gt;&lt;/a&gt;快速安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; python3 -m pip install pysnooper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; conda install -c conda-forge pysnooper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; yay -S python-pysnooper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;简单案例&quot;&gt;&lt;a href=&quot;#简单案例&quot; class=&quot;headerlink&quot; title=&quot;简单案例&quot;&gt;&lt;/a&gt;简单案例&lt;/h3&gt;&lt;p&gt;下面这段代码，定义了一个 demo_func 的函数，在里面生成一个 profile 的字典变量，然后去更新它，最后返回。&lt;/p&gt;
&lt;p&gt;代码本身没有什么实际意义，但是用来演示 PySnooper 已经足够。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pysnooper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@pysnooper.snoop()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;demo_func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;写代码的明哥&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile[&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile[&lt;span class=&quot;string&quot;&gt;&quot;gender&quot;&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;male&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    profile = demo_func()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>友情链接</title>
    <link href="http://yoursite.com/2020/11/15/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2020/11/15/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</id>
    <published>2020-11-15T08:32:00.000Z</published>
    <updated>2021-01-14T03:34:26.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="https://docs.python.org/zh-cn/3/index.html" target="_blank" rel="noopener">Python3官方文档</a></p><p><a href="https://docs.djangoproject.com/en/2.2/" target="_blank" rel="noopener">Django官方文档</a></p><p><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">Django中文版</a></p><p><a href="https://www.django-rest-framework.org/" target="_blank" rel="noopener">rest-framework官方文档</a></p><p><a href="http://drf.jiuyou.info/#/" target="_blank" rel="noopener">rest-framework文档中文版</a></p><p><a href="https://redis-py.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">python-redis官方文档</a></p><p><a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/#id8" target="_blank" rel="noopener">django-redis 中文文档</a></p><p><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ官方文档</a></p><h3 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h3><p><a href="https://www.the5fire.com" target="_blank" rel="noopener">the5fire: Django企业开发实战作者</a></p><p><a href="https://github.com/MoonMonsters/eat_pyspark_in_10_days" target="_blank" rel="noopener">如何用10天吃掉pyspark</a></p><h3 id="Golang学习"><a href="#Golang学习" class="headerlink" title="Golang学习"></a>Golang学习</h3><p><a href="https://lailin.xyz/post/go-design-pattern.html" target="_blank" rel="noopener">golang设计模式</a></p><p><a href="https://wskdsgcf.gitbook.io/mastering-go-zh-cn/" target="_blank" rel="noopener">mastering-go-zh-cn: golang入门</a></p><p><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md" target="_blank" rel="noopener">the-way-to-go_ZH_CN: golang入门</a></p><p><a href="https://github.com/geektutu/7days-golang" target="_blank" rel="noopener">从零开始系列…</a></p><p><a href="https://chai2010.cn/advanced-go-programming-book/" target="_blank" rel="noopener">Go语言高级编程(Advanced Go Programming)</a></p><p><a href="https://draveness.me/golang/" target="_blank" rel="noopener">Go 语言设计与实现</a></p><p><a href="https://geektutu.com" target="_blank" rel="noopener">极客兔兔</a></p><h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p><a href="https://gitee.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener">Redis可视化客户端</a></p><p><a href="https://dbeaver.io/download/" target="_blank" rel="noopener">数据库客户端</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方网站&quot;&gt;&lt;a href=&quot;#官方网站&quot; class=&quot;headerlink&quot; title=&quot;官方网站&quot;&gt;&lt;/a&gt;官方网站&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/index.html&quot; target=&quot;_
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang - 接口文档框架swagger</title>
    <link href="http://yoursite.com/2020/11/15/golang-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6swagger/"/>
    <id>http://yoursite.com/2020/11/15/golang-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6swagger/</id>
    <published>2020-11-15T06:20:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/swaggo/swag/cmd/swag@v1.6.5</span><br><span class="line">go get -u github.com/swaggo/gin-swagger@v1.2.0</span><br><span class="line">go get -u github.com/swaggo/files</span><br><span class="line">go get -u github.com/alecthomas/template</span><br></pre></td></tr></table></figure><p>验证是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ swag -v</span><br><span class="line">swag version v1.6.5</span><br></pre></td></tr></table></figure><h3 id="写入注解"><a href="#写入注解" class="headerlink" title="写入注解"></a>写入注解</h3><p>在安装完Swagger关联库后, 就需要在项目里的API接口编写注解,以便后续在生成时能够正确的运行.</p><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Summary</td><td>摘要</td></tr><tr><td>@Produce</td><td>API可以长生的MIME类型的列表. 我们可以把MIME类型简单的理解为响应类型, 例如JSON, XML, HTML等.</td></tr><tr><td>@Param</td><td>参数格式, 从左到右分别为: 参数名, 入参类型, 数据类型, 是否必填和注释</td></tr><tr><td>@Success</td><td>响应成功, 从左到右分别为: 状态码, 参数类型, 数据类型和注释</td></tr><tr><td>@Failure</td><td>响应失败, 从左到右分别为状态码, 参数类型, 数据类型和注释</td></tr><tr><td>@Router</td><td>路由, 从左到右分别为: 路由地址和HTTP方法</td></tr></tbody></table><h4 id="API函数代码示例"><a href="#API函数代码示例" class="headerlink" title="API函数代码示例"></a>API函数代码示例</h4><p>用的是Gin框架.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTag</span><span class="params">()</span> <span class="title">Tag</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Tag&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Get</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 获取多个标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param name query string false "标签名称" maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state query int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param page query int false "页码"</span></span><br><span class="line"><span class="comment">// @Param page_size query int false "每页数量"</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">List</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 新增标签</span></span><br><span class="line"><span class="comment">// @Product json</span></span><br><span class="line"><span class="comment">// @Param name body string true "标签名称" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param created_by body string false "创建者" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags [post]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Create</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 更新标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param id path int true "标签ID"</span></span><br><span class="line"><span class="comment">// @Param name body string false "标签名称" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param modified_by body string true "修改者" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;array&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags/&#123;id&#125; [put]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Update</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 删除标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param id path int true "标签ID"</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; string "删除成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags/&#123;id&#125; [delete]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Delete</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h4><p>针对整个项目, 也能写入注解.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @title 博客系统</span></span><br><span class="line"><span class="comment">// @version 1.0</span></span><br><span class="line"><span class="comment">// @description Go+Gin框架的博客项目</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := routers.NewRouter()</span><br><span class="line"></span><br><span class="line">    s := &amp;http.Server&#123;</span><br><span class="line">        Addr:           <span class="string">":8080"</span>,</span><br><span class="line">        Handler:        router,</span><br><span class="line">        ReadTimeout:    <span class="number">10</span> * time.Second,</span><br><span class="line">        WriteTimeout:   <span class="number">10</span> * time.Second,</span><br><span class="line">        MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    s.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档</h3><p>在项目的主目录下, 使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swag init</span><br></pre></td></tr></table></figure><p>执行完后, 可以看到在docs文件夹中生成了docs.go, swagger.json和swagger.yarm三个文件.</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">"GoProgrammingJourney/blog_service/docs"</span></span><br><span class="line">  ginSwagger <span class="string">"github.com/swaggo/gin-swagger"</span></span><br><span class="line">  <span class="string">"github.com/swaggo/gin-swagger/swaggerFiles"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r := gin.New()</span><br><span class="line">r.GET(<span class="string">"/swagger/*any"</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br></pre></td></tr></table></figure><h3 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h3><p>访问网址可以看到生成后的项目文档了.<br/><br><a href="http://127.0.0.1:8080/swagger/index.html" target="_blank" rel="noopener">http://127.0.0.1:8080/swagger/index.html</a></p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201115143526.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]常见面试题之缓存雪崩、缓存穿透、缓存击穿</title>
    <link href="http://yoursite.com/2020/11/08/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/"/>
    <id>http://yoursite.com/2020/11/08/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</id>
    <published>2020-11-08T12:44:00.000Z</published>
    <updated>2020-11-15T08:38:42.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMDU0MTA3Nw==&mid=2247483988&idx=1&sn=3bd52650907867d65f1c4d5c3cff8f13&chksm=e8b0902edfc71938f7d7a29246d7278ac48e6c104ba27c684e12e840892252b0823de94b94c1&token=1558933779&lang=zh_CN#rd" target="_blank" rel="noopener">常见面试题之缓存雪崩、缓存穿透、缓存击穿</a></p><h3 id="缓存应用"><a href="#缓存应用" class="headerlink" title="缓存应用"></a>缓存应用</h3><p>缓存在我们平常的项目中多多少少都会使用到，缓存使用的使用场景还是比较多的，缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题。提高性能的数据快速访问。一提到缓存，这些是我们都能想到的一些缓存应用场景，但是我们是不太清楚缓存的本质思想是什么的。缓存的基本思想就是我们非常熟悉的空间换时间。缓存也并不是那么的高大上，虽然他可以为系统的性能进行提升。缓存的思想实际在操作系统或者其他地方都被大量用到。比如 「<strong>CPU Cache 缓存的是内存数据用于解决 CPU 处理速度和内存不匹配的问题，内存缓存的是硬盘数据用于解决硬盘访问速度过慢的问题。</strong>」 「<strong>再比如操作系统在 页表方案 基础之上引入了 快表 来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache）。</strong>」</p><p>上面简单介绍了缓存的基本思想，现在回到业务系统来说：<strong>我们为了避免用户在请求数据的时候获取速度过于缓慢，所以我们在数据库之上增加了缓存这一层来弥补。</strong>画个图能更加方便大家的理解：</p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108204545.png" alt=""><br>简单点说当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能会出现一些现象。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="什么是缓存雪崩"><a href="#什么是缓存雪崩" class="headerlink" title="什么是缓存雪崩"></a>什么是缓存雪崩</h4><p>这里我们通过一个例子进行分析。比如马老师的某宝，我们打开某宝的首页时，看到一些图片呀、推荐店铺信息呀等等，这些都属于热点数据，为什么他们会加载的那么快呢？因为使用到了缓存呗。这些热点数据都做了缓存，假设现在把这些热点数据的缓存失效时间为一样，现在我们马老师要做一个秒杀活动，假设在秒杀活动时每秒有8000个请求，本来有缓存我们是可以扛住每秒 6000 个请求，但是缓存当时所有的Key都失效了。此时 1 秒 8000 个请求全部落数据库，数据库必然扛不住，它会报一下警，真实情况可能DBA都没反应过来就直接挂了。此时，如果没用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。上面造成缓存雪崩的原因是因为失效时间造成，还有一种可能是因为缓存服务宕机。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205054.png" alt=""></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>这里分三个时间段进行进行分析</p><h5 id="事前"><a href="#事前" class="headerlink" title="事前"></a>事前</h5><p>如果缓存雪崩造成的原因是因为缓存服务宕机造成的，可以将redis采用集群部署，可以使用 主从+哨兵 ，Redis Cluster 来避免 Redis 全盘崩溃的情况。若缓存雪崩是因为大量缓存因为失效时间而造成的，我们在批量往redis存数据的时候，把每个Key的失效时间都加个随机值就好了，这样可以保证数据不会在同一时间大面积失效，或者设置热点数据永远不过期，有更新操作就更新缓存就可以了。</p><h5 id="事中"><a href="#事中" class="headerlink" title="事中"></a>事中</h5><p>如果我们之前没有考虑缓存雪崩的问题，那么在实际使用中真的发生缓存雪崩了，我们该怎么办呢？这时我们就要考虑使用其他方法避免出现这种情况了。我们可以使用ehcache 本地缓存 + Hystrix 限流&amp;降级 ,避免 MySQL 被打死的情况发生。<br>这里使用echache本地缓存的目的就是考虑在 Redis Cluster 完全不可用的时候，ehcache 本地缓存还能够支撑一阵。</p><p>使用 Hystrix 进行 限流 &amp; 降级 ，比如一秒来了5000个请求，我们可以设置假设只能有一秒 2000 个请求能通过这个组件，那么其他剩余的 3000 请求就会走限流逻辑，然后去调用我们自己开发的降级组件（降级）。比如设置的一些默认值呀之类的。以此来保护最后的 MySQL 不会被大量的请求给打死。</p><h5 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h5><p>如果缓存服务宕机了，这里我们可以开启「Redis」 持久化 「RDB」+「AOF」，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</p><p>综上所述，可画出如下图所示：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205219.png" alt=""></p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h4><p>在正常的情况下，用户查询数据都是存在的，但是在异常情况下，缓存与数据都没有数据，但是用户不断发起请求，这样每次请求都会打到数据库上面去，这时的用户很可能是攻击者，攻击会导致数据库压力过大，严重会击垮数据库。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205312.png" alt=""></p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="添加参数校验"><a href="#添加参数校验" class="headerlink" title="添加参数校验"></a>添加参数校验</h5><p>我刚入职的时候，我的老大就跟我说过，作为一名后端开发工程师，不要相信前端传来的东西，所以数据一定要在后端进行校验。我们可以在接口层添加校验，不合法的直接返回即可，没必要做后续的操作。</p><h5 id="缓存空值"><a href="#缓存空值" class="headerlink" title="缓存空值"></a>缓存空值</h5><p>上面我们也介绍了，之所以会发生穿透，就是因为缓存中没有存储这些空数据的key。从而导致每次查询都到数据库去了。</p><p>那么我们就可以为这些key 设置的值设置为null 丢到缓存里面去。后面再出现查询这个key 的请求的时候，直接返回null ,就不用在到 数据库中去走一圈了。但是别忘了设置过期时间。</p><h5 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h5><p>redis的一个高级用法就是使用布隆过滤器（Bloom Filter），BloomFilter 类似于一个hase set 用来判断某个元素（key）是否存在于某个集合中。这个也能很好的防止缓存穿透的发生，他的原理也很简单就是利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查了DB刷新KV再return。</p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205409.png" alt=""></p><p>上面介绍了三种方法，用哪种方法最好呢？下面我们来分析一下：</p><p>第一种方法，添加参数校验，这里是必须要添加，不过只能过滤掉一些特殊值，比如传的id为负数，如果传的正常id，这里参数校验就不起作用了。</p><p>第二种方法，如果有一些恶意攻击，攻击会带来大量的ke y是不存在的，这样采用第二种方法就不合适了。所以针对这种key 异常多，请求重复率比较低的数据，我们就没有必要进行缓存，使用第三种方案直接过滤掉。</p><p>如果对于空数据key有限的，重复率比较高的，我们则可以采用第二种方式进行缓存。</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="什么是缓存击穿"><a href="#什么是缓存击穿" class="headerlink" title="什么是缓存击穿"></a>什么是缓存击穿</h4><p>我们在平常高并发的系统中，大量的请求同时查询一个key时，假设此时，这个key正好失效了，就会导致大量的请求都打到数据库上面去，这种现象我们称为击穿。</p><p>这么看缓存击穿和缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，打崩了DB，而缓存击穿不同的是「缓存击穿」是指一个Key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个完好无损的桶上凿开了一个洞。</p><p>缓存击穿带来的问题就是会造成某一时刻数据库请求量过大，压力剧增。</p><h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="不过期"><a href="#不过期" class="headerlink" title="不过期"></a>不过期</h5><p>我们简单粗暴点，直接让热点数据永远不过期，定时任务定期去刷新数据就可以了。不过这样设置需要区分场景，比如某宝首页可以这么做。</p><h5 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h5><p>为了避免出现缓存击穿的情况，我们可以在第一个请求去查询数据库的时候对他加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，后面的线程进来发现已经有缓存了，就直接走缓存，从而保护数据库。但是也是由于它会阻塞其他的线程，此时系统吞吐量会下降。需要结合实际的业务去考虑是否要这么做。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;转载&quot;&gt;&lt;a href=&quot;#转载&quot; class=&quot;headerlink&quot; title=&quot;转载&quot;&gt;&lt;/a&gt;转载&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzMDU0MTA3Nw==&amp;mid=2247483
      
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]golang - beego框架入门</title>
    <link href="http://yoursite.com/2020/11/08/golang-%E8%BD%AC-beego%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2020/11/08/golang-%E8%BD%AC-beego%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</id>
    <published>2020-11-08T09:13:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/u/4bede98c5ae5" target="_blank" rel="noopener">转载至Clown1995</a></p><p><a href="https://www.jianshu.com/p/462e23ae402c" target="_blank" rel="noopener">Beego脱坑（一）Beego简介和安装</a></p><p><a href="https://www.jianshu.com/p/5a586b06c55f" target="_blank" rel="noopener">Beego脱坑（二）新建Beego项目</a></p><p><a href="https://www.jianshu.com/p/d0d1462113d4" target="_blank" rel="noopener">Beego脱坑（三）Router</a></p><p><a href="https://www.jianshu.com/p/a0ece5f05ab9" target="_blank" rel="noopener">Beego脱坑（四）Controller</a></p><p><a href="https://www.jianshu.com/p/fa3dbf8aa774" target="_blank" rel="noopener">Beego脱坑（五）使用模板获取数据</a></p><p><a href="https://www.jianshu.com/p/69c8b3f8d58c" target="_blank" rel="noopener">Beego脱坑（六）多种格式数据输出</a></p><p><a href="https://www.jianshu.com/p/43459409ec00" target="_blank" rel="noopener">Beego脱坑（七）获取表单数据并解析到结构体</a></p><p><a href="https://www.jianshu.com/p/37abab5808bb" target="_blank" rel="noopener">Beego脱坑（八）表单数据验证</a></p><p><a href="https://www.jianshu.com/p/9aee6d938c49" target="_blank" rel="noopener">Beego脱坑（九）Cookie和Session</a></p><p><a href="https://www.jianshu.com/p/a519cf3ff3b7" target="_blank" rel="noopener">Beego脱坑（十）数据绑定</a></p><p><a href="https://www.jianshu.com/p/a63953b32e60" target="_blank" rel="noopener">Beego脱坑（十一）文件上传、下载</a></p><p><a href="https://www.jianshu.com/p/a65cad84a4b9" target="_blank" rel="noopener">Beego脱坑（十二）ORM介绍并创建第一个表</a></p><p><a href="https://www.jianshu.com/p/d6bf1e3d6187" target="_blank" rel="noopener">Beego脱坑（十三）ORM基本增删改查</a></p><p><a href="https://www.jianshu.com/p/6a1da3390615" target="_blank" rel="noopener">Beego脱坑（十四）ORM高级查询</a></p><p><a href="https://www.jianshu.com/p/a0ffd74e7481" target="_blank" rel="noopener">Beego脱坑（十五）ORM关系查询</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/u/4bede98c5ae5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;转载至Clown1995&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
      <category term="beego" scheme="http://yoursite.com/tags/beego/"/>
    
  </entry>
  
  <entry>
    <title>[转]golang - 解密Go协程的栈内存管理</title>
    <link href="http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E8%A7%A3%E5%AF%86Go%E5%8D%8F%E7%A8%8B%E7%9A%84%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E8%A7%A3%E5%AF%86Go%E5%8D%8F%E7%A8%8B%E7%9A%84%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2020-10-12T10:12:00.000Z</published>
    <updated>2020-11-15T08:38:42.911Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&mid=2247485886&idx=1&sn=f29fe2ce95a485e2c2ef1c4cd33b5085&chksm=fa80d829cdf7513fdf45b16be023809d9725b150803b6482643c3dd84aa3c0090c2cb9efd3aa&token=940952510&lang=zh_CN#rd" target="_blank" rel="noopener">解密Go协程的栈内存管理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;mid=2247485886&amp;idx=1&amp;sn=f29fe2ce95a485e2c2ef1c4cd33b5085&amp;chksm=fa80d829cdf7
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]golang - 图解Go内存管理器的内存分配策略</title>
    <link href="http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E8%A7%A3Go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E8%A7%A3Go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</id>
    <published>2020-10-12T10:11:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<p>转载：<a href="https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&mid=2247485736&idx=1&sn=921a9dfe3d638074b68a4fd072ea3cb9&chksm=fa80d8bfcdf751a948ea49ee620ca9d88ff0a62b4ad4e3a53321fee6813b8f90098fd72f7b11&token=940952510&lang=zh_CN#rd" target="_blank" rel="noopener">图解Go内存管理器的内存分配策略</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&amp;mid=2247485736&amp;idx=1&amp;sn=921a9dfe3d638074b68a4fd072ea3cb9&amp;chksm=fa80d8bfcdf7
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]golang - 图文结合，白话Go的垃圾回收原理</title>
    <link href="http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E6%96%87%E7%BB%93%E5%90%88%EF%BC%8C%E7%99%BD%E8%AF%9DGo%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E6%96%87%E7%BB%93%E5%90%88%EF%BC%8C%E7%99%BD%E8%AF%9DGo%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/</id>
    <published>2020-10-12T10:07:00.000Z</published>
    <updated>2020-11-15T08:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<p>转载: <a href="https://zhuanlan.zhihu.com/p/264789260" target="_blank" rel="noopener">图文结合，白话Go的垃圾回收原理</a></p><p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/v2-9515a7f1156f98371a25361572b25f0d_720w.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/264789260&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;图文结合，白话Go的垃圾回收原理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qxinhai
      
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/09/21/hello-world/"/>
    <id>http://yoursite.com/2020/09/21/hello-world/</id>
    <published>2020-09-21T11:56:18.000Z</published>
    <updated>2020-11-15T08:38:42.911Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="更换电脑后，如何更新博客"><a href="#更换电脑后，如何更新博客" class="headerlink" title="更换电脑后，如何更新博客"></a>更换电脑后，如何更新博客</h3><p><a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></p><h4 id="关于日常的改动流程"><a href="#关于日常的改动流程" class="headerlink" title="关于日常的改动流程"></a>关于日常的改动流程</h4><ol><li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）</li><li>然后才执行hexo g -d发布网站到master分支上</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>golang - 使用函数自定义排序</title>
    <link href="http://yoursite.com/2020/06/06/golang-%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/06/06/golang-%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</id>
    <published>2020-06-06T08:48:00.000Z</published>
    <updated>2020-11-15T08:38:42.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-使用函数自定义排序"><a href="#golang-使用函数自定义排序" class="headerlink" title="golang - 使用函数自定义排序"></a>golang - 使用函数自定义排序</h1><p>有时候我们想使用和集合的自然排序不同的方法对集合进行排序。 例如，我们想按照字母的长度而不是首字母顺序对字符串排序。 </p><p>在golang自带的sort模块中, 可以先阅读下函数的代码:</p><p><code>sort.Sort</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sort</span><span class="params">(data Interface)</span></span> &#123;</span><br><span class="line">    n := data.Len()</span><br><span class="line">    quickSort(data, <span class="number">0</span>, n, maxDepth(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sort.quickSort</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(data Interface, a, b, maxDepth <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> b-a &gt; <span class="number">12</span> &#123; <span class="comment">// Use ShellSort for slices &lt;= 12 elements</span></span><br><span class="line">        <span class="keyword">if</span> maxDepth == <span class="number">0</span> &#123;</span><br><span class="line">            heapSort(data, a, b)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        maxDepth--</span><br><span class="line">        mlo, mhi := doPivot(data, a, b)</span><br><span class="line">        <span class="comment">// Avoiding recursion on the larger subproblem guarantees</span></span><br><span class="line">        <span class="comment">// a stack depth of at most lg(b-a).</span></span><br><span class="line">        <span class="keyword">if</span> mlo-a &lt; b-mhi &#123;</span><br><span class="line">            quickSort(data, a, mlo, maxDepth)</span><br><span class="line">            a = mhi <span class="comment">// i.e., quickSort(data, mhi, b)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            quickSort(data, mhi, b, maxDepth)</span><br><span class="line">            b = mlo <span class="comment">// i.e., quickSort(data, a, mlo)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> b-a &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="comment">// Do ShellSort pass with gap 6</span></span><br><span class="line">        <span class="comment">// It could be written in this simplified form cause b-a &lt;= 12</span></span><br><span class="line">        <span class="keyword">for</span> i := a + <span class="number">6</span>; i &lt; b; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> data.Less(i, i<span class="number">-6</span>) &#123;</span><br><span class="line">                data.Swap(i, i<span class="number">-6</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        insertionSort(data, a, b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>具体实现方式可以暂时忽略, 从中找到几个重点:</p><ol><li>参数是 Interface 类型</li><li>需要重写Interface下的三个函数, <code>Len()</code>, <code>Swap()</code>, <code>Less()</code></li></ol><p><code>sort.Interface</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">    Len() <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// Less reports whether the element with</span></span><br><span class="line">    <span class="comment">// index i should sort before the element with index j.</span></span><br><span class="line">    Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line">    <span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">    Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">方便实现排序功能, 自定义类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> StringSortByLength []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从sort.Sort的代码看, 需要实现这两个函数才能实现自定义的排序功能</span></span><br><span class="line"><span class="comment">Less函数是控制实际的自定义排序逻辑</span></span><br><span class="line"><span class="comment">想实现按长度排序功能, 那么就返回字符串的长度, 并在Less中使用len比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Swap</span><span class="params">(i <span class="keyword">int</span>, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Less</span><span class="params">(i <span class="keyword">int</span>, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s[i]) &lt; <span class="built_in">len</span>(s[j])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    types := StringSortByLength&#123;<span class="string">"string"</span>, <span class="string">"int"</span>, <span class="string">"float"</span>, <span class="string">"float64"</span>, <span class="string">"int32"</span>&#125;</span><br><span class="line">    sort.Sort(types)</span><br><span class="line">    fmt.Println(types)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;golang-使用函数自定义排序&quot;&gt;&lt;a href=&quot;#golang-使用函数自定义排序&quot; class=&quot;headerlink&quot; title=&quot;golang - 使用函数自定义排序&quot;&gt;&lt;/a&gt;golang - 使用函数自定义排序&lt;/h1&gt;&lt;p&gt;有时候我们想使用和集合的自然排序不同的方法对集合进行排序。 例如，我们想按照字母的长度而不是首字母顺序对字符串排序。 &lt;/p&gt;
&lt;p&gt;在golang自带的sort模块中, 可以先阅读下函数的代码:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sort.Sort&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data Interface)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n := data.Len()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    quickSort(data, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, n, maxDepth(n))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;sort.quickSort&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data Interface, a, b, maxDepth &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; b-a &amp;gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// Use ShellSort for slices &amp;lt;= 12 elements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; maxDepth == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            heapSort(data, a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxDepth--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mlo, mhi := doPivot(data, a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Avoiding recursion on the larger subproblem guarantees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// a stack depth of at most lg(b-a).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mlo-a &amp;lt; b-mhi &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            quickSort(data, a, mlo, maxDepth)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a = mhi &lt;span class=&quot;comment&quot;&gt;// i.e., quickSort(data, mhi, b)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            quickSort(data, mhi, b, maxDepth)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b = mlo &lt;span class=&quot;comment&quot;&gt;// i.e., quickSort(data, a, mlo)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b-a &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Do ShellSort pass with gap 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// It could be written in this simplified form cause b-a &amp;lt;= 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := a + &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;; i &amp;lt; b; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data.Less(i, i&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                data.Swap(i, i&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        insertionSort(data, a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://yoursite.com/categories/golang/"/>
    
    
  </entry>
  
</feed>
