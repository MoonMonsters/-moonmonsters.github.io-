<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构 - 优先队列</title>
    <url>/2021/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    优先队列</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.array = list()</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, element)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        入队</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.array.append(element)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        self.up_adjust()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">up_adjust</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        向上调整</span></span><br><span class="line"><span class="string">        插入元素后, 放在最末尾</span></span><br><span class="line"><span class="string">        需要往上调整, 变成最大堆</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 插入的元素的位置</span></span><br><span class="line">        child_index = self.size - <span class="number">1</span></span><br><span class="line">        parent_index = (child_index - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 插入的元素, 一直往上移动</span></span><br><span class="line">        tmp = self.array[child_index]</span><br><span class="line">        <span class="comment"># 直到移动到第一个根节点, 或者比父节点小</span></span><br><span class="line">        <span class="keyword">while</span> child_index &gt; <span class="number">0</span> <span class="keyword">and</span> tmp &gt; self.array[parent_index]:</span><br><span class="line">            <span class="comment"># tmp往上移动, 将父节点赋值给子节点</span></span><br><span class="line">            self.array[child_index] = self.array[parent_index]</span><br><span class="line">            <span class="comment"># 往上移动一层</span></span><br><span class="line">            child_index = parent_index</span><br><span class="line">            parent_index = (child_index - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 移动到最终位置</span></span><br><span class="line">        self.array[child_index] = tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取优先队列的最大优先值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.size &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">"队列为空"</span>)</span><br><span class="line">        <span class="comment"># 返回最大优先值</span></span><br><span class="line">        head = self.array[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 将最后一个节点移动到根节点位置</span></span><br><span class="line">        self.array[<span class="number">0</span>] = self.array[self.size - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 自顶向下移动</span></span><br><span class="line">        self.down_adjust()</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">down_adjust</span><span class="params">(self)</span>:</span></span><br><span class="line">        parent_index = <span class="number">0</span></span><br><span class="line">        tmp = self.array[parent_index]</span><br><span class="line">        child_index = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> child_index &lt; self.size:</span><br><span class="line">            <span class="comment"># 如果有右孩子节点, 并且值大于左孩子节点, 那么父节点往右孩子节点移动</span></span><br><span class="line">            <span class="comment"># 需要构建最大堆, 所以需要保证父节点要大于子节点</span></span><br><span class="line">            <span class="keyword">if</span> child_index + <span class="number">1</span> &lt; self.size <span class="keyword">and</span> self.array[child_index + <span class="number">1</span>] &gt; self.array[child_index]:</span><br><span class="line">                child_index += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 父节点并最大子节点都大, 那么退出</span></span><br><span class="line">            <span class="keyword">if</span> tmp &gt;= self.array[child_index]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 将最大子节点移动到父节点位置</span></span><br><span class="line">            self.array[parent_index] = self.array[child_index]</span><br><span class="line">            <span class="comment"># 移动到子节点位置</span></span><br><span class="line">            parent_index = child_index</span><br><span class="line">            <span class="comment"># 判断左孩子节点</span></span><br><span class="line">            child_index = <span class="number">2</span> * child_index + <span class="number">1</span></span><br><span class="line">        self.array[parent_index] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    queue = PriorityQueue()</span><br><span class="line">    queue.enqueue(<span class="number">3</span>)</span><br><span class="line">    queue.enqueue(<span class="number">20</span>)</span><br><span class="line">    queue.enqueue(<span class="number">30</span>)</span><br><span class="line">    queue.enqueue(<span class="number">50</span>)</span><br><span class="line">    queue.enqueue(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    print(queue.dequeue())</span><br><span class="line">    print(queue.dequeue())</span><br><span class="line">    print(queue.dequeue())</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>django - LocMemCache源码分析</title>
    <url>/2021/01/24/django-LocMemCache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"Thread-safe in-memory cache backend."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.cache.backends.base <span class="keyword">import</span> DEFAULT_TIMEOUT, BaseCache</span><br><span class="line"><span class="keyword">from</span> django.utils.synch <span class="keyword">import</span> RWLock</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> django.utils.six.moves <span class="keyword">import</span> cPickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Global in-memory store of cache data. Keyed by name, to provide</span></span><br><span class="line"><span class="comment"># multiple named local memory caches.</span></span><br><span class="line">_caches = &#123;&#125;</span><br><span class="line">_expire_info = &#123;&#125;</span><br><span class="line">_locks = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dummy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""A context manager that does nothing special."""</span></span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocMemCache</span><span class="params">(BaseCache)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, params)</span>:</span></span><br><span class="line">        BaseCache.__init__(self, params)</span><br><span class="line">        <span class="comment"># 使用字典, 保存数据到内存</span></span><br><span class="line">        <span class="comment"># 按照_cull_frequency看, 此处可以设置成OrderDict, 并且按LRU方式, 删除较少访问的数据</span></span><br><span class="line">        self._cache = _caches.setdefault(name, &#123;&#125;)</span><br><span class="line">        <span class="comment"># 存储key过期信息</span></span><br><span class="line">        self._expire_info = _expire_info.setdefault(name, &#123;&#125;)</span><br><span class="line">        <span class="comment"># 使用了读写锁</span></span><br><span class="line">        self._lock = _locks.setdefault(name, RWLock())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        添加缓存数据</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 生成key值</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        <span class="comment"># 对key值校验</span></span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        <span class="comment"># 获取写锁</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            <span class="comment"># 判断key值是否过期</span></span><br><span class="line">            <span class="keyword">if</span> self._has_expired(key):</span><br><span class="line">                <span class="comment"># key没有过期或者不存在, 则缓存数据</span></span><br><span class="line">                self._set(key, pickled, timeout)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None, version=None, acquire_lock=True)</span>:</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        pickled = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 获取读锁</span></span><br><span class="line">        <span class="keyword">with</span> (self._lock.reader() <span class="keyword">if</span> acquire_lock <span class="keyword">else</span> dummy()):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._has_expired(key):</span><br><span class="line">                pickled = self._cache[key]</span><br><span class="line">        <span class="comment"># 获取到了数据</span></span><br><span class="line">        <span class="keyword">if</span> pickled <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 反序列化</span></span><br><span class="line">                <span class="keyword">return</span> pickle.loads(pickled)</span><br><span class="line">            <span class="keyword">except</span> pickle.PickleError:</span><br><span class="line">                <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> (self._lock.writer() <span class="keyword">if</span> acquire_lock <span class="keyword">else</span> dummy()):</span><br><span class="line">            <span class="comment"># 如果没有拿到数据, 则从缓存和过期信息中, 删除所有key值</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">del</span> self._cache[key]</span><br><span class="line">                <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        实际上的缓存操作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 判断缓存的key值数量, 是否超过配置数量, 默认是300</span></span><br><span class="line">        <span class="keyword">if</span> len(self._cache) &gt;= self._max_entries:</span><br><span class="line">            <span class="comment">#</span></span><br><span class="line">            self._cull()</span><br><span class="line">        self._cache[key] = value</span><br><span class="line">        <span class="comment"># 缓存过期时间信息</span></span><br><span class="line">        self._expire_info[key] = self.get_backend_timeout(timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value, timeout=DEFAULT_TIMEOUT, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        缓存操作</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            self._set(key, pickled, timeout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self, key, delta=<span class="number">1</span>, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        数值增加</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            value = self.get(key, version=version, acquire_lock=<span class="literal">False</span>)</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">"Key '%s' not found"</span> % key)</span><br><span class="line">            <span class="comment"># 没有确保value是数字判断?</span></span><br><span class="line">            new_value = value + delta</span><br><span class="line">            key = self.make_key(key, version=version)</span><br><span class="line">            pickled = pickle.dumps(new_value, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">            self._cache[key] = pickled</span><br><span class="line">        <span class="keyword">return</span> new_value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_key</span><span class="params">(self, key, version=None)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        判断key值是否存在</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="keyword">with</span> self._lock.reader():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._has_expired(key):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不存在则清空key值相关数据</span></span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            <span class="comment"># ...还不如直接调用self._delete(key)函数</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">del</span> self._cache[key]</span><br><span class="line">                <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">            <span class="keyword">except</span> KeyError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_has_expired</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        key值是否过期</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 获取过期时间</span></span><br><span class="line">        exp = self._expire_info.get(key, <span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 如果过期时间不存在(key值不存在的意思), 获取超过当前时间</span></span><br><span class="line">        <span class="keyword">if</span> exp <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> exp &gt; time.time():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_cull</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        删除频率</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 如果设置为0, 则清空所有缓存</span></span><br><span class="line">        <span class="comment"># 默认是3</span></span><br><span class="line">        <span class="keyword">if</span> self._cull_frequency == <span class="number">0</span>:</span><br><span class="line">            self.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 按取模操作, 按照设置的频率删除数据</span></span><br><span class="line">            doomed = [k <span class="keyword">for</span> (i, k) <span class="keyword">in</span> enumerate(self._cache) <span class="keyword">if</span> i % self._cull_frequency == <span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> doomed:</span><br><span class="line">                self._delete(k)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_delete</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self._cache[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self._expire_info[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, key, version=None)</span>:</span></span><br><span class="line">        key = self.make_key(key, version=version)</span><br><span class="line">        self.validate_key(key)</span><br><span class="line">        <span class="keyword">with</span> self._lock.writer():</span><br><span class="line">            self._delete(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        清空所有缓存信息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._cache.clear()</span><br><span class="line">        self._expire_info.clear()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django - 读写锁</title>
    <url>/2021/01/23/django-%E8%AF%BB%E5%86%99%E9%94%81/</url>
    <content><![CDATA[<h3 id="代码来源"><a href="#代码来源" class="headerlink" title="代码来源"></a>代码来源</h3><p>django1.11 版本, 完整源码路径<code>from django.utils.synch import RWLock</code></p>
<p>实现方法主要是<code>RLock+Semaphore</code>结合使用.</p>
<p>在阅读<code>LocMemCache</code>本地内存缓存代码时, 注意到这一部分功能, 添加解释后以后可以用.</p>
<p>但在django3或者更之前的版本, 已经不再没有在<code>LocMemCache</code>中用<code>RWLock</code>, 而是直接使用python自带的<code>from threading import Lock</code>了.</p>
<a id="more"></a>

<h3 id="源码及解释"><a href="#源码及解释" class="headerlink" title="源码及解释"></a>源码及解释</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Synchronization primitives:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    - reader-writer lock (preference to writers)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(Contributed to Django by eugene@lazutkin.com)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RWLock</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Classic implementation of reader-writer lock with preference to writers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Readers can access a resource simultaneously.</span></span><br><span class="line"><span class="string">    Writers get an exclusive access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    API is self-descriptive:</span></span><br><span class="line"><span class="string">        reader_enters()</span></span><br><span class="line"><span class="string">        reader_leaves()</span></span><br><span class="line"><span class="string">        writer_enters()</span></span><br><span class="line"><span class="string">        writer_leaves()</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 可重入锁</span></span><br><span class="line">        self.mutex = threading.RLock()</span><br><span class="line">        <span class="comment"># 读锁信号量</span></span><br><span class="line">        self.can_read = threading.Semaphore(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 写锁信号量</span></span><br><span class="line">        self.can_write = threading.Semaphore(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 正在进行读操作的数量</span></span><br><span class="line">        self.active_readers = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 正在写操作的数量</span></span><br><span class="line">        self.active_writers = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 等待操作</span></span><br><span class="line">        self.waiting_readers = <span class="number">0</span></span><br><span class="line">        self.waiting_writers = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader_enters</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 加锁</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 如果没有进行写操作</span></span><br><span class="line">            <span class="keyword">if</span> self.active_writers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 那么读操作+1</span></span><br><span class="line">                self.active_readers += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 激活读操作</span></span><br><span class="line">                self.can_read.release()</span><br><span class="line">            <span class="comment"># 否则, 等待中的读操作+1</span></span><br><span class="line">            <span class="comment"># 等待写操作完成</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.waiting_readers += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 获取读锁</span></span><br><span class="line">        self.can_read.acquire()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader_leaves</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 释放</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 读操作数-1</span></span><br><span class="line">            self.active_readers -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 没有读操作, 并且有等待中的写操作</span></span><br><span class="line">            <span class="keyword">if</span> self.active_readers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers != <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 释放写操作的锁</span></span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.waiting_writers -= <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @contextlib.contextmanager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># contextlib.contextmanager装饰器的作用</span></span><br><span class="line">        <span class="comment"># 当代码被 with self.reader() 修饰时, 先执行yield之前的代码, 再执行代码块, 最后执行yield后的代码</span></span><br><span class="line">        <span class="comment"># 以此完成先获取锁再释放锁的操作</span></span><br><span class="line">        <span class="comment"># 获取锁</span></span><br><span class="line">        self.reader_enters()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 释放锁</span></span><br><span class="line">            self.reader_leaves()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer_enters</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            <span class="comment"># 释放写锁</span></span><br><span class="line">            <span class="keyword">if</span> self.active_writers == <span class="number">0</span> <span class="keyword">and</span> self.waiting_writers == <span class="number">0</span> <span class="keyword">and</span> self.active_readers == <span class="number">0</span>:</span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.waiting_writers += <span class="number">1</span></span><br><span class="line">        self.can_write.acquire()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer_leaves</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self.mutex:</span><br><span class="line">            self.active_writers -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 释放写锁</span></span><br><span class="line">            <span class="keyword">if</span> self.waiting_writers != <span class="number">0</span>:</span><br><span class="line">                self.active_writers += <span class="number">1</span></span><br><span class="line">                self.waiting_writers -= <span class="number">1</span></span><br><span class="line">                self.can_write.release()</span><br><span class="line">            <span class="comment"># 释放读锁</span></span><br><span class="line">            <span class="keyword">elif</span> self.waiting_readers != <span class="number">0</span>:</span><br><span class="line">                t = self.waiting_readers</span><br><span class="line">                self.waiting_readers = <span class="number">0</span></span><br><span class="line">                self.active_readers += t</span><br><span class="line">                <span class="keyword">while</span> t &gt; <span class="number">0</span>:</span><br><span class="line">                    self.can_read.release()</span><br><span class="line">                    t -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @contextlib.contextmanager</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.writer_enters()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.writer_leaves()</span><br></pre></td></tr></table></figure>



<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lock = RWLock()</span><br><span class="line"><span class="keyword">with</span> lock.reader():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">with</span> lock.writer():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>golang - 解析yaml配置文件</title>
    <url>/2020/12/14/golang-%E8%A7%A3%E6%9E%90yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="golang-解析yaml配置文件"><a href="#golang-解析yaml配置文件" class="headerlink" title="golang - 解析yaml配置文件"></a>golang - 解析yaml配置文件</h1><h3 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u <span class="string">"github.com/spf13/viper"</span></span><br></pre></td></tr></table></figure>

<h3 id="文件整体结构"><a href="#文件整体结构" class="headerlink" title="文件整体结构"></a>文件整体结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── configs</span><br><span class="line">│   └── stand_alone.yaml</span><br><span class="line">└── pkg</span><br><span class="line">    └── settings</span><br><span class="line">        ├── section.go</span><br><span class="line">        └── setting.go</span><br></pre></td></tr></table></figure>

<h3 id="yaml配置文件"><a href="#yaml配置文件" class="headerlink" title="yaml配置文件"></a>yaml配置文件</h3><p>路径: configs/stand_alone.yaml</p>
<p>详细格式可以参考:</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></p>
<p><a href="https://en.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">YAML</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Server:</span></span><br><span class="line">  <span class="attr">StorageRoot:</span> <span class="string">"Storage/upload"</span></span><br><span class="line">  <span class="attr">ListenAddress:</span> <span class="string">":8888"</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="定义Setting结构体"><a href="#定义Setting结构体" class="headerlink" title="定义Setting结构体"></a>定义Setting结构体</h3><p>路径: pkg/settings/setting.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/spf13/viper"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Setting <span class="keyword">struct</span> &#123;</span><br><span class="line">    vp *viper.Viper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSetting</span><span class="params">()</span> <span class="params">(*Setting, error)</span></span> &#123;</span><br><span class="line">    vp := viper.New()</span><br><span class="line">    vp.SetConfigName(<span class="string">"stand_alone.yaml"</span>)</span><br><span class="line">    vp.AddConfigPath(<span class="string">"stand_alone/configs"</span>)</span><br><span class="line">    vp.SetConfigType(<span class="string">"yaml"</span>)</span><br><span class="line"></span><br><span class="line">    err := vp.ReadInConfig()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;Setting&#123;vp&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定义Section结构体"><a href="#定义Section结构体" class="headerlink" title="定义Section结构体"></a>定义Section结构体</h3><p>路径: pkg/settings/section.go</p>
<p>如果有多组配置, 那么按照格式, 创建多个struct变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    StorageRoot   <span class="keyword">string</span></span><br><span class="line">    ListenAddress <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Setting)</span> <span class="title">ReadSection</span><span class="params">(sType <span class="keyword">string</span>, section <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    err := s.vp.UnmarshalKey(sType, section)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"Storage/stand_alone/pkg/settings"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    setting, err := settings.NewSetting()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(<span class="string">"err: "</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> server *settings.Server</span><br><span class="line">    _ = setting.ReadSection(<span class="string">"Server"</span>, &amp;server)</span><br><span class="line">    fmt.Println(server.StorageRoot, server.ListenAddress)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>golang - 使用令牌桶限制接口访问频率</title>
    <url>/2020/12/12/golang-%E4%BD%BF%E7%94%A8%E4%BB%A4%E7%89%8C%E6%A1%B6%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AE%E9%A2%91%E7%8E%87/</url>
    <content><![CDATA[<h3 id="三方库"><a href="#三方库" class="headerlink" title="三方库"></a>三方库</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/juju/ratelimit@v1<span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>



<h3 id="令牌桶结构体"><a href="#令牌桶结构体" class="headerlink" title="令牌桶结构体"></a>令牌桶结构体</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/juju/ratelimit"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 令牌桶信息</span></span><br><span class="line"><span class="keyword">type</span> Limiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    limiterBuckets <span class="keyword">map</span>[<span class="keyword">string</span>]*ratelimit.Bucket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 令牌Bucket</span></span><br><span class="line"><span class="keyword">type</span> LimiterBucketRule <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义键值对名称</span></span><br><span class="line">    Key <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 间隔多久放N个令牌</span></span><br><span class="line">    FillInterval time.Duration</span><br><span class="line">    <span class="comment">// 令牌桶的容量</span></span><br><span class="line">    Capacity <span class="keyword">int64</span></span><br><span class="line">    <span class="comment">// 每次到达间隔时间后所放的具体令牌数量</span></span><br><span class="line">    Quantum <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">type</span> LimiterIface <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 获取对应的限流器的键值对名称</span></span><br><span class="line">    Key(c *gin.Context) <span class="keyword">string</span></span><br><span class="line">    <span class="comment">// 获取令牌桶</span></span><br><span class="line">    GetBucket(key <span class="keyword">string</span>) (*ratelimit.Bucket, <span class="keyword">bool</span>)</span><br><span class="line">    <span class="comment">// 新增令牌桶</span></span><br><span class="line">    AddBuckets(rules ...LimiterBucketRule) LimiterIface</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>


<h3 id="实现令牌桶的接口"><a href="#实现令牌桶的接口" class="headerlink" title="实现令牌桶的接口"></a>实现令牌桶的接口</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">    <span class="string">"github.com/juju/ratelimit"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MethodLimiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    *Limiter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个令牌桶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMethodLimiter</span><span class="params">()</span> <span class="title">LimiterIface</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> MethodLimiter&#123;</span><br><span class="line">        Limiter: &amp;Limiter&#123;</span><br><span class="line">            limiterBuckets: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*ratelimit.Bucket),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值对, 使用核心路由做key值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">Key</span><span class="params">(c *gin.Context)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    uri := c.Request.RequestURI</span><br><span class="line">    index := strings.Index(uri, <span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">if</span> index == <span class="number">-1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uri</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> uri[:index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Bucket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">GetBucket</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(*ratelimit.Bucket, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    bucket, ok := l.limiterBuckets[key]</span><br><span class="line">    <span class="keyword">return</span> bucket, ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加bucket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l MethodLimiter)</span> <span class="title">AddBuckets</span><span class="params">(rules ...LimiterBucketRule)</span> <span class="title">LimiterIface</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, rule := <span class="keyword">range</span> rules &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := l.limiterBuckets[rule.Key]; !ok &#123;</span><br><span class="line">            l.limiterBuckets[rule.Key] = ratelimit.NewBucketWithQuantum(rule.FillInterval, rule.Capacity, rule.Quantum)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/app"</span></span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/errcode"</span></span><br><span class="line">    <span class="string">"GoProgrammingJourney/blog_service/pkg/limiter"</span></span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RateLimiter</span><span class="params">(l limiter.LimiterIface)</span> <span class="title">gin</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取令牌的key值</span></span><br><span class="line">        key := l.Key(c)</span><br><span class="line">        <span class="keyword">if</span> bucket, ok := l.GetBucket(key); ok &#123;</span><br><span class="line">            <span class="comment">// 传入1, 表示已使用一个令牌</span></span><br><span class="line">            count := bucket.TakeAvailable(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 如果剩余可用令牌数为0, 则抛出异常, 禁止访问</span></span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">                response := app.NewResponse(c)</span><br><span class="line">                response.ToErrorResponse(errcode.TooManyRequests)</span><br><span class="line">                c.Abort()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c.Next()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="加入gin的中间件"><a href="#加入gin的中间件" class="headerlink" title="加入gin的中间件"></a>加入gin的中间件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 限制了/auth的访问频率</span></span><br><span class="line"><span class="comment">// 限制时间间隔, 1秒钟</span></span><br><span class="line"><span class="comment">// 一秒钟内, 最多被访问10次</span></span><br><span class="line"><span class="comment">// 当一秒后, 重新放入10个令牌到令牌桶内, 也就是下一秒可再次被访问10次</span></span><br><span class="line"><span class="keyword">var</span> methodLimiters = limiter.NewMethodLimiter().AddBuckets(limiter.LimiterBucketRule&#123;</span><br><span class="line">    <span class="comment">// 令牌桶限制的url</span></span><br><span class="line">    Key: <span class="string">"/auth"</span>,</span><br><span class="line">    <span class="comment">// 时间间隔</span></span><br><span class="line">    FillInterval: time.Second * <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 令牌总容量</span></span><br><span class="line">    Capacity: <span class="number">10</span>,</span><br><span class="line">    <span class="comment">// 重新放入令牌桶数量</span></span><br><span class="line">    Quantum: <span class="number">10</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := gin.New()</span><br><span class="line">r.Use(middleware.RateLimiter(methodLimiters))</span><br></pre></td></tr></table></figure>

<h3 id="从配置文件中读取方式"><a href="#从配置文件中读取方式" class="headerlink" title="从配置文件中读取方式"></a>从配置文件中读取方式</h3><h4 id="配置yaml"><a href="#配置yaml" class="headerlink" title="配置yaml"></a>配置yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Limiter:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Limits:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">"/auth"</span></span><br><span class="line">      <span class="attr">FillInterval:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">Capacity:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">Quantum:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Key:</span> <span class="string">"/api/v1/tags"</span></span><br><span class="line">      <span class="attr">FillInterval:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">Capacity:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">Quantum:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>



<h4 id="配置Setting"><a href="#配置Setting" class="headerlink" title="配置Setting"></a>配置Setting</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LimiterSetting <span class="keyword">struct</span> &#123;</span><br><span class="line">    Limits []<span class="keyword">struct</span> &#123;</span><br><span class="line">        Key          <span class="keyword">string</span></span><br><span class="line">        FillInterval time.Duration</span><br><span class="line">        Capacity     <span class="keyword">int64</span></span><br><span class="line">        Quantum      <span class="keyword">int64</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="修改中间件参数传入方式"><a href="#修改中间件参数传入方式" class="headerlink" title="修改中间件参数传入方式"></a>修改中间件参数传入方式</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newLimiter</span><span class="params">()</span> <span class="title">limiter</span>.<span class="title">LimiterIface</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rules []limiter.LimiterBucketRule</span><br><span class="line">    <span class="keyword">for</span> _, limit := <span class="keyword">range</span> global.LimiterSetting.Limits &#123;</span><br><span class="line">        rules = <span class="built_in">append</span>(rules, limiter.LimiterBucketRule&#123;</span><br><span class="line">            <span class="comment">// 令牌桶限制的url</span></span><br><span class="line">            Key: limit.Key,</span><br><span class="line">            <span class="comment">// 时间间隔</span></span><br><span class="line">            FillInterval: limit.FillInterval * time.Second,</span><br><span class="line">            <span class="comment">// 令牌总容量</span></span><br><span class="line">            Capacity: limit.Capacity,</span><br><span class="line">            <span class="comment">// 重新放入令牌桶数量</span></span><br><span class="line">            Quantum: limit.Quantum,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> methodLimiters = limiter.NewMethodLimiter().AddBuckets(rules...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> methodLimiters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.Use(middleware.RateLimiter(newLimiter()))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>gin</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]使用PySnooper调试代码</title>
    <url>/2020/11/18/%E8%BD%AC-%E4%BD%BF%E7%94%A8PySnooper%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s/wSmzU4cn0mTwlrtCSENeqg" target="_blank" rel="noopener">求你了，别再用 print 调试代码了</a></p>
<h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m pip install pysnooper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> conda install -c conda-forge pysnooper</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yay -S python-pysnooper</span></span><br></pre></td></tr></table></figure>

<h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><p>下面这段代码，定义了一个 demo_func 的函数，在里面生成一个 profile 的字典变量，然后去更新它，最后返回。</p>
<p>代码本身没有什么实际意义，但是用来演示 PySnooper 已经足够。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pysnooper</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">"name"</span>] = <span class="string">"写代码的明哥"</span></span><br><span class="line">    profile[<span class="string">"age"</span>] = <span class="number">27</span></span><br><span class="line">    profile[<span class="string">"gender"</span>] = <span class="string">"male"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    profile = demo_func()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>现在我使用终端命令行的方式来运行它</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iswbm ~]# python3 demo.py </span><br><span class="line">Source path:... demo.py</span><br><span class="line">17:52:49.624943 call         4 def demo_func():</span><br><span class="line">17:52:49.625124 line         5     profile = &#123;&#125;</span><br><span class="line">New var:....... profile = &#123;&#125;</span><br><span class="line">17:52:49.625156 line         6     profile["name"] = "写代码的明哥"</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥'&#125;</span><br><span class="line">17:52:49.625207 line         7     profile["age"] = 27</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥', 'age': 27&#125;</span><br><span class="line">17:52:49.625254 line         8     profile["gender"] = "male"</span><br><span class="line">Modified var:.. profile = &#123;'name': '写代码的明哥', 'age': 27, 'gender': 'male'&#125;</span><br><span class="line">17:52:49.625306 line        10     return profile</span><br><span class="line">17:52:49.625344 return      10     return profile</span><br><span class="line">Return value:.. &#123;'name': '写代码的明哥', 'age': 27, 'gender': 'male'&#125;</span><br><span class="line">Elapsed time: 00:00:00.000486</span><br></pre></td></tr></table></figure>
<p>可以看到 PySnooper 把函数运行的过程全部记录了下来，包括：</p>
<ul>
<li>代码的片段、行号等信息，以及每一行代码是何时调用的？</li>
<li>函数内局部变量的值如何变化的？何时新增了变量，何时修改了变量。</li>
<li>函数的返回值是什么？</li>
<li>运行函数消耗了多少时间？<br>而作为开发者，要得到这些如此详细的调试信息，你需要做的非常简单，只要给你想要调试的函数上带上一顶帽子（装饰器） – <code>@pysnooper.snoop()</code> 即可。</li>
</ul>
<h3 id="详细使用"><a href="#详细使用" class="headerlink" title="详细使用"></a>详细使用</h3><h4 id="重定向到日志文件"><a href="#重定向到日志文件" class="headerlink" title="重定向到日志文件"></a>重定向到日志文件</h4><p><code>@pysnooper.snoop()</code> 不加任何参数时，会默认将调试的信息输出到标准输出。</p>
<p>对于单次调试就能解决的 BUG ，这样没有什么问题，但是有一些 BUG 只有在特定的场景下才会出现，需要你把程序放在后面跑个一段时间才能复现。</p>
<p>这种情况下，你可以将调试信息重定向输出到某一日志文件中，方便追溯排查。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(output='/var/log/debug.log')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h4 id="跟踪非局部变量值"><a href="#跟踪非局部变量值" class="headerlink" title="跟踪非局部变量值"></a>跟踪非局部变量值</h4><p>PySnooper 是以函数为单位进行调试的，它默认只会跟踪函数体内的局部变量，若想跟踪全局变量，可以给 <code>pysnooper.snoop()</code> 加上 <code>watch</code> 参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out = &#123;<span class="string">"foo"</span>: <span class="string">"bar"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(watch=('out["foo"]'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>如此一来，PySnooper 会在 <code>out[&quot;foo&quot;]</code> 值有变化时，也将其打印出来<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200531.png" alt=""><br>watch 参数，接收一个可迭代对象（可以是list 或者 tuple），里面的元素为字符串表达式，什么意思呢？看下面例子就知道了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(watch=('out["foo"]', 'foo.bar', 'self.foo["bar"]'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>和 <code>watch</code> 相对的，<code>pysnooper.snoop()</code> 还可以接收一个函数 <code>watch_explode</code>，表示除了这几个参数外的其他所有全局变量都监控。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(watch_explode=('foo', 'bar'))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h4 id="设置跟踪函数的深度"><a href="#设置跟踪函数的深度" class="headerlink" title="设置跟踪函数的深度"></a>设置跟踪函数的深度</h4><p>当你使用 PySnooper 调试某个函数时，若该函数中还调用了其他函数，PySnooper 是不会傻傻的跟踪进去的。</p>
<p>如果你想继续跟踪该函数中调用的其他函数，可以通过指定 <code>depth</code> 参数来设置跟踪深度（不指定的话默认为 1）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(depth=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<h4 id="设置调试日志的前缀"><a href="#设置调试日志的前缀" class="headerlink" title="设置调试日志的前缀"></a>设置调试日志的前缀</h4><p>当你在使用 PySnooper 跟踪多个函数时，调试的日志会显得杂乱无章，不方便查看。</p>
<p>在这种情况下，PySnooper 提供了一个参数，方便你为不同的函数设置不同的标志，方便你在查看日志时进行区分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(output="/var/log/debug.log", prefix="demo_func: ")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>效果如下<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200734.png" alt=""></p>
<h4 id="设置最大的输出长度"><a href="#设置最大的输出长度" class="headerlink" title="设置最大的输出长度"></a>设置最大的输出长度</h4><p>默认情况下，PySnooper 输出的变量和异常信息，如果超过 100 个字符，被会截断为 100 个字符。</p>
<p>当然你也可以通过指定参数 进行修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(max_variable_length=200）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>您也可以使用max_variable_length=None它从不截断它们。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(max_variable_length=None）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h4 id="支持多线程调试模式"><a href="#支持多线程调试模式" class="headerlink" title="支持多线程调试模式"></a>支持多线程调试模式</h4><p>PySnooper 同样支持多线程的调试，通过设置参数 <code>thread_info=True</code>，它就会在日志中打印出是在哪个线程对变量进行的修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(thread_info=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>效果如下<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118200903.png" alt=""></p>
<h4 id="自定义对象的格式输出"><a href="#自定义对象的格式输出" class="headerlink" title="自定义对象的格式输出"></a>自定义对象的格式输出</h4><p><code>pysnooper.snoop()</code> 函数有一个参数是 <code>custom_repr</code>，它接收一个元组对象。</p>
<p>在这个元组里，你可以指定特定类型的对象以特定格式进行输出。</p>
<p>这边我举个例子。</p>
<p>假如我要跟踪 <code>person</code> 这个 <code>Person</code> 类型的对象，由于它不是常规的 Python 基础类型，PySnooper 是无法正常输出它的信息的。</p>
<p>因此我在 <code>pysnooper.snoop()</code> 函数中设置了 <code>custom_repr</code> 参数，该参数的第一个元素为 <code>Person</code>，第二个元素为 <code>print_persion_obj</code> 函数。</p>
<p>PySnooper 在打印对象的调试信息时，会逐个判断它是否是 Person 类型的对象，若是，就将该对象传入 <code>print_persion_obj</code> 函数中，由该函数来决定如何显示这个对象的信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pysnooper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_person_obj</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"&lt;Person <span class="subst">&#123;obj.name&#125;</span> <span class="subst">&#123;obj.age&#125;</span> <span class="subst">&#123;obj.gender&#125;</span>&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(Person, print_person_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    person = Person()</span><br><span class="line">    person.name = <span class="string">"写代码的明哥"</span></span><br><span class="line">    person.age = <span class="number">27</span></span><br><span class="line">    person.gender = <span class="string">"male"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    profile = demo_func()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>运行一下，观察一下效果。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201118201026.png" alt=""><br>如果你要自定义格式输出的有很多个类型，那么 custom_repr 参数的值可以这么写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=((Person, print_person_obj), (numpy.ndarray, print_ndarray)))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>还有一点我提醒一下，元组的第一个元素可以是类型（如类名Person 或者其他基础类型 list等），也可以是一个判断对象类型的函数。</p>
<p>也就是说，下面三种写法是等价的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 【第一种写法】</span></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(Person, print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【第二种写法】</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_persion_obj</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> isinstance(obj, Person)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(is_persion_obj, print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 【第三种写法】</span></span><br><span class="line"><span class="meta">@pysnooper.snoop(custom_repr=(lambda obj: isinstance(obj, Person), print_persion_obj))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_func</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>友情链接</title>
    <url>/2020/11/15/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><p><a href="https://docs.python.org/zh-cn/3/index.html" target="_blank" rel="noopener">Python3官方文档</a></p>
<p><a href="https://docs.djangoproject.com/en/2.2/" target="_blank" rel="noopener">Django官方文档</a></p>
<p><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="noopener">Django中文版</a></p>
<p><a href="https://www.django-rest-framework.org/" target="_blank" rel="noopener">rest-framework官方文档</a></p>
<p><a href="http://drf.jiuyou.info/#/" target="_blank" rel="noopener">rest-framework文档中文版</a></p>
<p><a href="https://redis-py.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">python-redis官方文档</a></p>
<p><a href="https://django-redis-chs.readthedocs.io/zh_CN/latest/#id8" target="_blank" rel="noopener">django-redis 中文文档</a></p>
<p><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">RabbitMQ官方文档</a></p>
<h3 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h3><p><a href="https://www.the5fire.com" target="_blank" rel="noopener">the5fire: Django企业开发实战作者</a></p>
<p><a href="https://github.com/MoonMonsters/eat_pyspark_in_10_days" target="_blank" rel="noopener">如何用10天吃掉pyspark</a></p>
<h3 id="Golang学习"><a href="#Golang学习" class="headerlink" title="Golang学习"></a>Golang学习</h3><p><a href="https://lailin.xyz/post/go-design-pattern.html" target="_blank" rel="noopener">golang设计模式</a></p>
<p><a href="https://wskdsgcf.gitbook.io/mastering-go-zh-cn/" target="_blank" rel="noopener">mastering-go-zh-cn: golang入门</a></p>
<p><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md" target="_blank" rel="noopener">the-way-to-go_ZH_CN: golang入门</a></p>
<p><a href="https://github.com/geektutu/7days-golang" target="_blank" rel="noopener">从零开始系列…</a></p>
<p><a href="https://chai2010.cn/advanced-go-programming-book/" target="_blank" rel="noopener">Go语言高级编程(Advanced Go Programming)</a></p>
<p><a href="https://draveness.me/golang/" target="_blank" rel="noopener">Go 语言设计与实现</a></p>
<p><a href="https://geektutu.com" target="_blank" rel="noopener">极客兔兔</a></p>
<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><p><a href="https://gitee.com/qishibo/AnotherRedisDesktopManager" target="_blank" rel="noopener">Redis可视化客户端</a></p>
<p><a href="https://dbeaver.io/download/" target="_blank" rel="noopener">数据库客户端</a></p>
]]></content>
  </entry>
  <entry>
    <title>golang - 接口文档框架swagger</title>
    <url>/2020/11/15/golang-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E6%A1%86%E6%9E%B6swagger/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u github.com/swaggo/swag/cmd/swag@v1.6.5</span><br><span class="line">go get -u github.com/swaggo/gin-swagger@v1.2.0</span><br><span class="line">go get -u github.com/swaggo/files</span><br><span class="line">go get -u github.com/alecthomas/template</span><br></pre></td></tr></table></figure>

<p>验证是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ swag -v</span><br><span class="line">swag version v1.6.5</span><br></pre></td></tr></table></figure>

<h3 id="写入注解"><a href="#写入注解" class="headerlink" title="写入注解"></a>写入注解</h3><p>在安装完Swagger关联库后, 就需要在项目里的API接口编写注解,以便后续在生成时能够正确的运行.</p>
<h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table>
<thead>
<tr>
<th>注解</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@Summary</td>
<td>摘要</td>
</tr>
<tr>
<td>@Produce</td>
<td>API可以长生的MIME类型的列表. 我们可以把MIME类型简单的理解为响应类型, 例如JSON, XML, HTML等.</td>
</tr>
<tr>
<td>@Param</td>
<td>参数格式, 从左到右分别为: 参数名, 入参类型, 数据类型, 是否必填和注释</td>
</tr>
<tr>
<td>@Success</td>
<td>响应成功, 从左到右分别为: 状态码, 参数类型, 数据类型和注释</td>
</tr>
<tr>
<td>@Failure</td>
<td>响应失败, 从左到右分别为状态码, 参数类型, 数据类型和注释</td>
</tr>
<tr>
<td>@Router</td>
<td>路由, 从左到右分别为: 路由地址和HTTP方法</td>
</tr>
</tbody></table>
<h4 id="API函数代码示例"><a href="#API函数代码示例" class="headerlink" title="API函数代码示例"></a>API函数代码示例</h4><p>用的是Gin框架.</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTag</span><span class="params">()</span> <span class="title">Tag</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Tag&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Get</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 获取多个标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param name query string false "标签名称" maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state query int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param page query int false "页码"</span></span><br><span class="line"><span class="comment">// @Param page_size query int false "每页数量"</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">List</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 新增标签</span></span><br><span class="line"><span class="comment">// @Product json</span></span><br><span class="line"><span class="comment">// @Param name body string true "标签名称" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param created_by body string false "创建者" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags [post]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Create</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 更新标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param id path int true "标签ID"</span></span><br><span class="line"><span class="comment">// @Param name body string false "标签名称" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span></span><br><span class="line"><span class="comment">// @Param modified_by body string true "修改者" minlength(3) maxlength(100)</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;array&#125; model.Tag "成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags/&#123;id&#125; [put]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Update</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 删除标签</span></span><br><span class="line"><span class="comment">// @Produce json</span></span><br><span class="line"><span class="comment">// @Param id path int true "标签ID"</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; string "删除成功"</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; errcode.Error "请求错误"</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; errcode.Error "内部错误"</span></span><br><span class="line"><span class="comment">// @Router /api/v1/tags/&#123;id&#125; [delete]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Tag)</span> <span class="title">Delete</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h4><p>针对整个项目, 也能写入注解.</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @title 博客系统</span></span><br><span class="line"><span class="comment">// @version 1.0</span></span><br><span class="line"><span class="comment">// @description Go+Gin框架的博客项目</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    router := routers.NewRouter()</span><br><span class="line"></span><br><span class="line">    s := &amp;http.Server&#123;</span><br><span class="line">        Addr:           <span class="string">":8080"</span>,</span><br><span class="line">        Handler:        router,</span><br><span class="line">        ReadTimeout:    <span class="number">10</span> * time.Second,</span><br><span class="line">        WriteTimeout:   <span class="number">10</span> * time.Second,</span><br><span class="line">        MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    s.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档</h3><p>在项目的主目录下, 使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swag init</span><br></pre></td></tr></table></figure>
<p>执行完后, 可以看到在docs文件夹中生成了docs.go, swagger.json和swagger.yarm三个文件.</p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">"GoProgrammingJourney/blog_service/docs"</span></span><br><span class="line">  ginSwagger <span class="string">"github.com/swaggo/gin-swagger"</span></span><br><span class="line">  <span class="string">"github.com/swaggo/gin-swagger/swaggerFiles"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r := gin.New()</span><br><span class="line">r.GET(<span class="string">"/swagger/*any"</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br></pre></td></tr></table></figure>

<h3 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h3><p>访问网址可以看到生成后的项目文档了.<br/><br><a href="http://127.0.0.1:8080/swagger/index.html" target="_blank" rel="noopener">http://127.0.0.1:8080/swagger/index.html</a></p>
<p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201115143526.png" alt=""></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>[转]常见面试题之缓存雪崩、缓存穿透、缓存击穿</title>
    <url>/2020/11/08/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</url>
    <content><![CDATA[<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMDU0MTA3Nw==&mid=2247483988&idx=1&sn=3bd52650907867d65f1c4d5c3cff8f13&chksm=e8b0902edfc71938f7d7a29246d7278ac48e6c104ba27c684e12e840892252b0823de94b94c1&token=1558933779&lang=zh_CN#rd" target="_blank" rel="noopener">常见面试题之缓存雪崩、缓存穿透、缓存击穿</a></p>
<h3 id="缓存应用"><a href="#缓存应用" class="headerlink" title="缓存应用"></a>缓存应用</h3><p>缓存在我们平常的项目中多多少少都会使用到，缓存使用的使用场景还是比较多的，缓存是分布式系统中的重要组件，主要解决高并发、大数据场景下，热点数据访问的性能问题。提高性能的数据快速访问。一提到缓存，这些是我们都能想到的一些缓存应用场景，但是我们是不太清楚缓存的本质思想是什么的。缓存的基本思想就是我们非常熟悉的空间换时间。缓存也并不是那么的高大上，虽然他可以为系统的性能进行提升。缓存的思想实际在操作系统或者其他地方都被大量用到。比如 「<strong>CPU Cache 缓存的是内存数据用于解决 CPU 处理速度和内存不匹配的问题，内存缓存的是硬盘数据用于解决硬盘访问速度过慢的问题。</strong>」 「<strong>再比如操作系统在 页表方案 基础之上引入了 快表 来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache）。</strong>」</p>
<p>上面简单介绍了缓存的基本思想，现在回到业务系统来说：<strong>我们为了避免用户在请求数据的时候获取速度过于缓慢，所以我们在数据库之上增加了缓存这一层来弥补。</strong>画个图能更加方便大家的理解：</p>
<p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108204545.png" alt=""><br>简单点说当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能会出现一些现象。</p>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="什么是缓存雪崩"><a href="#什么是缓存雪崩" class="headerlink" title="什么是缓存雪崩"></a>什么是缓存雪崩</h4><p>这里我们通过一个例子进行分析。比如马老师的某宝，我们打开某宝的首页时，看到一些图片呀、推荐店铺信息呀等等，这些都属于热点数据，为什么他们会加载的那么快呢？因为使用到了缓存呗。这些热点数据都做了缓存，假设现在把这些热点数据的缓存失效时间为一样，现在我们马老师要做一个秒杀活动，假设在秒杀活动时每秒有8000个请求，本来有缓存我们是可以扛住每秒 6000 个请求，但是缓存当时所有的Key都失效了。此时 1 秒 8000 个请求全部落数据库，数据库必然扛不住，它会报一下警，真实情况可能DBA都没反应过来就直接挂了。此时，如果没用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。上面造成缓存雪崩的原因是因为失效时间造成，还有一种可能是因为缓存服务宕机。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205054.png" alt=""></p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>这里分三个时间段进行进行分析</p>
<h5 id="事前"><a href="#事前" class="headerlink" title="事前"></a>事前</h5><p>如果缓存雪崩造成的原因是因为缓存服务宕机造成的，可以将redis采用集群部署，可以使用 主从+哨兵 ，Redis Cluster 来避免 Redis 全盘崩溃的情况。若缓存雪崩是因为大量缓存因为失效时间而造成的，我们在批量往redis存数据的时候，把每个Key的失效时间都加个随机值就好了，这样可以保证数据不会在同一时间大面积失效，或者设置热点数据永远不过期，有更新操作就更新缓存就可以了。</p>
<h5 id="事中"><a href="#事中" class="headerlink" title="事中"></a>事中</h5><p>如果我们之前没有考虑缓存雪崩的问题，那么在实际使用中真的发生缓存雪崩了，我们该怎么办呢？这时我们就要考虑使用其他方法避免出现这种情况了。我们可以使用ehcache 本地缓存 + Hystrix 限流&amp;降级 ,避免 MySQL 被打死的情况发生。<br>这里使用echache本地缓存的目的就是考虑在 Redis Cluster 完全不可用的时候，ehcache 本地缓存还能够支撑一阵。</p>
<p>使用 Hystrix 进行 限流 &amp; 降级 ，比如一秒来了5000个请求，我们可以设置假设只能有一秒 2000 个请求能通过这个组件，那么其他剩余的 3000 请求就会走限流逻辑，然后去调用我们自己开发的降级组件（降级）。比如设置的一些默认值呀之类的。以此来保护最后的 MySQL 不会被大量的请求给打死。</p>
<h5 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h5><p>如果缓存服务宕机了，这里我们可以开启「Redis」 持久化 「RDB」+「AOF」，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</p>
<p>综上所述，可画出如下图所示：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205219.png" alt=""></p>
<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h4><p>在正常的情况下，用户查询数据都是存在的，但是在异常情况下，缓存与数据都没有数据，但是用户不断发起请求，这样每次请求都会打到数据库上面去，这时的用户很可能是攻击者，攻击会导致数据库压力过大，严重会击垮数据库。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205312.png" alt=""></p>
<h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="添加参数校验"><a href="#添加参数校验" class="headerlink" title="添加参数校验"></a>添加参数校验</h5><p>我刚入职的时候，我的老大就跟我说过，作为一名后端开发工程师，不要相信前端传来的东西，所以数据一定要在后端进行校验。我们可以在接口层添加校验，不合法的直接返回即可，没必要做后续的操作。</p>
<h5 id="缓存空值"><a href="#缓存空值" class="headerlink" title="缓存空值"></a>缓存空值</h5><p>上面我们也介绍了，之所以会发生穿透，就是因为缓存中没有存储这些空数据的key。从而导致每次查询都到数据库去了。</p>
<p>那么我们就可以为这些key 设置的值设置为null 丢到缓存里面去。后面再出现查询这个key 的请求的时候，直接返回null ,就不用在到 数据库中去走一圈了。但是别忘了设置过期时间。</p>
<h5 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h5><p>redis的一个高级用法就是使用布隆过滤器（Bloom Filter），BloomFilter 类似于一个hase set 用来判断某个元素（key）是否存在于某个集合中。这个也能很好的防止缓存穿透的发生，他的原理也很简单就是利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查了DB刷新KV再return。</p>
<p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/20201108205409.png" alt=""></p>
<p>上面介绍了三种方法，用哪种方法最好呢？下面我们来分析一下：</p>
<p>第一种方法，添加参数校验，这里是必须要添加，不过只能过滤掉一些特殊值，比如传的id为负数，如果传的正常id，这里参数校验就不起作用了。</p>
<p>第二种方法，如果有一些恶意攻击，攻击会带来大量的ke y是不存在的，这样采用第二种方法就不合适了。所以针对这种key 异常多，请求重复率比较低的数据，我们就没有必要进行缓存，使用第三种方案直接过滤掉。</p>
<p>如果对于空数据key有限的，重复率比较高的，我们则可以采用第二种方式进行缓存。</p>
<h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="什么是缓存击穿"><a href="#什么是缓存击穿" class="headerlink" title="什么是缓存击穿"></a>什么是缓存击穿</h4><p>我们在平常高并发的系统中，大量的请求同时查询一个key时，假设此时，这个key正好失效了，就会导致大量的请求都打到数据库上面去，这种现象我们称为击穿。</p>
<p>这么看缓存击穿和缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，打崩了DB，而缓存击穿不同的是「缓存击穿」是指一个Key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个完好无损的桶上凿开了一个洞。</p>
<p>缓存击穿带来的问题就是会造成某一时刻数据库请求量过大，压力剧增。</p>
<h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h4><h5 id="不过期"><a href="#不过期" class="headerlink" title="不过期"></a>不过期</h5><p>我们简单粗暴点，直接让热点数据永远不过期，定时任务定期去刷新数据就可以了。不过这样设置需要区分场景，比如某宝首页可以这么做。</p>
<h5 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h5><p>为了避免出现缓存击穿的情况，我们可以在第一个请求去查询数据库的时候对他加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，后面的线程进来发现已经有缓存了，就直接走缓存，从而保护数据库。但是也是由于它会阻塞其他的线程，此时系统吞吐量会下降。需要结合实际的业务去考虑是否要这么做。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>[转]golang - beego框架入门</title>
    <url>/2020/11/08/golang-%E8%BD%AC-beego%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/u/4bede98c5ae5" target="_blank" rel="noopener">转载至Clown1995</a></p>
<p><a href="https://www.jianshu.com/p/462e23ae402c" target="_blank" rel="noopener">Beego脱坑（一）Beego简介和安装</a></p>
<p><a href="https://www.jianshu.com/p/5a586b06c55f" target="_blank" rel="noopener">Beego脱坑（二）新建Beego项目</a></p>
<p><a href="https://www.jianshu.com/p/d0d1462113d4" target="_blank" rel="noopener">Beego脱坑（三）Router</a></p>
<p><a href="https://www.jianshu.com/p/a0ece5f05ab9" target="_blank" rel="noopener">Beego脱坑（四）Controller</a></p>
<p><a href="https://www.jianshu.com/p/fa3dbf8aa774" target="_blank" rel="noopener">Beego脱坑（五）使用模板获取数据</a></p>
<p><a href="https://www.jianshu.com/p/69c8b3f8d58c" target="_blank" rel="noopener">Beego脱坑（六）多种格式数据输出</a></p>
<p><a href="https://www.jianshu.com/p/43459409ec00" target="_blank" rel="noopener">Beego脱坑（七）获取表单数据并解析到结构体</a></p>
<p><a href="https://www.jianshu.com/p/37abab5808bb" target="_blank" rel="noopener">Beego脱坑（八）表单数据验证</a></p>
<p><a href="https://www.jianshu.com/p/9aee6d938c49" target="_blank" rel="noopener">Beego脱坑（九）Cookie和Session</a></p>
<p><a href="https://www.jianshu.com/p/a519cf3ff3b7" target="_blank" rel="noopener">Beego脱坑（十）数据绑定</a></p>
<p><a href="https://www.jianshu.com/p/a63953b32e60" target="_blank" rel="noopener">Beego脱坑（十一）文件上传、下载</a></p>
<p><a href="https://www.jianshu.com/p/a65cad84a4b9" target="_blank" rel="noopener">Beego脱坑（十二）ORM介绍并创建第一个表</a></p>
<p><a href="https://www.jianshu.com/p/d6bf1e3d6187" target="_blank" rel="noopener">Beego脱坑（十三）ORM基本增删改查</a></p>
<p><a href="https://www.jianshu.com/p/6a1da3390615" target="_blank" rel="noopener">Beego脱坑（十四）ORM高级查询</a></p>
<p><a href="https://www.jianshu.com/p/a0ffd74e7481" target="_blank" rel="noopener">Beego脱坑（十五）ORM关系查询</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>beego</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]golang - 解密Go协程的栈内存管理</title>
    <url>/2020/10/12/golang-%E8%BD%AC-%E8%A7%A3%E5%AF%86Go%E5%8D%8F%E7%A8%8B%E7%9A%84%E6%A0%88%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>转载：<a href="https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&mid=2247485886&idx=1&sn=f29fe2ce95a485e2c2ef1c4cd33b5085&chksm=fa80d829cdf7513fdf45b16be023809d9725b150803b6482643c3dd84aa3c0090c2cb9efd3aa&token=940952510&lang=zh_CN#rd" target="_blank" rel="noopener">解密Go协程的栈内存管理</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>[转]golang - 图解Go内存管理器的内存分配策略</title>
    <url>/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E8%A7%A3Go%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>转载：<a href="https://mp.weixin.qq.com/s?__biz=MzUzNTY5MzU2MA==&mid=2247485736&idx=1&sn=921a9dfe3d638074b68a4fd072ea3cb9&chksm=fa80d8bfcdf751a948ea49ee620ca9d88ff0a62b4ad4e3a53321fee6813b8f90098fd72f7b11&token=940952510&lang=zh_CN#rd" target="_blank" rel="noopener">图解Go内存管理器的内存分配策略</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>[转]golang - 图文结合，白话Go的垃圾回收原理</title>
    <url>/2020/10/12/golang-%E8%BD%AC-%E5%9B%BE%E6%96%87%E7%BB%93%E5%90%88%EF%BC%8C%E7%99%BD%E8%AF%9DGo%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>转载: <a href="https://zhuanlan.zhihu.com/p/264789260" target="_blank" rel="noopener">图文结合，白话Go的垃圾回收原理</a></p>
<p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/hexo/v2-9515a7f1156f98371a25361572b25f0d_720w.jpg" alt=""></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="更换电脑后，如何更新博客"><a href="#更换电脑后，如何更新博客" class="headerlink" title="更换电脑后，如何更新博客"></a>更换电脑后，如何更新博客</h3><p><a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></p>
<h4 id="关于日常的改动流程"><a href="#关于日常的改动流程" class="headerlink" title="关于日常的改动流程"></a>关于日常的改动流程</h4><ol>
<li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）</li>
<li>然后才执行hexo g -d发布网站到master分支上</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>golang - 使用函数自定义排序</title>
    <url>/2020/06/06/golang-%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="golang-使用函数自定义排序"><a href="#golang-使用函数自定义排序" class="headerlink" title="golang - 使用函数自定义排序"></a>golang - 使用函数自定义排序</h1><p>有时候我们想使用和集合的自然排序不同的方法对集合进行排序。 例如，我们想按照字母的长度而不是首字母顺序对字符串排序。 </p>
<p>在golang自带的sort模块中, 可以先阅读下函数的代码:</p>
<p><code>sort.Sort</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sort</span><span class="params">(data Interface)</span></span> &#123;</span><br><span class="line">    n := data.Len()</span><br><span class="line">    quickSort(data, <span class="number">0</span>, n, maxDepth(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>sort.quickSort</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(data Interface, a, b, maxDepth <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> b-a &gt; <span class="number">12</span> &#123; <span class="comment">// Use ShellSort for slices &lt;= 12 elements</span></span><br><span class="line">        <span class="keyword">if</span> maxDepth == <span class="number">0</span> &#123;</span><br><span class="line">            heapSort(data, a, b)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        maxDepth--</span><br><span class="line">        mlo, mhi := doPivot(data, a, b)</span><br><span class="line">        <span class="comment">// Avoiding recursion on the larger subproblem guarantees</span></span><br><span class="line">        <span class="comment">// a stack depth of at most lg(b-a).</span></span><br><span class="line">        <span class="keyword">if</span> mlo-a &lt; b-mhi &#123;</span><br><span class="line">            quickSort(data, a, mlo, maxDepth)</span><br><span class="line">            a = mhi <span class="comment">// i.e., quickSort(data, mhi, b)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            quickSort(data, mhi, b, maxDepth)</span><br><span class="line">            b = mlo <span class="comment">// i.e., quickSort(data, a, mlo)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> b-a &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="comment">// Do ShellSort pass with gap 6</span></span><br><span class="line">        <span class="comment">// It could be written in this simplified form cause b-a &lt;= 12</span></span><br><span class="line">        <span class="keyword">for</span> i := a + <span class="number">6</span>; i &lt; b; i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> data.Less(i, i<span class="number">-6</span>) &#123;</span><br><span class="line">                data.Swap(i, i<span class="number">-6</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        insertionSort(data, a, b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>具体实现方式可以暂时忽略, 从中找到几个重点:</p>
<ol>
<li>参数是 Interface 类型</li>
<li>需要重写Interface下的三个函数, <code>Len()</code>, <code>Swap()</code>, <code>Less()</code></li>
</ol>
<p><code>sort.Interface</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">    Len() <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// Less reports whether the element with</span></span><br><span class="line">    <span class="comment">// index i should sort before the element with index j.</span></span><br><span class="line">    Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line">    <span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">    Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>具体实现如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">方便实现排序功能, 自定义类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> StringSortByLength []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">从sort.Sort的代码看, 需要实现这两个函数才能实现自定义的排序功能</span></span><br><span class="line"><span class="comment">Less函数是控制实际的自定义排序逻辑</span></span><br><span class="line"><span class="comment">想实现按长度排序功能, 那么就返回字符串的长度, 并在Less中使用len比较</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Swap</span><span class="params">(i <span class="keyword">int</span>, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    s[i], s[j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s StringSortByLength)</span> <span class="title">Less</span><span class="params">(i <span class="keyword">int</span>, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s[i]) &lt; <span class="built_in">len</span>(s[j])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    types := StringSortByLength&#123;<span class="string">"string"</span>, <span class="string">"int"</span>, <span class="string">"float"</span>, <span class="string">"float64"</span>, <span class="string">"int32"</span>&#125;</span><br><span class="line">    sort.Sort(types)</span><br><span class="line">    fmt.Println(types)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>[转]golang - web - 中间件介绍</title>
    <url>/2020/06/06/%E8%BD%AC-golang-web-%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>本章将对现在流行的Web框架中的中间件(middleware)技术原理进行分析，并介绍如何使用中间件技术将业务和非业务代码功能进行解耦。</p>
<h3 id="代码泥潭"><a href="#代码泥潭" class="headerlink" title="代码泥潭"></a>代码泥潭</h3><p>先来看一段代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// middleware/hello.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/"</span>, hello)</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是一个典型的Web服务，挂载了一个简单的路由。我们的线上服务一般也是从这样简单的服务开始逐渐拓展开去的。</p>
<p>现在突然来了一个新的需求，我们想要统计之前写的hello服务的处理耗时，需求很简单，我们对上面的程序进行少量修改：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// middleware/hello_with_time_elapse.go</span></span><br><span class="line"><span class="keyword">var</span> logger = log.New(os.Stdout, <span class="string">""</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    timeStart := time.Now()</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">    timeElapsed := time.Since(timeStart)</span><br><span class="line">    logger.Println(timeElapsed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样便可以在每次接收到http请求时，打印出当前请求所消耗的时间。</p>
<a id="more"></a>

<p>完成了这个需求之后，我们继续进行业务开发，提供的API逐渐增加，现在我们的路由看起来是这个样子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// middleware/hello_with_more_routes.go</span></span><br><span class="line"><span class="comment">// 省略了一些相同的代码</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showInfoHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showEmailHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showFriendsHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    timeStart := time.Now()</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"your friends is tom and alex"</span>))</span><br><span class="line">    timeElapsed := time.Since(timeStart)</span><br><span class="line">    logger.Println(timeElapsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/"</span>, helloHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/info/show"</span>, showInfoHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/email/show"</span>, showEmailHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/friends/show"</span>, showFriendsHandler)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一个handler里都有之前提到的记录运行时间的代码，每次增加新的路由我们也同样需要把这些看起来长得差不多的代码拷贝到我们需要的地方去。因为代码不太多，所以实施起来也没有遇到什么大问题。</p>
<p>渐渐的我们的系统增加到了30个路由和<code>handler</code>函数，每次增加新的handler，我们的第一件工作就是把之前写的所有和业务逻辑无关的周边代码先拷贝过来。</p>
<p>接下来系统安稳地运行了一段时间，突然有一天，老板找到你，我们最近找人新开发了监控系统，为了系统运行可以更加可控，需要把每个接口运行的耗时数据主动上报到我们的监控系统里。给监控系统起个名字吧，叫metrics。现在你需要修改代码并把耗时通过HTTP Post的方式发给metrics系统了。我们来修改一下<code>helloHandler()</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    timeStart := time.Now()</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">    timeElapsed := time.Since(timeStart)</span><br><span class="line">    logger.Println(timeElapsed)</span><br><span class="line">    <span class="comment">// 新增耗时上报</span></span><br><span class="line">    metrics.Upload(<span class="string">"timeHandler"</span>, timeElapsed)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改到这里，本能地发现我们的开发工作开始陷入了泥潭。无论未来对我们的这个Web系统有任何其它的非功能或统计需求，我们的修改必然牵一发而动全身。只要增加一个非常简单的非业务统计，我们就需要去几十个handler里增加这些业务无关的代码。虽然一开始我们似乎并没有做错，但是显然随着业务的发展，我们的行事方式让我们陷入了代码的泥潭。</p>
<h3 id="使用中间件剥离非业务逻辑"><a href="#使用中间件剥离非业务逻辑" class="headerlink" title="使用中间件剥离非业务逻辑"></a>使用中间件剥离非业务逻辑</h3><p>我们来分析一下，一开始在哪里做错了呢？我们只是一步一步地满足需求，把我们需要的逻辑按照流程写下去呀？</p>
<p>我们犯的最大的错误，是把业务代码和非业务代码揉在了一起。对于大多数的场景来讲，非业务的需求都是在http请求处理前做一些事情，并且在响应完成之后做一些事情。我们有没有办法使用一些重构思路把这些公共的非业务功能代码剥离出去呢？回到刚开头的例子，我们需要给我们的<code>helloHandler()</code>增加超时时间统计，我们可以使用一种叫<code>function adapter</code>的方法来对<code>helloHandler()</code>进行包装：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    wr.Write([]<span class="keyword">byte</span>(<span class="string">"hello"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">timeMiddleware</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(wr http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        timeStart := time.Now()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next handler</span></span><br><span class="line">        next.ServeHTTP(wr, r)</span><br><span class="line"></span><br><span class="line">        timeElapsed := time.Since(timeStart)</span><br><span class="line">        logger.Println(timeElapsed)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.Handle(<span class="string">"/"</span>, timeMiddleware(http.HandlerFunc(hello)))</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就非常轻松地实现了业务与非业务之间的剥离，魔法就在于这个<code>timeMiddleware</code>。可以从代码中看到，我们的<code>timeMiddleware()</code>也是一个函数，其参数为<code>http.Handler</code>，<code>http.Handler</code>的定义在<code>net/http</code>包中：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>任何方法实现了<code>ServeHTTP</code>，即是一个合法的<code>http.Handler</code>，读到这里你可能会有一些混乱，我们先来梳理一下http库的<code>Handler</code>，<code>HandlerFunc</code>和<code>ServeHTTP</code>的关系：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f HandlerFunc)</span> <span class="title">ServeHTTP</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">    f(w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要你的handler函数签名是：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ResponseWriter, *Request)</span></span></span><br></pre></td></tr></table></figure>

<p>那么这个<code>handler</code>和<code>http.HandlerFunc()</code>就有了一致的函数签名，可以将该<code>handler()</code>函数进行类型转换，转为<code>http.HandlerFunc</code>。而<code>http.HandlerFunc</code>实现了<code>http.Handler</code>这个接口。在<code>http</code>库需要调用你的handler函数来处理http请求时，会调用<code>HandlerFunc()</code>的<code>ServeHTTP()</code>函数，可见一个请求的基本调用链是这样的：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">h = getHandler() =&gt; h.ServeHTTP(w, r) =&gt; h(w, r)</span><br></pre></td></tr></table></figure>

<p>上面提到的把自定义<code>handler</code>转换为<code>http.HandlerFunc()</code>这个过程是必须的，因为我们的<code>handler</code>没有直接实现<code>ServeHTTP</code>这个接口。上面的代码中我们看到的HandleFunc(注意HandlerFunc和HandleFunc的区别)里也可以看到这个强制转换过程：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">    DefaultServeMux.HandleFunc(pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">    mux.Handle(pattern, HandlerFunc(handler))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>知道handler是怎么一回事，我们的中间件通过包装handler，再返回一个新的handler就好理解了。</p>
<p>总结一下，我们的中间件要做的事情就是通过一个或多个函数对handler进行包装，返回一个包括了各个中间件逻辑的函数链。我们把上面的包装再做得复杂一些：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">customizedHandler = logger(timeout(ratelimit(helloHandler)))</span><br></pre></td></tr></table></figure>

<p>这个函数链在执行过程中的上下文可以用图来表示。</p>
<p><img src="https://i.loli.net/2020/06/06/9i3fgTvmAOx5RBz.png" alt="img"></p>
<p>再直白一些，这个流程在进行请求处理的时候就是不断地进行函数压栈再出栈，有一些类似于递归的执行流：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[exec of logger logic]           函数栈: []</span><br><span class="line"></span><br><span class="line">[exec of timeout logic]          函数栈: [logger]</span><br><span class="line"></span><br><span class="line">[exec of ratelimit logic]        函数栈: [timeout&#x2F;logger]</span><br><span class="line"></span><br><span class="line">[exec of helloHandler logic]     函数栈: [ratelimit&#x2F;timeout&#x2F;logger]</span><br><span class="line"></span><br><span class="line">[exec of ratelimit logic part2]  函数栈: [timeout&#x2F;logger]</span><br><span class="line"></span><br><span class="line">[exec of timeout logic part2]    函数栈: [logger]</span><br><span class="line"></span><br><span class="line">[exec of logger logic part2]     函数栈: []</span><br></pre></td></tr></table></figure>

<p>功能实现了，但在上面的使用过程中我们也看到了，这种函数套函数的用法不是很美观，同时也不具备什么可读性。</p>
<h3 id="更优雅的中间件写法"><a href="#更优雅的中间件写法" class="headerlink" title="更优雅的中间件写法"></a>更优雅的中间件写法</h3><p>上一节中解决了业务功能代码和非业务功能代码的解耦，但也提到了，看起来并不美观，如果需要修改这些函数的顺序，或者增删中间件还是有点费劲，本节我们来进行一些“写法”上的优化。</p>
<p>看一个例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r = NewRouter()</span><br><span class="line">r.Use(logger)</span><br><span class="line">r.Use(timeout)</span><br><span class="line">r.Use(ratelimit)</span><br><span class="line">r.Add(<span class="string">"/"</span>, helloHandler)</span><br></pre></td></tr></table></figure>

<p>通过多步设置，我们拥有了和上一节差不多的执行函数链。胜在直观易懂，如果我们要增加或者删除中间件，只要简单地增加删除对应的<code>Use()</code>调用就可以了。非常方便。</p>
<p>从框架的角度来讲，怎么实现这样的功能呢？也不复杂：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> middleware <span class="function"><span class="keyword">func</span><span class="params">(http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Router <span class="keyword">struct</span> &#123;</span><br><span class="line">    middlewareChain [] middleware</span><br><span class="line">    mux <span class="keyword">map</span>[<span class="keyword">string</span>] http.Handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRouter</span><span class="params">()</span> *<span class="title">Router</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Router&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">Use</span><span class="params">(m middleware)</span></span> &#123;</span><br><span class="line">    r.middlewareChain = <span class="built_in">append</span>(r.middlewareChain, m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Router)</span> <span class="title">Add</span><span class="params">(route <span class="keyword">string</span>, h http.Handler)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mergedHandler = h</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(r.middlewareChain) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        mergedHandler = r.middlewareChain[i](mergedHandler)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r.mux[route] = mergedHandler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意代码中的<code>middleware</code>数组遍历顺序，和用户希望的调用顺序应该是”相反”的。应该不难理解。</p>
<h3 id="哪些事情适合在中间件中做"><a href="#哪些事情适合在中间件中做" class="headerlink" title="哪些事情适合在中间件中做"></a>哪些事情适合在中间件中做</h3><p>以较流行的开源Go语言框架chi为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compress.go</span><br><span class="line">  &#x3D;&gt; 对http的响应体进行压缩处理</span><br><span class="line">heartbeat.go</span><br><span class="line">  &#x3D;&gt; 设置一个特殊的路由，例如&#x2F;ping，&#x2F;healthcheck，用来给负载均衡一类的前置服务进行探活</span><br><span class="line">logger.go</span><br><span class="line">  &#x3D;&gt; 打印请求处理处理日志，例如请求处理时间，请求路由</span><br><span class="line">profiler.go</span><br><span class="line">  &#x3D;&gt; 挂载pprof需要的路由，如&#96;&#x2F;pprof&#96;、&#96;&#x2F;pprof&#x2F;trace&#96;到系统中</span><br><span class="line">realip.go</span><br><span class="line">  &#x3D;&gt; 从请求头中读取X-Forwarded-For和X-Real-IP，将http.Request中的RemoteAddr修改为得到的RealIP</span><br><span class="line">requestid.go</span><br><span class="line">  &#x3D;&gt; 为本次请求生成单独的requestid，可一路透传，用来生成分布式调用链路，也可用于在日志中串连单次请求的所有逻辑</span><br><span class="line">timeout.go</span><br><span class="line">  &#x3D;&gt; 用context.Timeout设置超时时间，并将其通过http.Request一路透传下去</span><br><span class="line">throttler.go</span><br><span class="line">  &#x3D;&gt; 通过定长大小的channel存储token，并通过这些token对接口进行限流</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch5-web/ch5-03-middleware.html" target="_blank" rel="noopener">中间件</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>[转]golang - 发布订阅模型</title>
    <url>/2020/06/04/%5B%E8%BD%AC%5Dgolang-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="发布订阅者"><a href="#发布订阅者" class="headerlink" title="发布订阅者"></a>发布订阅者</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pubsub</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">    <span class="comment">// 订阅者是一个管道</span></span><br><span class="line">    subscriber <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 主题是一个过滤器</span></span><br><span class="line">    topicFunc <span class="function"><span class="keyword">func</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布者对象</span></span><br><span class="line"><span class="keyword">type</span> Publisher <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// 读写锁</span></span><br><span class="line">    m sync.RWMutex</span><br><span class="line">    <span class="comment">// 订阅队列的缓存大小</span></span><br><span class="line">    buffer <span class="keyword">int</span></span><br><span class="line">    <span class="comment">// 发布的过期时间</span></span><br><span class="line">    timeout time.Duration</span><br><span class="line">    <span class="comment">// 订阅者信息</span></span><br><span class="line">    subscribers <span class="keyword">map</span>[subscriber]topicFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建一个发布者, 设置超时时间和缓存队列长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPublisher</span><span class="params">(publishTimeout time.Duration, buffer <span class="keyword">int</span>)</span> *<span class="title">Publisher</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Publisher&#123;</span><br><span class="line">        buffer:      buffer,</span><br><span class="line">        timeout:     publishTimeout,</span><br><span class="line">        subscribers: <span class="built_in">make</span>(<span class="keyword">map</span>[subscriber]topicFunc),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个订阅者, 订阅过滤器筛选后的主题</span></span><br><span class="line"><span class="comment">// 添加订阅主题参数, 返回订阅者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">SubscribeTopic</span><span class="params">(topic topicFunc)</span> <span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, p.buffer)</span><br><span class="line">    p.m.Lock()</span><br><span class="line">    p.subscribers[ch] = topic</span><br><span class="line">    p.m.Unlock()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅所有的主题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">Subscribe</span><span class="params">()</span> <span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">return</span> p.SubscribeTopic(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//退订</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">Evict</span><span class="params">(sub <span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    p.m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> p.m.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">delete</span>(p.subscribers, sub)</span><br><span class="line">    <span class="built_in">close</span>(sub)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送一个主题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">Publish</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    p.m.RLock()</span><br><span class="line">    <span class="keyword">defer</span> p.m.RUnlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="comment">// 遍历所有的订阅者, 一个个的发布</span></span><br><span class="line">    <span class="keyword">for</span> sub, topic := <span class="keyword">range</span> p.subscribers &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> p.sendTopic(sub, topic, v, &amp;wg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上的发送函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">sub: 订阅者, chan</span></span><br><span class="line"><span class="comment">topic: 订阅主题, 即传进来的函数</span></span><br><span class="line"><span class="comment">v: 函数参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">sendTopic</span><span class="params">(sub subscriber, topic topicFunc, v <span class="keyword">interface</span>&#123;&#125;, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    <span class="comment">// 该代码中, topic会返回true或者false, 如果返回false就表示没有订阅</span></span><br><span class="line">    <span class="comment">// 如果topic是nil, 就表示全订阅</span></span><br><span class="line">    <span class="keyword">if</span> topic != <span class="literal">nil</span> &amp;&amp; !topic(v) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> sub &lt;- v:	<span class="comment">// 将参数传递给了订阅者, 订阅者能打印, 则表示收到发布的内容</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(p.timeout):	<span class="comment">// 超时时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭发布者对象, 同时关闭所有的订阅者管道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Publisher)</span> <span class="title">Close</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p.m.Lock()</span><br><span class="line">    <span class="keyword">defer</span> p.m.Unlock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> sub := <span class="keyword">range</span> p.subscribers &#123;</span><br><span class="line">        <span class="built_in">delete</span>(p.subscribers, sub)</span><br><span class="line">        <span class="built_in">close</span>(sub)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"GoStudy/chai2010.gitbooks.io/p1/pubsub"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := pubsub.NewPublisher(<span class="number">100</span>*time.Microsecond, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">defer</span> p.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅所有主题</span></span><br><span class="line">    all := p.Subscribe()</span><br><span class="line">    <span class="comment">// 订阅包含了golang字符串的主题</span></span><br><span class="line">    <span class="comment">// 返回了一个chan</span></span><br><span class="line">    golang := p.SubscribeTopic(<span class="function"><span class="keyword">func</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> s, ok := v.(<span class="keyword">string</span>); ok &#123;</span><br><span class="line">            <span class="keyword">return</span> strings.Contains(s, <span class="string">"golang"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    p.Publish(<span class="string">"hello World!"</span>)</span><br><span class="line">    p.Publish(<span class="string">"hello golang!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> msg := <span class="keyword">range</span> all &#123;</span><br><span class="line">            fmt.Println(<span class="string">"all: "</span>, msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> msg := <span class="keyword">range</span> golang &#123;</span><br><span class="line">            fmt.Println(<span class="string">"golang: "</span>, msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch1-basic/ch1-06-goroutine.html" target="_blank" rel="noopener">常见的并发模式</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>django-rest-framework --- 权限</title>
    <url>/2020/05/23/django-rest-framework-%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    USER_COMMON = <span class="number">0</span></span><br><span class="line">    USER_VIP = <span class="number">100</span></span><br><span class="line">    USER_SVIP = <span class="number">200</span></span><br><span class="line">    <span class="comment"># 用户类型</span></span><br><span class="line">    USER_TYPE = (</span><br><span class="line">        (USER_COMMON, <span class="string">'普通用户'</span>),</span><br><span class="line">        (USER_VIP, <span class="string">'VIP'</span>),</span><br><span class="line">        (USER_SVIP, <span class="string">'SVIP'</span>)</span><br><span class="line">    )</span><br><span class="line"> </span><br><span class="line">    user_type = models.IntegerField(choices=USER_TYPE, default=USER_COMMON)</span><br><span class="line">    <span class="comment"># 建立1对1关系模型</span></span><br><span class="line">    user = models.OneToOneField(User, on_delete=models.CASCADE,</span><br><span class="line">related_name=<span class="string">'userinfo'</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> UserInfo</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUserPermission</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    VIP用户才可访问</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> request.user.is_authenticated <span class="keyword">and</span></span><br><span class="line">request.user.userinfo.user_type == UserInfo.USER_VIP</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SvipUserPermission</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    SVIP用户才可访问</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> request.user.is_authenticated <span class="keyword">and</span></span><br><span class="line">request.user.userinfo.user_type == UserInfo.USER_VIP</span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"><span class="keyword">from</span> demo.permissions <span class="keyword">import</span> VipUserPermission, SvipUserPermission</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 任何人都可访问此视图</span></span><br><span class="line">    permission_classes = []</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'demo/index.html'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        username = self.request.POST.get(<span class="string">'username'</span>, <span class="string">''</span>)</span><br><span class="line">        password = self.request.POST.get(<span class="string">'password'</span>, <span class="string">''</span>)</span><br><span class="line"> </span><br><span class="line">        user = User.objects.filter(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user.password == password:</span><br><span class="line">            login(request, user)</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'result'</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'result'</span>: <span class="literal">False</span>&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUserApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 登录用户才可访问此视图</span></span><br><span class="line">    permission_classes = [permissions.IsAuthenticated]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'result'</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VipUserApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="comment"># 交集关系,必须同时成立验证才通过</span></span><br><span class="line">    <span class="comment"># vip用户才可访问</span></span><br><span class="line">    permission_classes = [VipUserPermission, SvipUserPermission]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'result'</span>: <span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">"DEFAULT_PERMISSION_CLASSES"</span>: [<span class="string">'demo.permissions.MyPermission'</span>],  <span class="comment">#</span></span><br><span class="line">表示每一个视图类（只要不重写permission_classes属性），都需要拥有该权限用户才能访问。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>通过权限,可控制用户可访问的视图</li>
<li>可在配置文件中配置总权限,如果视图中没有重写permission_classes,那么就默认使用该权限</li>
<li>如果不需要权限,那么permission_classes就设置为空</li>
<li>如果视图的permission_classes中配置了多个权限,需要同时满足才能访问该视图</li>
</ol>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><h4 id="dispatch函数"><a href="#dispatch函数" class="headerlink" title="dispatch函数"></a>dispatch函数</h4><p>会在dispatch函数中调用initial函数,初始化APIView中的某些属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    `.dispatch()` is pretty much the same as Django's regular dispatch,</span></span><br><span class="line"><span class="string">    but with extra hooks for startup, finalize, and exception handling.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ...</span><br><span class="line">    request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.initial(request, *args, **kwargs)</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure>

<h4 id="initial函数"><a href="#initial函数" class="headerlink" title="initial函数"></a>initial函数</h4><p>在initial函数中,会检查该视图需要的权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ...</span><br><span class="line">    self.check_permissions(request)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>


<h4 id="check-permissions函数"><a href="#check-permissions函数" class="headerlink" title="check_permissions函数"></a>check_permissions函数</h4><p>在check_permissions函数中,会调用get_permissions()函数,得到Permissions对象列表,并调用各个对象下的has_permission()函数,<br>判断用户是否具有某权限,如果有一个不满足,则会调用permission_denied函数,给出错误消息提醒.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_permissions</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Check if the request should be permitted.</span></span><br><span class="line"><span class="string">    Raises an appropriate exception if the request is not permitted.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_permission(request, self):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>

<h4 id="permission-denied函数"><a href="#permission-denied函数" class="headerlink" title="permission_denied函数"></a>permission_denied函数</h4><p>message的意思是,如果在自定义的Permission类中定义了message的值,那么权限不通过时就会返回message的提示,<br>不再会采用默认的了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permission_denied</span><span class="params">(self, request, message=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    If request is not permitted, determine what kind of exception to raise.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.authenticators <span class="keyword">and</span> <span class="keyword">not</span> request.successful_authenticator:</span><br><span class="line">        <span class="keyword">raise</span> exceptions.NotAuthenticated()</span><br><span class="line">    <span class="keyword">raise</span> exceptions.PermissionDenied(detail=message)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PermissionDenied</span><span class="params">(APIException)</span>:</span></span><br><span class="line">    status_code = status.HTTP_403_FORBIDDEN</span><br><span class="line">    default_detail = _(<span class="string">'You do not have permission to perform this</span></span><br><span class="line"><span class="string">action.'</span>)</span><br><span class="line">    default_code = <span class="string">'permission_denied'</span></span><br></pre></td></tr></table></figure>

<h3 id="get-permissions函数"><a href="#get-permissions函数" class="headerlink" title="get_permissions函数"></a>get_permissions函数</h3><p>会遍历视图中重写的permission_classes列表并创建其中的类对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_permissions(self):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Instantiates and returns the list of permissions that this view</span><br><span class="line">requires.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return [permission() for permission in self.permission_classes]</span><br></pre></td></tr></table></figure>

<p>如果视图没有重写该属性,将采用默认值,默认值就是在配置文件中REST_FRAMEWORK下配置的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">permission_classes = api_settings.DEFAULT_PERMISSION_CLASSES</span><br></pre></td></tr></table></figure>

<h4 id="BasePermission类"><a href="#BasePermission类" class="headerlink" title="BasePermission类"></a>BasePermission类</h4><p>若是继承了BasePermission类,但却没重写,两个函数都默认返回True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@six.add_metaclass(BasePermissionMetaclass)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePermission</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A base class from which all permission classes should inherit.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return `True` if permission is granted, `False` otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="check-object-permissions"><a href="#check-object-permissions" class="headerlink" title="check_object_permissions"></a>check_object_permissions</h4><p>检查用户是否具有访问某单个对象的权限,跟check_permission一样.<br>如果重写了get_object函数,那么就需要手动调用,否则无法实现检查单个对象权限的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_object_permissions</span><span class="params">(self, request, obj)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Check if the request should be permitted for a given object.</span></span><br><span class="line"><span class="string">    Raises an appropriate exception if the request is not permitted.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> self.get_permissions():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> permission.has_object_permission(request, self, obj):</span><br><span class="line">            self.permission_denied(</span><br><span class="line">                request, message=getattr(permission, <span class="string">'message'</span>, <span class="literal">None</span>)</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>python属性描述符和属性查找过程</title>
    <url>/2020/05/23/python%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%92%8C%E5%B1%9E%E6%80%A7%E6%9F%A5%E6%89%BE%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="对象的自省机制"><a href="#对象的自省机制" class="headerlink" title="对象的自省机制"></a>对象的自省机制</h3><p>自省是通过一定的机制查询到对象的内部结构。</p>
<h4 id="dir-obj"><a href="#dir-obj" class="headerlink" title="dir(obj)"></a><code>dir(obj)</code></h4><p>dir是python提供的一个api函数，会返回一个列表，该列表中包含该对象（实例对象或者类对象）的所有的属性和方法（包括从父类中获取的）</p>
<a id="more"></a>

<h4 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a><code>__dict__</code></h4><p><strong>dict</strong>字典中存储的是对象或类的部分属性，键为属性名，值为属性值。<br>实例对象的<strong>dict</strong>中只存储跟实例对象相关的属性。<br>类对象的<strong>dict</strong>中存储着能和实例对象共享的属性和方法，类的<strong>dict</strong>中并不包含从父类继承的属性和方法。</p>
<h4 id="dir和-dict-的区别"><a href="#dir和-dict-的区别" class="headerlink" title="dir和__dict__的区别"></a><code>dir</code>和<code>__dict__</code>的区别</h4><ul>
<li>dir是一个函数，返回的数据是一个list，只有属性名和函数名</li>
<li><strong>dict</strong>是一个字典，键为属性名\方法（函数）名，值是属性的值或者具体的方法（函数）</li>
<li>dir用来寻找一个对象的所有的属性和方法，包括从父类中继承的</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    Aname = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	@property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line"><span class="meta">	@age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, _)</span>:</span></span><br><span class="line">        self.__age = _</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">funA</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'---&gt;funcA'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    Bname = <span class="string">'world'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(B, self).__init__()</span><br><span class="line">        self.__sex = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">funcB</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'---&gt;funB'</span>)</span><br><span class="line"></span><br><span class="line">b = B()</span><br></pre></td></tr></table></figure>
<p><code>b.__dict__</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;_A__age&#39;: 20, &#39;_B__sex&#39;: &#39;男&#39;&#125;</span><br></pre></td></tr></table></figure>

<p><code>B.__dict__</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'Bname'</span>: <span class="string">'world'</span>, <span class="string">'__init__'</span>: &lt;function B.__init__ at <span class="number">0x7fd2a753e378</span>&gt;, <span class="string">'funcB'</span>: &lt;function B.funcB at <span class="number">0x7fd2a753e400</span>&gt;, <span class="string">'__doc__'</span>: <span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>dir(b)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'Aname'</span>, <span class="string">'Bname'</span>, <span class="string">'_A__age'</span>, <span class="string">'_B__sex'</span>, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'age'</span>, <span class="string">'funA'</span>, <span class="string">'funcB'</span>]</span><br></pre></td></tr></table></figure>
<p><code>dir(B)</code><br>与<code>dir(b)</code>对比可以看出，实例对象的值在这个列表里面不存在。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">'Aname'</span>, <span class="string">'Bname'</span>, <span class="string">'__class__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'age'</span>, <span class="string">'funA'</span>, <span class="string">'funcB'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="getattr-和-getattribute-魔法方法"><a href="#getattr-和-getattribute-魔法方法" class="headerlink" title="__getattr__和__getattribute__魔法方法"></a><code>__getattr__</code>和<code>__getattribute__</code>魔法方法</h3><p><code>__getattr__</code>是在查找不到属性时调用<br><code>__getattribute__</code>在访问对象时优先调用，不管属性是否存在，所以不建议重写该魔法方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    name = <span class="string">'chen'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattr__'</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattribute__'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> super(A, self).__getattribute__(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = A()</span><br></pre></td></tr></table></figure>

<p>当调用存在的属性时打印：<br><code>a.name</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__getattribute__</span><br><span class="line">chen</span><br></pre></td></tr></table></figure>
<p>当调用不存在的属性时打印：<br><code>a.sss</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__getattribute__</span><br><span class="line">__getattr__</span><br><span class="line">sss</span><br></pre></td></tr></table></figure>
<p>也就是说，不管调用的属性存在不存在，都会调用<code>__getattribute__</code>魔法方法；当调用的属性不存在时，<code>__getattribute__</code>会抛出异常，<code>AttributeError</code>，然后在内部调用<code>__getattr__</code>函数。</p>
<blockquote>
<p>注意:<br>不能在<code>__getattribute__</code>方法中使用<code>self.xx</code>或者<code>self.__dict__[xxx]</code>或者<code>hasattr(self, xxx)</code>等操作，会陷入无限递归之中</p>
</blockquote>
<h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><p><code>__get__</code><br><code>__set__</code><br><code>__delete__</code><br>实现上面三个魔法函数之一就可称之为属性描述符，如果只实现了<code>__get__</code>则称为非数据属性描述符(no-data descriptor)，只有同时实现了<code>__get__</code>和<code>__set__</code>才称之为数据属性描述符(data descriptor)。</p>
<p>以下例子就是实现了一个int类型的数据属性描述符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, numbers.Integral):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'必须是int类型数据'</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'__set__'</span>)</span><br><span class="line">        self.__value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'__get__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'__delete__'</span>)</span><br><span class="line">        <span class="keyword">del</span> self.__value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    age = Integer()</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = Test()</span><br><span class="line">t.age = <span class="number">100</span></span><br><span class="line">print(t.age)</span><br><span class="line"><span class="keyword">del</span> t.age</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__set__</span><br><span class="line">__get__</span><br><span class="line"><span class="number">100</span></span><br><span class="line">__delete__</span><br></pre></td></tr></table></figure>

<h3 id="属性查找过程"><a href="#属性查找过程" class="headerlink" title="属性查找过程"></a>属性查找过程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, numbers.Integral):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'必须是int类型数据'</span>)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'__set__'</span>)</span><br><span class="line">        self.__value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'__get__'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'__delete__'</span>)</span><br><span class="line">        <span class="keyword">del</span> self.__value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    age = Integer()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.score = Integer()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattr__'</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattribute__'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> super(Test, self).__getattribute__(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = Test()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果attr是数据属性描述符，并且是类对象属性，即代码中<code>age</code>属性，那么调用时，执行顺序: <code>__getattribute__</code> –&gt; <code>__get__</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.age = <span class="number">100</span></span><br><span class="line">print(t.age)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__set__</span><br><span class="line">__getattribute__</span><br><span class="line">__get__</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果attr是数据属性描述符，但为对象实例的属性时，即<code>score</code>属性，执行顺序为就是调用<code>__getattribute__</code>取数据，即直接调用<code>self.__dict__</code>中取数据了，跟是否时数据属性描述符无关。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.score = <span class="number">99</span></span><br><span class="line">print(t.score)</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__getattribute__</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果attr存在，则执行顺序是<code>__geattribute__</code> –&gt; <code>t.__dict__</code> –&gt; <code>Test.__dict__</code></p>
</li>
<li><p>如果attr不存在，则查找顺序是<code>__getattribute__</code> –&gt; <code>t.__dict__</code> –&gt; <code>Test.__dict__</code> –&gt; <code>__getattr__</code></p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">https://www.cnblogs.com/xyz2b/p/<span class="number">10529068.</span>html</span><br><span class="line">https://www.cnblogs.com/xybaby/p/<span class="number">6270551.</span>html</span><br><span class="line">https://www.jianshu.com/p/<span class="number">885</span>d59db57fc</span><br><span class="line">https://blog.csdn.net/qq_26442553/article/details/<span class="number">82467777</span></span><br><span class="line">https://www.cnblogs.com/cccy0/archive/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">20</span>/<span class="number">9063679.</span>html</span><br><span class="line">https://www.cnblogs.com/Vito2008/p/<span class="number">5280216.</span>html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>求两个单链表的交叉节点</title>
    <url>/2020/05/23/%E6%B1%82%E4%B8%A4%E4%B8%AA%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BA%A4%E5%8F%89%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p>思路:<br>如果两个单链表有交叉节点,那么他们的尾节点一定是相同的,所以可以计算出链表的长度,然后判断长短,将长度较长的链表的头节点移动(长-短)个节点,然后遍历之后的节点.</p>
<a id="more"></a>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_communal_node</span><span class="params">(head1, head2)</span>:</span></span><br><span class="line">    <span class="comment"># 获取交叉节点</span></span><br><span class="line">    length1= get_length(head1)</span><br><span class="line">    lenght2 = get_length(head2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果链表1的长度大于链表2</span></span><br><span class="line">    <span class="comment"># 那么就将链表1的头节点移动length1-length2个位置</span></span><br><span class="line">    <span class="keyword">if</span> length1 &gt; lenght2:</span><br><span class="line">        <span class="keyword">while</span> lenght2 &lt; length1:</span><br><span class="line">            head1 = head1.next</span><br><span class="line">            lenght2 += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 同上</span></span><br><span class="line">    <span class="keyword">elif</span> lenght2 &gt; length1:</span><br><span class="line">        <span class="keyword">while</span> length1 &lt; lenght2:</span><br><span class="line">            head2 = head2.next</span><br><span class="line">            length1 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从同一起点位置开始移动</span></span><br><span class="line">    <span class="keyword">while</span> (head1 <span class="keyword">and</span> head2):</span><br><span class="line">        <span class="comment"># 如果值相等(实际上应该判断是否是同一个节点),就说明这个是交叉的节点</span></span><br><span class="line">        <span class="keyword">if</span> head1.val == head2.val:</span><br><span class="line">            <span class="keyword">return</span> head1</span><br><span class="line"></span><br><span class="line">        head1 = head1.next</span><br><span class="line">        head2 = head2.next</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_length</span><span class="params">(head)</span>:</span></span><br><span class="line">    <span class="comment"># 获取链表长度</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    <span class="comment"># head = copy.deepcopy(_head)</span></span><br><span class="line">    <span class="keyword">while</span> head:</span><br><span class="line">        length += <span class="number">1</span></span><br><span class="line">        head = head.next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_head</span><span class="params">(links)</span>:</span></span><br><span class="line">    <span class="comment"># 构建链表,返回头节点</span></span><br><span class="line">    head = <span class="literal">None</span></span><br><span class="line">    cur = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> links:</span><br><span class="line">        node = Node(val)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            head = node</span><br><span class="line">            cur = head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cur.next = node</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    head1 = get_head([<span class="string">'java'</span>, <span class="string">'world'</span>, <span class="string">'node'</span>, <span class="string">'B+'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</span><br><span class="line">    head2 = get_head([<span class="string">'ab'</span>, <span class="string">'bc'</span>, <span class="string">'ef'</span>, <span class="string">'hello'</span>, <span class="string">'python'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</span><br><span class="line"></span><br><span class="line">    node = get_communal_node(head1, head2)</span><br><span class="line">    print(node)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>django-rest-framework --- 分页</title>
    <url>/2020/05/23/django-rest-framework-%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>drf框架的分页主要有三种：</p>
<ol>
<li>普通分页，看第n页，每页显示m条数据</li>
<li>切割分页，在第n个位置，向后查看m条数据</li>
<li>加密分页，与普通分页一样，不过对url中的请求页码进行加密</li>
</ol>
<a id="more"></a>

<h3 id="普通分页"><a href="#普通分页" class="headerlink" title="普通分页"></a>普通分页</h3><h4 id="自定义分页类"><a href="#自定义分页类" class="headerlink" title="自定义分页类"></a>自定义分页类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> pagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentPagination</span><span class="params">(pagination.PageNumberPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 默认值 ，每一页的数量，如果没有size参数的话</span></span><br><span class="line">    page_size = <span class="number">8</span></span><br><span class="line">    <span class="comment"># 最大数量，即使 带上了size参数，也无法超过这个值</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br><span class="line">    <span class="comment"># 通过GET请求获取每一页需要的数量，/?size=x的size参数</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span></span><br><span class="line">    <span class="comment"># url中要查找的page参数，即/?page=x中的page参数</span></span><br><span class="line">    page_query_param = <span class="string">'page'</span></span><br></pre></td></tr></table></figure>

<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Student.objects.all().order_by(<span class="string">'-id'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 实例化我们定义的分页类</span></span><br><span class="line">        pagination = StudentPagination()</span><br><span class="line">        <span class="comment"># 对实例化类进行传参控制</span></span><br><span class="line">        students = pagination.paginate_queryset(self.get_queryset(), request=request, view=self)</span><br><span class="line">        <span class="comment"># 将分页后的对象作序列化</span></span><br><span class="line">        serializer = StudentSerializer(students, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pagination.get_paginated_response(serializer.data)</span><br></pre></td></tr></table></figure>

<h4 id="url"><a href="#url" class="headerlink" title="url"></a>url</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.StudentView.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>在请求时，可以使用<code>http://127.0.0.1:8000/students/?page=10&amp;size=3</code>，那么在使用时，会自动从链接中提取page和size的值了。此处的意思是，请求第10页的3个数据。</p>
<h3 id="切割分页"><a href="#切割分页" class="headerlink" title="切割分页"></a>切割分页</h3><h4 id="自定义分页类-1"><a href="#自定义分页类-1" class="headerlink" title="自定义分页类"></a>自定义分页类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentLimitOffsetPagination</span><span class="params">(pagination.LimitOffsetPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 默认每一页显示多少条数据</span></span><br><span class="line">    default_limit = <span class="number">8</span></span><br><span class="line">    <span class="comment"># url中设置显示数据数量的参数</span></span><br><span class="line">    limit_query_param = <span class="string">'limit'</span></span><br><span class="line">    <span class="comment"># 从数据库中的第几条开始查询，查询limit条</span></span><br><span class="line">    offset_query_param = <span class="string">'offset'</span></span><br><span class="line">    <span class="comment"># 每一次请求，返回最大数量</span></span><br><span class="line">    max_limit = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>其他的写法跟普通分页无异。</p>
<h3 id="加密分页"><a href="#加密分页" class="headerlink" title="加密分页"></a>加密分页</h3><h4 id="自定义分页类-2"><a href="#自定义分页类-2" class="headerlink" title="自定义分页类"></a>自定义分页类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentCursorPagination</span><span class="params">(pagination.CursorPagination)</span>:</span></span><br><span class="line">    <span class="comment"># 查询参数</span></span><br><span class="line">    cursor_query_param = <span class="string">'cursor'</span></span><br><span class="line">    <span class="comment"># 排序方式</span></span><br><span class="line">    ordering = <span class="string">'-id'</span></span><br><span class="line">    <span class="comment"># 每页查询数量</span></span><br><span class="line">    page_size_query_param = <span class="string">'size'</span></span><br><span class="line">    <span class="comment"># 每页大小</span></span><br><span class="line">    page_size = <span class="number">8</span></span><br><span class="line">    <span class="comment"># 最大限制</span></span><br><span class="line">    max_page_size = <span class="number">10</span></span><br></pre></td></tr></table></figure>



<p>但返回数据却有不同，无法通过修改url来得到指定某页的数据，只能通过返回数据中的previous和next来得到上一页或者下一页的数据。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"next"</span>: <span class="string">"http://127.0.0.1:8000/students/?cursor=cD04NQ%3D%3D"</span>,</span><br><span class="line">    <span class="attr">"previous"</span>: <span class="string">"http://127.0.0.1:8000/students/?cursor=cj0xJnA9OTI%3D"</span>,</span><br><span class="line">    <span class="attr">"results"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="number">92</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"test91"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">101</span>,</span><br><span class="line">            <span class="attr">"sex"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"height"</span>: <span class="number">0.349139736956964</span>,</span><br><span class="line">            <span class="attr">"weight"</span>: <span class="number">105.24197499223212</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>django-rest-framework --- JWTAuthentication</title>
    <url>/2020/05/23/django-rest-framework-JWTAuthentication/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>  JWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名。它具备两个特点：</p>
<ul>
<li>简洁(Compact)<br>可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</li>
</ul>
<ul>
<li>自包含(Self-contained)<br>负载中包含了所有用户所需要的信息，避免了多次查询数据库</li>
</ul>
<a id="more"></a>

<h4 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a>JWT 组成</h4><ul>
<li><p>Header 头部<br>头部包含了两部分，token 类型和采用的加密算法,它会使用 Base64 编码组成 JWT 结构的第一部分.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Payload 负载<br>这部分就是我们存放信息的地方了，你可以把用户 ID 等信息放在这里，JWT 规范里面对这部分有进行了比较详细的介绍，常用的由 iss（签发者），exp（过期时间），sub（面向的用户），aud（接收方），iat（签发时间）。<br>同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"iss"</span>: <span class="string">"lion1ou JWT"</span>,</span><br><span class="line">    <span class="string">"iat"</span>: <span class="number">1441593502</span>,</span><br><span class="line">    <span class="string">"exp"</span>: <span class="number">1441594722</span>,</span><br><span class="line">    <span class="string">"aud"</span>: <span class="string">"qxinhai.cn"</span>,</span><br><span class="line">    <span class="string">"sub"</span>: <span class="string">"qxinhai@yeah.net"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Signature 签名<br>前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过。<br>三个部分通过.连接在一起就是我们的 JWT 了，它可能长这个样子，长度貌似和你的加密算法和私钥有关系。<br><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU3ZmVmMTY0ZTU0YWY2NGZmYzUzZGJkNSIsInhzcmYiOiI0ZWE1YzUwOGE2NTY2ZTc2MjQwNTQzZjhmZWIwNmZkNDU3Nzc3YmUzOTU0OWM0MDE2NDM2YWZkYTY1ZDIzMzBlIiwiaWF0IjoxNDc2NDI3OTMzfQ.PA3QjeyZSUh7H0GfE0vJaKW4LjKJuC3dVLQiY4hii8s</code><br>其实到这一步可能就有人会想了，HTTP 请求总会带上 token，这样这个 token 传来传去占用不必要的带宽啊。如果你这么想了，那你可以去了解下 HTTP2，HTTP2 对头部进行了压缩，相信也解决了这个问题。</p>
</li>
<li><p>签名的目的<br>最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</p>
</li>
<li><p>信息暴露<br>在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？<br>是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。<br>因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。</p>
</li>
</ul>
<h4 id="JWT-使用"><a href="#JWT-使用" class="headerlink" title="JWT 使用"></a>JWT 使用</h4><ol>
<li>首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。</li>
<li>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT。形成的JWT就是一个形同lll.zzz.xxx的字符串。</li>
<li>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。</li>
<li>前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题)</li>
<li>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。</li>
<li>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>｀pip install djangorestframework-jwt｀</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在settings.py中添加以下app</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'rest_framework'</span>,</span><br><span class="line"><span class="string">'rest_framework_jwt'</span>,</span><br></pre></td></tr></table></figure>

<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户数据添加进载荷</span></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    登录功能</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        username = request.data.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.data.get(<span class="string">'password'</span>)</span><br><span class="line">        user = User.objects.filter(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">and</span> user.check_password(password):</span><br><span class="line">            payload = jwt_payload_handler(user)</span><br><span class="line">            token = jwt_encode_handler(payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'token'</span>: token&#125;, status=status.HTTP_200_OK)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'message'</span>: <span class="string">'登录失败'</span>&#125;, status=status.HTTP_401_UNAUTHORIZED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        data = [</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'java'</span>, <span class="string">'price'</span>: <span class="number">57</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'python'</span>, <span class="string">'price'</span>: <span class="number">93</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'books'</span>: data&#125;)</span><br></pre></td></tr></table></figure>

<p>如果用户登录成功，将返回token值。<br>主要靠以下两个函数来生成token值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将用户数据添加进载荷</span></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line">payload = jwt_payload_handler(user)</span><br><span class="line">token = jwt_encode_handler(payload)</span><br></pre></td></tr></table></figure>
<p>下次访问时，需要使用token值来验证身份。<br>不管是前端访问，还是requests访问，都要严格按照以下格式要求:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Authorization'</span>: <span class="string">'JWT '</span> + token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JWT和token之间有空格。</p>
<p>从源码看，继承顺序是这样的:<br><code>JSONWebTokenAuthentication -&gt; BaseJSONWebTokenAuthentication -&gt; BaseAuthentication</code>，最终也是继承自<code>BaseAuthentication</code>，也同样有个跟<code>TokenAuthentication</code>和<code>BasicAuthentication</code>的问题，那就是没有对<code>如果不传入Authorization数据</code>这种情况抛异常处理。详细讲就是，一个视图类使用了<code>JSONWebTokenAuthentication</code>认证，如果你不传入<code>Authorization</code>数据，它不会抛异常，但如果你传入了这个数据，数据却错了，就会抛异常。<br>看了认证相关的源码，都是在<code>authenticate()</code>函数中返回了<code>None</code>之后，就没有做任何判断了。不太清楚官方的正确做法应该是什么，但在解决<code>不传入Authorization数据却能正常访问</code>问题时，会使用以下两种方式。</p>
<ol>
<li><p>重写dispath和handle_exception函数<br>在调用get或者post函数之前，都会先调用dispatch函数，在此时判断用户是否验证成功.<br>验证成功时,<code>request.user</code>会返回登录的User对象，否则是<code>AnonymousUser</code>, <code>request.auth</code>也会打返回token值。在此时可以通过这两个数据，判断是否需要继续执行接下来实际的视图函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    并不一定要继承APIView，可以按照需求继承</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        重写dispatch函数，在post和get之前调用</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        response = super(BasicApiView, self).dispatch(request, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 登录的用户</span></span><br><span class="line">        <span class="comment"># request.user</span></span><br><span class="line">        <span class="comment"># token值</span></span><br><span class="line">        <span class="comment"># request.auth</span></span><br><span class="line">        <span class="comment"># 如果用户认证失败</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.user <span class="keyword">or</span> isinstance(request.user, AnonymousUser):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 抛出异常</span></span><br><span class="line">                <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'认证失败'</span>)</span><br><span class="line">            <span class="keyword">except</span> exceptions.AuthenticationFailed <span class="keyword">as</span> exc:</span><br><span class="line">                <span class="comment"># 捕获处理后的异常</span></span><br><span class="line">                response = self.handle_exception(exc)</span><br><span class="line">                <span class="comment"># 一定要加上这一行，否则报错</span></span><br><span class="line">                response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_exception</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        异常处理</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 如果是验证失败的异常，返回401</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(exc, (exceptions.AuthenticationFailed, exceptions.NotAuthenticated)):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">'message'</span>: str(exc)&#125;, status=status.HTTP_401_UNAUTHORIZED)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 其他的错误统一归为内部错误，如果有需要单独处理，放在之前用if判断处理</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'message'</span>: str(exc)&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BooksView</span><span class="params">(BasicApiView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取测试数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        data = [</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'java'</span>, <span class="string">'price'</span>: <span class="number">57</span>&#125;,</span><br><span class="line">            &#123;<span class="string">'name'</span>: <span class="string">'python'</span>, <span class="string">'price'</span>: <span class="number">93</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'books'</span>: data&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>继承认证类，重写authenticate()函数</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JWTAuthentication</span><span class="params">(JSONWebTokenAuthentication)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取返回值(user, token)</span></span><br><span class="line">        user_auth_tuple = super().authenticate(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果返回值为空，则说明验证失败</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_auth_tuple <span class="keyword">or</span> <span class="keyword">not</span> user_auth_tuple[<span class="number">0</span>] <span class="keyword">or</span> <span class="keyword">not</span> user_auth_tuple[<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'帐号或密码错误'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 否则继续往下执行</span></span><br><span class="line">        <span class="keyword">return</span> user_auth_tuple</span><br></pre></td></tr></table></figure>
<p>然后在视图类中配置即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">authentication_classes = [JWTAuthentication, ]</span><br></pre></td></tr></table></figure>

<p>以上是最基本的用法，如果有定制要求，也不会差的太远。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="JSONWebTokenAuthentication"><a href="#JSONWebTokenAuthentication" class="headerlink" title="JSONWebTokenAuthentication"></a>JSONWebTokenAuthentication</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_jwt_value</span><span class="params">(self, request)</span>:</span></span><br><span class="line">  	<span class="comment"># 获取请求头中Authoriztion数据</span></span><br><span class="line">      auth = get_authorization_header(request).split()</span><br><span class="line">      <span class="comment"># 获取标志位，如果没有自定义，就是 JWT</span></span><br><span class="line">      auth_header_prefix = api_settings.JWT_AUTH_HEADER_PREFIX.lower()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> auth:</span><br><span class="line">          <span class="keyword">if</span> api_settings.JWT_AUTH_COOKIE:</span><br><span class="line">              <span class="keyword">return</span> request.COOKIES.get(api_settings.JWT_AUTH_COOKIE)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> smart_text(auth[<span class="number">0</span>].lower()) != auth_header_prefix:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> len(auth) == <span class="number">1</span>:</span><br><span class="line">          msg = _(<span class="string">'Invalid Authorization header. No credentials provided.'</span>)</span><br><span class="line">          <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">      <span class="keyword">elif</span> len(auth) &gt; <span class="number">2</span>:</span><br><span class="line">          msg = _(<span class="string">'Invalid Authorization header. Credentials string '</span></span><br><span class="line">                  <span class="string">'should not contain spaces.'</span>)</span><br><span class="line">          <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 返回token数据</span></span><br><span class="line">      <span class="keyword">return</span> auth[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="comment"># token数据</span></span><br><span class="line">       jwt_value = self.get_jwt_value(request)</span><br><span class="line">       <span class="keyword">if</span> jwt_value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">       	<span class="comment"># 解析token值</span></span><br><span class="line">       	<span class="comment"># jwt_decode_handler = api_settings.JWT_DECODE_HANDLER</span></span><br><span class="line">       	<span class="comment"># 具体代码见源码分析</span></span><br><span class="line">           payload = jwt_decode_handler(jwt_value)</span><br><span class="line">       <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">           msg = _(<span class="string">'Signature has expired.'</span>)</span><br><span class="line">           <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">       <span class="keyword">except</span> jwt.DecodeError:</span><br><span class="line">           msg = _(<span class="string">'Error decoding signature.'</span>)</span><br><span class="line">           <span class="keyword">raise</span> exceptions.AuthenticationFailed(msg)</span><br><span class="line">       <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">           <span class="keyword">raise</span> exceptions.AuthenticationFailed()</span><br><span class="line"></span><br><span class="line">       user = self.authenticate_credentials(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证成功后，返回登录的User对象和token数据</span></span><br><span class="line">       <span class="keyword">return</span> (user, jwt_value)</span><br></pre></td></tr></table></figure>

<h4 id="rest-framework-jwt-settings"><a href="#rest-framework-jwt-settings" class="headerlink" title="rest_framework_jwt.settings"></a>rest_framework_jwt.settings</h4><p>路径:<code>rest_framework_jwt.settings.py</code></p>
<p>我们一般都可以用CTRL + 左键查看函数\属性的具体信息，但我在下面使用下面两行代码时却发现无法点击，所以好奇就看了下相关的代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将用户数据添加进载荷</span></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br></pre></td></tr></table></figure>

<p>api_settings是APISettings的对象实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">api_settings = APISettings(USER_SETTINGS, DEFAULTS, IMPORT_STRINGS)</span><br></pre></td></tr></table></figure>

<p>settings实际上就是django运行时使用的配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br></pre></td></tr></table></figure>

<p>用户可以在配置文件中配置JWT_AUTH数据，所以在创建apt_settings对象时就从配置文件中将所有的用户自定义的数据读取出来，存放到USER_SETTINGS中，并传入ApiSettings中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">USER_SETTINGS = getattr(settings, <span class="string">'JWT_AUTH'</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>DEFAULTS中的数据是最齐全的，用户能自定义的数据都在该字典中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEFAULTS = &#123;</span><br><span class="line">    <span class="string">'JWT_ENCODE_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_encode_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_DECODE_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_decode_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PAYLOAD_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_payload_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USER_ID_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PRIVATE_KEY'</span>:</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PUBLIC_KEY'</span>:</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USERNAME_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_get_username_from_payload_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span>:</span><br><span class="line">    <span class="string">'rest_framework_jwt.utils.jwt_response_payload_handler'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_SECRET_KEY'</span>: settings.SECRET_KEY,</span><br><span class="line">    <span class="string">'JWT_GET_USER_SECRET_KEY'</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">'JWT_ALGORITHM'</span>: <span class="string">'HS256'</span>,</span><br><span class="line">    <span class="string">'JWT_VERIFY'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'JWT_VERIFY_EXPIRATION'</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">'JWT_LEEWAY'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(seconds=<span class="number">300</span>),</span><br><span class="line">    <span class="string">'JWT_AUDIENCE'</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">'JWT_ISSUER'</span>: <span class="literal">None</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_ALLOW_REFRESH'</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">'JWT_REFRESH_EXPIRATION_DELTA'</span>: datetime.timedelta(days=<span class="number">7</span>),</span><br><span class="line"></span><br><span class="line">    <span class="string">'JWT_AUTH_HEADER_PREFIX'</span>: <span class="string">'JWT'</span>,</span><br><span class="line">    <span class="string">'JWT_AUTH_COOKIE'</span>: <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户可导入（调用）的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IMPORT_STRINGS = (</span><br><span class="line">    <span class="string">'JWT_ENCODE_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_DECODE_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_PAYLOAD_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USER_ID_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_PAYLOAD_GET_USERNAME_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span>,</span><br><span class="line">    <span class="string">'JWT_GET_USER_SECRET_KEY'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="APISettings"><a href="#APISettings" class="headerlink" title="APISettings"></a>APISettings</h4><p>APISettings的路径：<code>rest-framework.settings</code><br><code>__getattr__</code>魔法方法的作用是，对象实例在调用方法或者属性时都将调用<code>__getattr__</code>。那么此处的作用，就相当于如果你想要调用<code>rest_framework_jwt.utils.jwt_payload_handler</code>函数，你就只需要使用<code>api_settings.JWT_PAYLOAD_HANDLER</code>即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    <span class="comment"># defautls配置文件数据是最齐全的，如果defaults没有，就说明对象调用错了。</span></span><br><span class="line">    <span class="comment"># attr是属性名，或者方法名</span></span><br><span class="line">    <span class="keyword">if</span> attr <span class="keyword">not</span> <span class="keyword">in</span> self.defaults:</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(<span class="string">"Invalid API setting: '%s'"</span> % attr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 判断用户是否自定义了attr属性</span></span><br><span class="line">        val = self.user_settings[attr]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="comment"># 如果用户没有自定义，那么就从配置文件中读取</span></span><br><span class="line">        val = self.defaults[attr]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果attr在import_strings中，就说明其实是一个函数</span></span><br><span class="line">    <span class="comment"># 现在存入的是一个有具体路径的字符串，需要将其转换成可调用的函数</span></span><br><span class="line">    <span class="keyword">if</span> attr <span class="keyword">in</span> self.import_strings:</span><br><span class="line">        val = perform_import(val, attr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加入缓存</span></span><br><span class="line">    <span class="comment"># 再次调用attr时，不会再触发__getattr__魔法方法</span></span><br><span class="line">    self._cached_attrs.add(attr)</span><br><span class="line">    <span class="comment"># 这行代码，类似于这种效果</span></span><br><span class="line">    <span class="comment"># a = A() setattr(a, 'a', 10)</span></span><br><span class="line">    <span class="comment"># 打印 a.a 将返回10</span></span><br><span class="line">    setattr(self, attr, val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure>

<p><code>rest_framework.settings</code>下也有个api_settings,<br><code>api_settings = APISettings(None, DEFAULTS, IMPORT_STRINGS)</code>，与<code>rest_framework_jwt.settings</code>下的api_settings不是同一个，不要混用了。</p>
<h4 id="jwt-payload-handler"><a href="#jwt-payload-handler" class="headerlink" title="jwt_payload_handler"></a>jwt_payload_handler</h4><p>路径：<code>rest_framework_jwt.utils.jwt_payload_handler</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_payload_handler</span><span class="params">(user)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 将用户id，用户名，token的有效时间，邮箱都写入载荷中</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">'user_id'</span>: user.pk,</span><br><span class="line">        <span class="string">'username'</span>: username,</span><br><span class="line">        <span class="string">'exp'</span>: datetime.utcnow() + api_settings.JWT_EXPIRATION_DELTA</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> hasattr(user, <span class="string">'email'</span>):</span><br><span class="line">        payload[<span class="string">'email'</span>] = user.email</span><br><span class="line">    <span class="keyword">if</span> isinstance(user.pk, uuid.UUID):</span><br><span class="line">        payload[<span class="string">'user_id'</span>] = str(user.pk)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h4 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_encode_handler</span><span class="params">(payload)</span>:</span></span><br><span class="line">    key = api_settings.JWT_PRIVATE_KEY <span class="keyword">or</span> jwt_get_secret_key(payload)</span><br><span class="line">    <span class="keyword">return</span> jwt.encode(</span><br><span class="line">        payload,</span><br><span class="line">        key,</span><br><span class="line">        api_settings.JWT_ALGORITHM</span><br><span class="line">    ).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jwt_decode_handler</span><span class="params">(token)</span>:</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        <span class="string">'verify_exp'</span>: api_settings.JWT_VERIFY_EXPIRATION,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># get user from token, BEFORE verification, to get user secret key</span></span><br><span class="line">    unverified_payload = jwt.decode(token, <span class="literal">None</span>, <span class="literal">False</span>)</span><br><span class="line">    secret_key = jwt_get_secret_key(unverified_payload)</span><br><span class="line">    <span class="keyword">return</span> jwt.decode(</span><br><span class="line">        token,</span><br><span class="line">        api_settings.JWT_PUBLIC_KEY <span class="keyword">or</span> secret_key,</span><br><span class="line">        api_settings.JWT_VERIFY,</span><br><span class="line">        options=options,</span><br><span class="line">        leeway=api_settings.JWT_LEEWAY,</span><br><span class="line">        audience=api_settings.JWT_AUDIENCE,</span><br><span class="line">        issuer=api_settings.JWT_ISSUER,</span><br><span class="line">        algorithms=[api_settings.JWT_ALGORITHM]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<h4 id="用户自定义数据"><a href="#用户自定义数据" class="headerlink" title="用户自定义数据"></a>用户自定义数据</h4><p>以下是常用的几个，如果需要更多的，查看官方文档。</p>
<h5 id="JWT-SECRET-KEY"><a href="#JWT-SECRET-KEY" class="headerlink" title="JWT_SECRET_KEY"></a>JWT_SECRET_KEY</h5><p>用来给token加密的，默认是<code>settings.SECRET_KEY</code></p>
<h5 id="JWT-ALGORITHM"><a href="#JWT-ALGORITHM" class="headerlink" title="JWT_ALGORITHM"></a>JWT_ALGORITHM</h5><p>加密算法，默认是HS256</p>
<h5 id="JWT-VERIFY"><a href="#JWT-VERIFY" class="headerlink" title="JWT_VERIFY"></a>JWT_VERIFY</h5><p>解密失败时将抛出一个DecodeError错误，默认是True，改为False时，仍可以获取载荷</p>
<h5 id="JWT-VERIFY-EXPIRATION"><a href="#JWT-VERIFY-EXPIRATION" class="headerlink" title="JWT_VERIFY_EXPIRATION"></a>JWT_VERIFY_EXPIRATION</h5><p>是否设置有效时间，默认是True</p>
<h5 id="JWT-LEEWAY"><a href="#JWT-LEEWAY" class="headerlink" title="JWT_LEEWAY"></a>JWT_LEEWAY</h5><p>token过期时间的缓冲期，默认为0.就是说，如果设置了一个token的过期时间是10分钟，但如果你设置了这个值为1分钟，那么在10～11分钟内，该token仍有效。</p>
<h5 id="JWT-EXPIRATION-DELTA"><a href="#JWT-EXPIRATION-DELTA" class="headerlink" title="JWT_EXPIRATION_DELTA"></a>JWT_EXPIRATION_DELTA</h5><p>token的有效时间，默认是5分钟。<code>datetime.timedelta</code>数据类型。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;getblimp.github.io&#x2F;django-rest-framework-jwt&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.django-rest-framework.org&#x2F;api-guide&#x2F;settings&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;180a870a308a</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;chengqiang20152015&#x2F;article&#x2F;details&#x2F;81146545</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>django-rest-framework --- 认证</title>
    <url>/2020/05/23/django-rest-framework-%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    USER_TYPE = (</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'普通用户'</span>),</span><br><span class="line">        (<span class="number">2</span>, <span class="string">'VIP'</span>),</span><br><span class="line">        (<span class="number">3</span>, <span class="string">'SVIP'</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    user_type = models.IntegerField(choices=USER_TYPE, default=USER_TYPE[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">    username = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserToken</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user = models.OneToOneField(UserInfo, on_delete=models.CASCADE)</span><br><span class="line">    token = models.CharField(max_length=<span class="number">256</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="自定义认证对象"><a href="#自定义认证对象" class="headerlink" title="自定义认证对象"></a>自定义认证对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerAuthentication</span><span class="params">(authentication.BaseAuthentication)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取url中的token值</span></span><br><span class="line">        token = request._request.GET.get(<span class="string">'token'</span>)</span><br><span class="line">        <span class="comment"># 判断对应用户是否存在</span></span><br><span class="line">        user_token = UserToken.objects.filter(token=token).first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_token:</span><br><span class="line">            <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'用户认证失败'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 必须返回一个包含两个元素的 tuple</span></span><br><span class="line">        <span class="keyword">return</span> (user_token.user, user_token)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate_header</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> students.models <span class="keyword">import</span> UserInfo, UserToken</span><br><span class="line"><span class="keyword">from</span> students.authenticates <span class="keyword">import</span> CustomerAuthentication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(user)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">    ctime = str(time.time())</span><br><span class="line"></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(ctime.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    m.update(user.username.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        ret = &#123;<span class="string">'code'</span>: <span class="number">200</span>, <span class="string">'msg'</span>: <span class="string">'success'</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">            password = request.POST.get(<span class="string">'password'</span>)</span><br><span class="line">            user = UserInfo.objects.filter(username=username).first()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">                UserInfo.objects.create(username=username, password=password)</span><br><span class="line">                ret[<span class="string">'code'</span>] = <span class="number">201</span></span><br><span class="line">                ret[<span class="string">'msg'</span>] = <span class="string">'创建成功'</span></span><br><span class="line"></span><br><span class="line">            token = md5(user)</span><br><span class="line">            UserToken.objects.update_or_create(user=user, defaults=&#123;<span class="string">'token'</span>: token&#125;)</span><br><span class="line">            ret[<span class="string">'token'</span>] = token</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">import</span> traceback</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            ret[<span class="string">'code'</span>] = <span class="number">1002</span></span><br><span class="line">            ret[<span class="string">'msg'</span>] = <span class="string">'请求异常'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    authentication_classes = [CustomerAuthentication, ]</span><br><span class="line"></span><br><span class="line">    ORDER_DATA = &#123;</span><br><span class="line">        <span class="number">1</span>: &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'apple'</span>,</span><br><span class="line">            <span class="string">'number'</span>: <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="number">2</span>: &#123;</span><br><span class="line">            <span class="string">'name'</span>: <span class="string">'banana'</span>,</span><br><span class="line">            <span class="string">'number'</span>: <span class="number">30</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(OrderApiView.ORDER_DATA)</span><br></pre></td></tr></table></figure>







<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当用户登录时，生成token并保存到数据表中，每次请求时都带上 token;</p>
<p>在视图类中重写authentication_classes属性，将自定义认证对象以列表形式赋值给他，当调用该视图时会自动验证；</p>
<p>如果想让所有的drf视图都使用同一个认证类，那么可以在settings.py中配置,</p>
<p><code>&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;:[&#39;students.authenticates.CustomerAuthentication&#39;]</code>;</p>
<p>若不想使用settings.py中的认证，在视图类中重写authentication_classes属性即可。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表的分离链接法代码实现</title>
    <url>/2020/05/23/%E6%95%A3%E5%88%97%E8%A1%A8%E7%9A%84%E5%88%86%E7%A6%BB%E9%93%BE%E6%8E%A5%E6%B3%95%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>理论性的东西去这篇博客看吧,自己写的肯定没这篇好.<br><a href="https://www.cnblogs.com/linxiyue/p/3795396.html" target="_blank" rel="noopener">Python数据结构——散列表</a></p>
<p>在上篇博客中,觉得分离散列法是很有意思的一种写法,所以花点时间将其实现了,虽然看着也很简单.<br>主要思路如图,就是在列表中存储着单链表的头节点.<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/85.jpg" alt=""></p>
<br/>
很无奈，格式一直调不对，"""文档注释"""总是出现对不齐的情况

<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-5-22 22:33</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.val)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, init_length=<span class="number">15</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 长度</span></span><br><span class="line">        self.__table = [<span class="literal">None</span>] * init_length</span><br><span class="line">        <span class="comment"># 当前表中数据个数</span></span><br><span class="line">        self.__count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="comment"># 插入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 索引</span></span><br><span class="line">        index = self.hash_index(val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__table[index]:</span><br><span class="line">            self.__table[index] = Node(val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head = self.__table[index]</span><br><span class="line">            <span class="keyword">while</span> head.next:</span><br><span class="line">                head = head.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 添加到链表尾部</span></span><br><span class="line">            head.next = Node(val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 长度+1</span></span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算是否达到限制容量</span></span><br><span class="line">        <span class="keyword">if</span> self.need_rehash():</span><br><span class="line">            self.rehash()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="comment"># 删除值</span></span><br><span class="line"></span><br><span class="line">        index = self.hash_index(val)</span><br><span class="line">        <span class="comment"># 得到头结点</span></span><br><span class="line">        node = self.__table[index]</span><br><span class="line">        <span class="comment"># 保存前一个节点</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.val == val:</span><br><span class="line">                <span class="comment"># 如果pre为空,即val是头结点的值</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                    <span class="comment"># 要删除的是头结点,那么将头结点的下一个节点放到表中</span></span><br><span class="line">                    self.__table[index] = node.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.next = node.next</span><br><span class="line">                self.count -= <span class="number">1</span></span><br><span class="line">                <span class="comment"># 删除</span></span><br><span class="line">                <span class="keyword">del</span> node</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            pre = node</span><br><span class="line">            node = node.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="comment"># 搜索</span></span><br><span class="line">        <span class="comment"># :param val: 需要搜索的值</span></span><br><span class="line">        <span class="comment"># :return: 如果没有找到,返回None,找到了就返回节点</span></span><br><span class="line"></span><br><span class="line">        index = self.hash_index(val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 得到头结点</span></span><br><span class="line">        node = self.__table[index]</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.val == val:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            node = node.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 遍历数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> self.__table:</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="comment"># 遍历一条链表的数据</span></span><br><span class="line">                <span class="keyword">while</span> node:</span><br><span class="line">                    print(node.val, end=<span class="string">' '</span>)</span><br><span class="line">                    node = node.next</span><br><span class="line">                print()</span><br><span class="line"></span><br><span class="line"><span class="meta">	@property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 当前数据个数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.__count</span><br><span class="line"></span><br><span class="line"><span class="meta">	@count.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self, count)</span>:</span></span><br><span class="line">        self.__count = count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">table_length</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 表总长度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len(self.__table)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__used_index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 使用了下标的个数,即有多少个索引下标使用了</span></span><br><span class="line"></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> self.__table:</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rehash</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 当达到限制容量时,扩容后重新赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 临时表,扩容使用,扩容倍数*2</span></span><br><span class="line">        tmp = [<span class="literal">None</span>] * (self.table_length() * <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 读取头节点</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> self.__table:</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="comment"># 头节点中的值</span></span><br><span class="line">                val = node.val</span><br><span class="line">                <span class="comment"># 计算索引</span></span><br><span class="line">                index = self.hash_index(val, tmp)</span><br><span class="line">                <span class="comment"># 将头节点放到临时表中新的索引处</span></span><br><span class="line">                tmp[index] = node</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除表后,将临时表重新赋值</span></span><br><span class="line">        <span class="keyword">del</span> self.__table</span><br><span class="line">        self.__table = tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">need_rehash</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 是否需要扩容,如果已经使用超过70%容量,就需要扩容</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.__used_index() / self.table_length() &gt;= <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hash_index</span><span class="params">(self, val, table=None)</span>:</span></span><br><span class="line">        <span class="comment"># 计算索引</span></span><br><span class="line">        <span class="comment"># :param val: 要计算的值</span></span><br><span class="line">        <span class="comment"># :param table: 表,有可能是临时表(扩容中用上)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 直接使用hash算法,就不用自己写了</span></span><br><span class="line">        <span class="comment"># 先转化成str类型,避免某些list之类的不可hash导致报错</span></span><br><span class="line">        <span class="comment"># 除以总长度得到索引位置</span></span><br><span class="line">        <span class="keyword">return</span> int(hash(str(val))) % len(table <span class="keyword">if</span> table <span class="keyword">else</span> self.__table)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    table = HashTable(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">    vals = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>)]</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> vals:</span><br><span class="line">        table.insert(val)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'---&gt;遍历'</span>)</span><br><span class="line">    table.traverse()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'---&gt;长度'</span>)</span><br><span class="line">    print(table.count)</span><br><span class="line">    print(table.table_length())</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'---&gt;搜索'</span>)</span><br><span class="line">    print(table.search(vals[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    table.delete(vals[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">'---&gt;删除后的长度'</span>)</span><br><span class="line">    print(table.count)</span><br><span class="line">    print(table.table_length())</span><br></pre></td></tr></table></figure>

<p>感觉上面的写法很逗比，根本不是哈希表，所以改成了下面的写法，但还是觉得哪里不对劲…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-5-23 22:48</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.value = value</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.value)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, init_length=<span class="number">15</span>)</span>:</span></span><br><span class="line">        self.__table = [<span class="literal">None</span>] * init_length</span><br><span class="line">        <span class="comment"># 列表中总共右多少数据</span></span><br><span class="line">        self.__size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        self.__insert(key, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__search(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.__delete(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 迭代器</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'index'</span>):</span><br><span class="line">            self.index = <span class="number">-1</span></span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.index &lt; len(self.__table):</span><br><span class="line">            node = self.__table[self.index]</span><br><span class="line">            values = []</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="keyword">while</span> node:</span><br><span class="line">                    values.append(node.value)</span><br><span class="line">                    node = node.next</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> values</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__insert</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="comment"># 插入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取索引</span></span><br><span class="line">        index = self.__hash_index(key)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__table[index]:</span><br><span class="line">            self.__table[index] = Node(key, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = self.__table[index]</span><br><span class="line">            <span class="keyword">while</span> node.next:</span><br><span class="line">                <span class="comment"># 如果key值相同了，就说明值需要覆盖</span></span><br><span class="line">                <span class="keyword">if</span> node.key == key:</span><br><span class="line">                    node.value = value</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                node = node.next</span><br><span class="line">            <span class="comment"># 如果是正常退出，就追加到链表结尾</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 添加到链表尾部</span></span><br><span class="line">                node.next = Node(key, value)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 长度+1</span></span><br><span class="line">        self.__size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.__rehash()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__search</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="comment"># 搜索</span></span><br><span class="line">        <span class="comment"># :param val: 需要搜索的值</span></span><br><span class="line">        <span class="comment"># :return: 如果没有找到,返回None,找到了就返回节点</span></span><br><span class="line"></span><br><span class="line">        index = self.__hash_index(key)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 得到头结点</span></span><br><span class="line">        node = self.__table[index]</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.key == key:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="comment"># 如果正常退出，就说明没有找到</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="comment"># 删除值</span></span><br><span class="line"></span><br><span class="line">        index = self.__hash_index(key)</span><br><span class="line">        <span class="comment"># 得到头结点</span></span><br><span class="line">        node = self.__table[index]</span><br><span class="line">        <span class="comment"># 保存前一个节点</span></span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.key == key:</span><br><span class="line">                <span class="comment"># 如果pre为空,表示要删除的点时头结点</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                    <span class="comment"># 要删除的是头结点,那么将头结点的下一个节点放到表中</span></span><br><span class="line">                    self.__table[index] = node.next</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.next = node.next</span><br><span class="line"></span><br><span class="line">                self.__size -= <span class="number">1</span></span><br><span class="line">                <span class="comment"># 删除</span></span><br><span class="line">                <span class="keyword">del</span> node</span><br><span class="line">                <span class="comment"># 值删除第一个找到的点</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            pre = node</span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'No Such Value'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash_index</span><span class="params">(self, key, table=None)</span>:</span></span><br><span class="line">        <span class="comment"># 计算索引</span></span><br><span class="line">        <span class="keyword">return</span> int(hash(key)) % len(table <span class="keyword">if</span> table <span class="keyword">else</span> self.__table)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rehash</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 容量达到使用上限，扩容后重新分配</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__need_rehash():</span><br><span class="line">            tmp = [<span class="literal">None</span>] * len(self.__table) * <span class="number">2</span></span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> self.__table:</span><br><span class="line">                <span class="keyword">if</span> t:</span><br><span class="line">                    index = self.__hash_index(t.key, tmp)</span><br><span class="line">                    tmp[index] = t</span><br><span class="line"></span><br><span class="line">            <span class="keyword">del</span> self.__table</span><br><span class="line">            self.__table = tmp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__need_rehash</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.__table_count() / len(self.__table) &gt;= <span class="number">0.7</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__table_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># table中使用了索引的数据长度</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> self.__table:</span><br><span class="line">            <span class="keyword">if</span> t:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    table = HashTable(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">    values = [random.randint(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">50</span>)]</span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(values):</span><br><span class="line">        table[index] = value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># del table[10]</span></span><br><span class="line">    <span class="comment"># print(table[1])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> table[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">del</span> table[<span class="number">10</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> table:</span><br><span class="line">        print(t)</span><br><span class="line">    </span><br><span class="line">    print(table[<span class="number">49</span>])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>django --- session源码分析</title>
    <url>/2020/05/23/django-session%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="cookie和seesion的区别"><a href="#cookie和seesion的区别" class="headerlink" title="cookie和seesion的区别"></a>cookie和seesion的区别</h3><p>简单来讲就是都是key-value形式的数据，不同的是，cookie存储在客户端，session存储在服务端。具体的解释可以上网搜，不做叙述。</p>
<a id="more"></a>

<h3 id="Session模型"><a href="#Session模型" class="headerlink" title="Session模型"></a>Session模型</h3><p>在<code>settings.py</code>中的<code>INSTALLED_APPS</code>增加<code>django.contrib.sessions</code>。</p>
<p>数据模型:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractBaseSession</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    session_key = models.CharField(_(<span class="string">'session key'</span>), max_length=<span class="number">40</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    session_data = models.TextField(_(<span class="string">'session data'</span>))</span><br><span class="line">    expire_date = models.DateTimeField(_(<span class="string">'expire date'</span>), db_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    objects = BaseSessionManager()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">        verbose_name = _(<span class="string">'session'</span>)</span><br><span class="line">        verbose_name_plural = _(<span class="string">'sessions'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span><span class="params">(AbstractBaseSession)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">(AbstractBaseSession.Meta)</span>:</span></span><br><span class="line">        db_table = <span class="string">'django_session'</span></span><br></pre></td></tr></table></figure>
<p>综上，那么在执行完<code>python manage.py migrate</code>指令后，将在数据库中生成<code>django_session</code>数据表，表中字段只有三个<br/><br><code>session_key</code>，<code>session_data</code>，<code>expire_date</code>。<br/><br><code>session_key</code>,会在cookie中存储一个唯一性的<code>session_id</code>，在客户端向服务端发送请求中，会从cookie中获取到这个id值，从数据表中获取对应的数据。<br/><br><code>session_data</code>,存储加密后的数据，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.session[&#39;hello&#39;] &#x3D; &#39;world&#39;</span><br><span class="line">request.session.save()</span><br></pre></td></tr></table></figure>
<p>存储的后数据就是<code>NjdjMmY3ZGRlMDNmNTRlM2FlMTNjNmMzODMzYzgyNTgxMjE5NDVkNjp7ImhlbGxvIjoid29ybGQifQ</code>，根据<code>secret_key</code>不同，存储后的数据也肯定会不同。<br/><br><code>expire_date</code>，session的有效期。<br>举例:<br/><br>在cookie中有数据, key=”session_id”, value=”r7bwqr8ba5pypolyq4e502zjxaxcl9v5”, 那么此value就是<code>django_session</code>表的<code>session_key</code>数据。</p>
<h3 id="session存储方式"><a href="#session存储方式" class="headerlink" title="session存储方式"></a>session存储方式</h3><p>从django的代码路径<code>django.contrib.sessions</code>可以获取到具体分类，具体使用哪种可以在<code>settings.py</code>中配置<code>SESSION_ENGINE</code>属性，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.signed_cookies'</span></span><br></pre></td></tr></table></figure>
<h4 id="django-contrib-sessions-file"><a href="#django-contrib-sessions-file" class="headerlink" title="django.contrib.sessions.file"></a>django.contrib.sessions.file</h4><p>将session数据存放在文件中，一般文件都是放在/tmp下，例如windows平台就是在<code>C:\Users\Administrator\AppData\Local\Temp</code>路径下。<br/><br>不推荐。</p>
<h4 id="django-contrib-sessions-cache"><a href="#django-contrib-sessions-cache" class="headerlink" title="django.contrib.sessions.cache"></a>django.contrib.sessions.cache</h4><p>将session数据放在缓存中。<br/><br>使用redis做缓存配置如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/1"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SESSION_ENGINE = <span class="string">"django.contrib.sessions.backends.cache"</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">"default"</span></span><br></pre></td></tr></table></figure>

<h4 id="django-contrib-sessions-db"><a href="#django-contrib-sessions-db" class="headerlink" title="django.contrib.sessions.db"></a>django.contrib.sessions.db</h4><p>将session放在数据库中，这个是默认方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The module to store session data</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span></span><br></pre></td></tr></table></figure>
<h4 id="django-contrib-sessions-cache-db"><a href="#django-contrib-sessions-cache-db" class="headerlink" title="django.contrib.sessions.cache_db"></a>django.contrib.sessions.cache_db</h4><p>混合存储，优先从缓存中获取session，如果没有再从数据库中获取，结合了上面两种。</p>
<h4 id="django-contrib-sessions-signed-cookies"><a href="#django-contrib-sessions-signed-cookies" class="headerlink" title="django.contrib.sessions.signed_cookies"></a>django.contrib.sessions.signed_cookies</h4><p>将session数据加密后放在cookie中。<br/><br>不推荐。</p>
<h3 id="源码介绍"><a href="#源码介绍" class="headerlink" title="源码介绍"></a>源码介绍</h3><p>看了下代码，发现session的代码比我想象中的简单太多，就稍微拿数据库存储方式说下。</p>
<h4 id="SessionBase"><a href="#SessionBase" class="headerlink" title="SessionBase"></a>SessionBase</h4><p>session的所有存储方式的类都叫做<code>SessionStore</code>，而所有的类都继承自<code>SessionBase</code>。<br/><br>在使用session时完成就是按照dict使用的，看了下它的代码，虽然说并没有继承自dict或跟dict相关的类，但其实一看就跟dict的用法一致。<br/><br>路径：<code>django.contrib.sessions.backends.base.SessionBase</code></p>
<h5 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, session_key=None)</span>:</span></span><br><span class="line">    <span class="comment"># 客户端的session_id的值</span></span><br><span class="line">    self._session_key = session_key</span><br><span class="line">    <span class="comment"># 是否访问</span></span><br><span class="line">    self.accessed = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 是否修改</span></span><br><span class="line">    self.modified = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># 序列化方式，默认是json</span></span><br><span class="line">    self.serializer = import_string(settings.SESSION_SERIALIZER)</span><br></pre></td></tr></table></figure>

<h5 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h5><p>具体的可以查看源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    判断session是否存在</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> self._session</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取session数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> self._session[key]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    设置数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self._session[key] = value</span><br><span class="line">    <span class="comment"># 因为设置了数据，那么就是说已经修改了</span></span><br><span class="line">    self.modified = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    删除数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">del</span> self._session[key]</span><br><span class="line">    self.modified = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._session.get(key, default)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, key, default=__not_given)</span>:</span></span><br><span class="line">    self.modified = self.modified <span class="keyword">or</span> key <span class="keyword">in</span> self._session</span><br><span class="line">    <span class="comment"># 在pop数据时，是否有存入默认值</span></span><br><span class="line">    args = () <span class="keyword">if</span> default <span class="keyword">is</span> self.__not_given <span class="keyword">else</span> (default,)</span><br><span class="line">    <span class="keyword">return</span> self._session.pop(key, *args)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setdefault</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> self._session:</span><br><span class="line">        <span class="keyword">return</span> self._session[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.modified = <span class="literal">True</span></span><br><span class="line">        self._session[key] = value</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>

<h5 id="继承时需要实现的方法"><a href="#继承时需要实现的方法" class="headerlink" title="继承时需要实现的方法"></a>继承时需要实现的方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exists</span><span class="params">(self, session_key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Returns True if the given session_key already exists.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'subclasses of SessionBase must provide an exists() method'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Creates a new session instance. Guaranteed to create a new object with</span></span><br><span class="line"><span class="string">    a unique key and will have saved the result once (with empty data)</span></span><br><span class="line"><span class="string">    before the method returns.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'subclasses of SessionBase must provide a create() method'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, must_create=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Saves the session data. If 'must_create' is True, a new session object</span></span><br><span class="line"><span class="string">    is created (otherwise a CreateError exception is raised). Otherwise,</span></span><br><span class="line"><span class="string">    save() only updates an existing object and does not create one</span></span><br><span class="line"><span class="string">    (an UpdateError is raised).</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'subclasses of SessionBase must provide a save() method'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, session_key=None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Deletes the session data under this key. If the key is None, the</span></span><br><span class="line"><span class="string">    current session key value is used.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'subclasses of SessionBase must provide a delete() method'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Loads the session data and returns a dictionary.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'subclasses of SessionBase must provide a load() method'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_expired</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Remove expired sessions from the session store.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If this operation isn't possible on a given backend, it should raise</span></span><br><span class="line"><span class="string">    NotImplementedError. If it isn't necessary, because the backend has</span></span><br><span class="line"><span class="string">    a built-in expiration mechanism, it should be a no-op.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'This backend does not support clear_expired().'</span>)</span><br></pre></td></tr></table></figure>

<h5 id="get-session方法"><a href="#get-session方法" class="headerlink" title="_get_session方法"></a>_get_session方法</h5><p>在代码中，获取或设置数据时都是调用的<code>self._session</code>,从代码看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_session</span><span class="params">(self, no_load=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Lazily loads session from storage (unless "no_load" is True, when only</span></span><br><span class="line"><span class="string">    an empty dict is stored) and stores it in the current instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self.accessed = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> self._session_cache</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">if</span> self.session_key <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> no_load:</span><br><span class="line">            self._session_cache = &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._session_cache = self.load()</span><br><span class="line">    <span class="keyword">return</span> self._session_cache</span><br><span class="line"></span><br><span class="line">_session = property(_get_session)</span><br></pre></td></tr></table></figure>
<p><code>_session</code>是通过调用<code>self.load()</code>获取到的，也就是具体逻辑要子类实现了，根据存储的方式不同实现的代码也就不同。</p>
<h4 id="SessionStore，db方式"><a href="#SessionStore，db方式" class="headerlink" title="SessionStore，db方式"></a>SessionStore，db方式</h4><h5 id="获取db方式数据表模型"><a href="#获取db方式数据表模型" class="headerlink" title="获取db方式数据表模型"></a>获取db方式数据表模型</h5><p>也就是最开始提到的<code>Session</code>模型了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_model_class</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> django.contrib.sessions.models <span class="keyword">import</span> Session</span><br><span class="line">    <span class="keyword">return</span> Session</span><br><span class="line"></span><br><span class="line"><span class="meta">@cached_property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.get_model_class()</span><br></pre></td></tr></table></figure>

<h5 id="load"><a href="#load" class="headerlink" title="load"></a>load</h5><p>实现父类的load方法。<br/><br>其实就是一般的orm使用方法，如果存在返回数据的Session对象，不存在则返回空dict，额外做了一个有效期的判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = self.model.objects.get(</span><br><span class="line">            session_key=self.session_key,</span><br><span class="line">            expire_date__gt=timezone.now()</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> self.decode(s.session_data)</span><br><span class="line">    <span class="keyword">except</span> (self.model.DoesNotExist, SuspiciousOperation) <span class="keyword">as</span> e:</span><br><span class="line">        self._session_key = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="create"><a href="#create" class="headerlink" title="create"></a>create</h5><p>创建Session对象。<br>_get_new_session_key()方法会生成一个32位的随机字符串，生成后就立即保存了，避免key值出现重复。<br/><br>这儿稍微提了下，因为在工作中好像遇到过这类问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        self._session_key = self._get_new_session_key()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Save immediately to ensure we have a unique entry in the database.</span></span><br><span class="line">            self.save(must_create=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> CreateError:</span><br><span class="line">            <span class="comment"># Key wasn't unique. Try again.</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        self.modified = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<h4 id="中间件SessionMiddleware"><a href="#中间件SessionMiddleware" class="headerlink" title="中间件SessionMiddleware"></a>中间件SessionMiddleware</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        <span class="comment"># session的存储方式是可配置的，那么根据settings.py中的配置获取不同的SessionStore类</span></span><br><span class="line">        <span class="comment"># import_module根据路径（字符串）获取模块对象</span></span><br><span class="line">        engine = import_module(settings.SESSION_ENGINE)</span><br><span class="line">        self.SessionStore = engine.SessionStore</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 存放在cookie中的django_session表的session_key对应的key值，默认是sessionid</span></span><br><span class="line">        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)</span><br><span class="line">        <span class="comment"># 获取session对象</span></span><br><span class="line">        request.session = self.SessionStore(session_key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 是否已访问</span></span><br><span class="line">            accessed = request.session.accessed</span><br><span class="line">            <span class="comment"># 是否已修改</span></span><br><span class="line">            modified = request.session.modified</span><br><span class="line">            <span class="comment"># 是否为空</span></span><br><span class="line">            empty = request.session.is_empty()</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># First check if we need to delete this cookie.</span></span><br><span class="line">            <span class="comment"># The session should be deleted only if the session is entirely empty</span></span><br><span class="line">            <span class="keyword">if</span> settings.SESSION_COOKIE_NAME <span class="keyword">in</span> request.COOKIES <span class="keyword">and</span> empty:</span><br><span class="line">                response.delete_cookie(</span><br><span class="line">                    settings.SESSION_COOKIE_NAME,</span><br><span class="line">                    path=settings.SESSION_COOKIE_PATH,</span><br><span class="line">                    domain=settings.SESSION_COOKIE_DOMAIN,</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> accessed:</span><br><span class="line">                    patch_vary_headers(response, (<span class="string">'Cookie'</span>,))</span><br><span class="line">                <span class="keyword">if</span> (modified <span class="keyword">or</span> settings.SESSION_SAVE_EVERY_REQUEST) <span class="keyword">and</span> <span class="keyword">not</span> empty:</span><br><span class="line">                    <span class="comment"># 确定session的有效期</span></span><br><span class="line">                    <span class="keyword">if</span> request.session.get_expire_at_browser_close():</span><br><span class="line">                        max_age = <span class="literal">None</span></span><br><span class="line">                        expires = <span class="literal">None</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        max_age = request.session.get_expiry_age()</span><br><span class="line">                        expires_time = time.time() + max_age</span><br><span class="line">                        expires = cookie_date(expires_time)</span><br><span class="line">                    <span class="keyword">if</span> response.status_code != <span class="number">500</span>:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            <span class="comment"># 服务端保存</span></span><br><span class="line">                            request.session.save()</span><br><span class="line">                        <span class="keyword">except</span> UpdateError:</span><br><span class="line">                            <span class="keyword">return</span> redirect(request.path)</span><br><span class="line">                        <span class="comment"># 客户端保存</span></span><br><span class="line">                        response.set_cookie(</span><br><span class="line">                            settings.SESSION_COOKIE_NAME,</span><br><span class="line">                            request.session.session_key, max_age=max_age,</span><br><span class="line">                            expires=expires, domain=settings.SESSION_COOKIE_DOMAIN,</span><br><span class="line">                            path=settings.SESSION_COOKIE_PATH,</span><br><span class="line">                            secure=settings.SESSION_COOKIE_SECURE <span class="keyword">or</span> <span class="literal">None</span>,</span><br><span class="line">                            httponly=settings.SESSION_COOKIE_HTTPONLY <span class="keyword">or</span> <span class="literal">None</span>,</span><br><span class="line">                        )</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>之前一直想把这部分源码过一遍，但拖延症太严重一直放着了。现在花点时间看了下源码，比想象中的简单好多，一下子都不知道笔记该怎么写了，就随便复制了点看起来重要的代码添加点注释了。<br/><br>session模块主要的代码都在<code>django.contrib.session.backends</code>路径下，代码很简单，配合django的注释很容易读懂，就这样了。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]几个redis常用问题</title>
    <url>/2020/05/23/%E8%BD%AC-%E5%87%A0%E4%B8%AAredis%E5%B8%B8%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="什么是缓存雪崩？"><a href="#什么是缓存雪崩？" class="headerlink" title="什么是缓存雪崩？"></a>什么是缓存雪崩？</h4><p>如果我们的缓存挂掉了，这意味着我们的全部请求都跑去数据库了。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/blog/20191215/1.jpg" alt="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/blog/20191215/1.jpg"><br>我们都知道Redis不可能把所有的数据都缓存起来(内存昂贵且有限)，所以Redis需要对数据设置过期时间，并采用的是惰性删除+定期删除两种策略对过期键删除。</p>
<p>如果缓存数据设置的过期时间是相同的，并且Redis恰好将这部分数据全部删光了。这就会导致在这段时间内，这些缓存同时失效，全部请求到数据库中。</p>
<p>这就是缓存雪崩：Redis挂掉了，请求全部走数据库。</p>
<p>缓存雪崩如果发生了，很可能就把我们的数据库搞垮，导致整个服务瘫痪！</p>
<a id="more"></a>

<h4 id="如何解决缓存雪崩？"><a href="#如何解决缓存雪崩？" class="headerlink" title="如何解决缓存雪崩？"></a>如何解决缓存雪崩？</h4><p>在缓存的时候给过期时间加上一个随机值，这样就会大幅度的减少缓存在同一时间过期。</p>
<p>对于“Redis挂掉了，请求全部走数据库”这种情况，我们可以有以下的思路：</p>
<p>事发前：实现Redis的高可用(主从架构+Sentinel 或者Redis Cluster)，尽量避免Redis挂掉这种情况发生。</p>
<p>事发中：万一Redis真的挂了，我们可以设置本地缓存(ehcache)+限流(hystrix)，尽量避免我们的数据库被干掉(起码能保证我们的服务还是能正常工作的)</p>
<p>事发后：redis持久化，重启后自动从磁盘上加载数据，快速恢复缓存数据。</p>
<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h4><p>缓存穿透是指查询一个一定不存在的数据。由于缓存不命中，并且出于容错考虑，如果从数据库查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，失去了缓存的意义。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/blog/20191215/2.jpg" alt="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/blog/20191215/2.jpg"><br>这就是缓存穿透：</p>
<p>请求的数据在缓存大量不命中，导致请求走数据库。</p>
<p>缓存穿透如果发生了，也可能把我们的数据库搞垮，导致整个服务瘫痪！</p>
<h4 id="如何解决缓存穿透？"><a href="#如何解决缓存穿透？" class="headerlink" title="如何解决缓存穿透？"></a>如何解决缓存穿透？</h4><p>解决缓存穿透也有两种方案：</p>
<p>由于请求的参数是不合法的(每次都请求不存在的参数)，于是我们可以使用布隆过滤器(BloomFilter)或者压缩filter提前拦截，不合法就不让这个请求到数据库层！</p>
<p>当我们从数据库找不到的时候，我们也将这个空对象设置到缓存里边去。下次再请求的时候，就可以从缓存里边获取了。</p>
<p>这种情况我们一般会将空对象设置一个较短的过期时间。</p>
<h3 id="缓存与数据库双写一致"><a href="#缓存与数据库双写一致" class="headerlink" title="缓存与数据库双写一致"></a>缓存与数据库双写一致</h3><h4 id="对于读操作，流程是这样的"><a href="#对于读操作，流程是这样的" class="headerlink" title="对于读操作，流程是这样的"></a>对于读操作，流程是这样的</h4><p>如果我们的数据在缓存里边有，那么就直接取缓存的。</p>
<p>如果缓存里没有我们想要的数据，我们会先去查询数据库，然后将数据库查出来的数据写到缓存中。最后将数据返回给请求。</p>
<h4 id="什么是缓存与数据库双写一致问题？"><a href="#什么是缓存与数据库双写一致问题？" class="headerlink" title="什么是缓存与数据库双写一致问题？"></a>什么是缓存与数据库双写一致问题？</h4><p>如果仅仅查询的话，缓存的数据和数据库的数据是没问题的。但是，当我们要更新时候呢？各种情况很可能就造成数据库和缓存的数据不一致了。</p>
<p>这里不一致指的是：数据库的数据跟缓存的数据不一致<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/blog/20191215/3.jpg" alt="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/blog/20191215/3.jpg"><br>从理论上说，只要我们设置了键的过期时间，我们就能保证缓存和数据库的数据最终是一致的。因为只要缓存数据过期了，就会被删除。随后读的时候，因为缓存里没有，就可以查数据库的数据，然后将数据库查出来的数据写入到缓存中。</p>
<p>除了设置过期时间，我们还需要做更多的措施来尽量避免数据库与缓存处于不一致的情况发生。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://mp.weixin.qq.com/s/Fx6mcL4cycBG3x29117d9Q</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>[转]Go语言中new()和 make()的区别</title>
    <url>/2020/05/23/%E8%BD%AC-Go%E8%AF%AD%E8%A8%80%E4%B8%ADnew-%E5%92%8C-make-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Go 语言中的 new 和 make 一直是新手比较容易混淆的东西，咋一看很相似。不过解释两者之间的不同也非常容易。</p>
<h3 id="new-的主要特性"><a href="#new-的主要特性" class="headerlink" title="new 的主要特性"></a>new 的主要特性</h3><p>首先 new 是内建函数，你可以从 <a href="http://golang.org/pkg/builtin/#new" target="_blank" rel="noopener">http://golang.org/pkg/builtin/#new</a> 这儿看到它，它的定义也很简单：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">new</span><span class="params">(Type)</span> *<span class="title">Type</span></span></span><br></pre></td></tr></table></figure>
<p>官方文档对于它的描述是：</p>
<blockquote>
<p>内建函数 new 用来分配内存，它的第一个参数是一个类型，不是一个值，它的返回值是一个指向新分配类型零值的指针</p>
</blockquote>
<p>根据这段描述，我们可以自己实现一个类似 new 的功能：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newInt</span><span class="params">()</span> *<span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">  <span class="keyword">return</span> &amp;i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">someInt := newInt()</span><br></pre></td></tr></table></figure>
<p>我们这个函数的功能跟 someInt := new(int) 一模一样。所以在我们自己定义 new 开头的函数时，出于约定也应该返回类型的指针。</p>
<a id="more"></a>

<h3 id="make-的主要特性"><a href="#make-的主要特性" class="headerlink" title="make 的主要特性"></a>make 的主要特性</h3><p>make 也是内建函数，你可以从 <a href="http://golang.org/pkg/builtin/#make" target="_blank" rel="noopener">http://golang.org/pkg/builtin/#make</a> 这儿看到它，它的定义比 new 多了一个参数，返回值也不同：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">(Type, size IntegerType)</span> <span class="title">Type</span></span></span><br></pre></td></tr></table></figure>
<p>官方文档对于它的描述是：</p>
<blockquote>
<p>内建函数 make 用来为 slice，map 或 chan 类型分配内存和初始化一个对象(注意：只能用在这三种类型上)，跟 new 类似，第一个参数也是一个类型而不是一个值，跟 new 不同的是，make 返回类型的引用而不是指针，而返回值也依赖于具体传入的类型，具体说明如下：<br/><br><b>Slice</b>: 第二个参数 size 指定了它的长度，它的容量和长度相同。<br>你可以传入第三个参数来指定不同的容量值，但必须不能比长度值小。<br>比如 make([]int, 0, 10)<br/><br><b>Map</b>: 根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存<br/><br><b>Channel</b>: 管道缓冲区依据缓冲区容量被初始化。如果容量为 0 或者忽略容量，管道是没有缓冲区的<br/></p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>new 的作用是初始化一个指向类型的指针(*T)，make 的作用是为 slice，map 或 chan 初始化并返回引用(T)。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.jb51.net/article/56837.htm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>golang --- 接口介绍</title>
    <url>/2020/05/23/golang-%E6%8E%A5%E5%8F%A3%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Go语言的主要设计者之一罗布·派克（Rob Pike）曾经说过，如果只能选择一个Go语言的特 性移植到其他语言中，他会选择接口。</p>
<p>接口在Go语言有着至关重要的地位。如果说goroutine和channel是支撑起Go语言的并发模型 的基石，让Go语言在如今集群化与多核化的时代成为一道极为亮丽的风景，那么接口是Go语言 整个类型系统的基石，让Go语言在基础编程哲学的探索上达到前所未有的高度。</p>
<p>Go语言在编程哲学上是变革派，而不是改良派。这不是因为Go语言有goroutine和channel， 而更重要的是因为Go语言的类型系统，更是因为Go语言的接口。Go语言的编程哲学因为有接口 而趋近完美。</p>
<a id="more"></a>


<pre><code>接口只有方法声明，没有实现，也没有数据字段。
接口可以匿名嵌入到其他接口。
对象赋值给接口时，会发生拷贝。
只有当接口存储的类型和对象都是nil时，接口等于nil。
空接口可以接收任意的数据类型。
一个类型可以实现多个接口。
接口变量名习惯以 er 结尾。</code></pre><br/>

<pre><code>接口类型是对其它类型行为的抽象和概括，接口类型不会和特定的实现细节绑定。
Go接口独特在它是隐式实现的，这是指：一个结构体只要实现了接口要求的所有方法，我们就说这个结构体实现了该接口。</code></pre><p>​    </p>
<h3 id="接口语法"><a href="#接口语法" class="headerlink" title="接口语法"></a>接口语法</h3><p>接口在现实世界也是有真实场景的，如同笔记本上都有USB插口，且不用担心这个插槽是为手机、U盘、平板哪一个准备的，因为笔记本的usb插槽和各种设备的厂家统一了USB的插槽规范。</p>
<pre><code>type 接口名 interface {
    method1(参数列表)返回值列表
    method2(参数列表)返回值列表
}
interface类型可以定义一组方法，且不需要实现这些方法！并且interface不能有任何变量。
只要有一个变量类型，含有接口中的所有方法，就说这个变量类型实现了这个接口。</code></pre><h4 id="Go多态与接口"><a href="#Go多态与接口" class="headerlink" title="Go多态与接口"></a>Go多态与接口</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//定义一个Usb接口，且定义Usb功能方法</span></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line">    Start()</span><br><span class="line">    Stop()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让手机Phone实现Usb接口的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"手机已连接USB,开始工作"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//必须实现接口所有的方法，少一个都报错  如下：Phone does not implement Usb (missing Stop method)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"手机断开了USB，停止工作"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> IPad <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p IPad)</span> <span class="title">Start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"ipad已经连接USB，开始工作"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p IPad)</span> <span class="title">Stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"ipad断开了USB，停止工作"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个电脑结构体，这个结构体可以实现usb的接口</span></span><br><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义working方法，接收Usb接口类型变量</span></span><br><span class="line"><span class="comment">//实现Usb接口声明的所有方法</span></span><br><span class="line"><span class="comment">//这是一个多态的函数，调用同一个Working函数，不同的执行结果</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mbp Computer)</span> <span class="title">Working</span><span class="params">(usb Usb)</span></span> &#123;</span><br><span class="line">    <span class="comment">//不同的usb实参，实现不同的功能</span></span><br><span class="line">    <span class="comment">//只要实现了usb接口的数据类型，那么这个类型的变量，就可以给usb接口变量赋值</span></span><br><span class="line">    usb.Start()</span><br><span class="line">    usb.Stop()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//分别创建结构体对象</span></span><br><span class="line">    c := Computer&#123;&#125;</span><br><span class="line">    p := Phone&#123;<span class="string">"苹果手机"</span>, <span class="number">6999</span>&#125;</span><br><span class="line">    i := IPad&#123;<span class="string">"华为平板"</span>, <span class="number">7999</span>&#125; </span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//手机连接笔记本，插上手机</span></span><br><span class="line">    c.Working(p)</span><br><span class="line">    fmt.Printf(<span class="string">"名字:%v 价格:%d\n"</span>, p.Name, p.Price)</span><br><span class="line">    fmt.Println(<span class="string">"------------------"</span>)</span><br><span class="line">    <span class="comment">//平板连接笔记本，插上平板</span></span><br><span class="line">    c.Working(i)</span><br><span class="line">    fmt.Printf(<span class="string">"名字：%v 价格：%d\n"</span>, i.Name, i.Price)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例2:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//员工接口</span></span><br><span class="line"><span class="keyword">type</span> Employer <span class="keyword">interface</span> &#123;</span><br><span class="line">    CalcSalary() <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开发者</span></span><br><span class="line"><span class="keyword">type</span> Programer <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    base  <span class="keyword">float32</span></span><br><span class="line">    extra <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建开发者实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProgramer</span><span class="params">(name <span class="keyword">string</span>, base <span class="keyword">float32</span>, extra <span class="keyword">float32</span>)</span> <span class="title">Programer</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Programer&#123;</span><br><span class="line">        name,</span><br><span class="line">        base,</span><br><span class="line">        extra,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算开发者工资，实现了CalcSalary方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Programer)</span> <span class="title">CalcSalary</span><span class="params">()</span> <span class="title">float32</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.base</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销售群体</span></span><br><span class="line"><span class="keyword">type</span> Sale <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    base  <span class="keyword">float32</span></span><br><span class="line">    extra <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建销售实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSale</span><span class="params">(name <span class="keyword">string</span>, base <span class="keyword">float32</span>, extra <span class="keyword">float32</span>)</span> <span class="title">Sale</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Sale&#123;</span><br><span class="line">        name,</span><br><span class="line">        base,</span><br><span class="line">        extra,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现了CalcSalary方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Sale)</span> <span class="title">CalcSalary</span><span class="params">()</span> <span class="title">float32</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.base + p.extra*p.base*<span class="number">0.5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算所有人的工资接收参数，接口切片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calcAll</span><span class="params">(e []Employer)</span> <span class="title">float32</span></span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        fmt.Println(e)</span></span><br><span class="line"><span class="comment">        [&#123;码云 50000 0&#125; &#123;刘抢东 40000 0&#125; &#123;麻花藤 30000 0&#125; &#123;格格 3000 2.5&#125; &#123;小雪 1800 2.5&#125; &#123;小雨 2000 2.5&#125;]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> cost <span class="keyword">float32</span></span><br><span class="line">    <span class="comment">//忽略索引，v是每一个结构体</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> e &#123;</span><br><span class="line">        cost = cost + v.CalcSalary()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cost</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := NewProgramer(<span class="string">"码云"</span>, <span class="number">50000.0</span>, <span class="number">0</span>)</span><br><span class="line">    p2 := NewProgramer(<span class="string">"刘抢东"</span>, <span class="number">40000</span>, <span class="number">0</span>)</span><br><span class="line">    p3 := NewProgramer(<span class="string">"麻花藤"</span>, <span class="number">30000</span>, <span class="number">0</span>)</span><br><span class="line">    s1 := NewSale(<span class="string">"格格"</span>, <span class="number">3000</span>, <span class="number">2.5</span>)</span><br><span class="line">    s2 := NewSale(<span class="string">"小雪"</span>, <span class="number">1800</span>, <span class="number">2.5</span>)</span><br><span class="line">    s3 := NewSale(<span class="string">"小雨"</span>, <span class="number">2000</span>, <span class="number">2.5</span>)</span><br><span class="line">    <span class="keyword">var</span> employList []Employer</span><br><span class="line">    employList = <span class="built_in">append</span>(employList, p1)</span><br><span class="line">    employList = <span class="built_in">append</span>(employList, p2)</span><br><span class="line">    employList = <span class="built_in">append</span>(employList, p3)</span><br><span class="line">    employList = <span class="built_in">append</span>(employList, s1)</span><br><span class="line">    employList = <span class="built_in">append</span>(employList, s2)</span><br><span class="line">    employList = <span class="built_in">append</span>(employList, s3)</span><br><span class="line">    cost := calcAll(employList)</span><br><span class="line">    fmt.Printf(<span class="string">"这个月人力成本：%f\n"</span>, cost)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Go接口细节"><a href="#Go接口细节" class="headerlink" title="Go接口细节"></a>Go接口细节</h3><pre><code>1.接口本身不能创建实例，但是可以指向一个实现了该接口的变量实例，如结构体
2.接口中所有方法都没有方法体，是没有实现的方法
3.Go中不仅是struct可以实现接口，自定义类型也可以实现接口，如type myInt int 自定义类型
4.一个自定义类型，只有实现了某个接口，才可以将自定义类型的实例变量，赋给接口类型，否则报错missing xx method
5.一个自定义类型，可以实现多个接口(实现多个接口的所有方法)
6.接口类型不得写入任何变量 如
type Usb interface{
    method1()
    method2()
    Name string  //错误，编译器不通过
}
7.接口A可以继承多个别的接口B、接口C，想要实现A，也必须实现B、C所有方法，称作接口组合
8.interface类型，默认是指针(引用类型)，如果没初始直接使用，输出nil，可以赋给实现了接口的变量
9.空接口interface{}，没有任何类型，也就是实现了任何类型，可以吧任何一个变量赋给空接口
10.匿名组合的接口，不可以有同名方法，否则报错duplicate method</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://pythonav.com/wiki/detail/4/54/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>[转]DRF中使用缓存drf-extensions</title>
    <url>/2020/05/23/%E8%BD%AC-DRF%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98drf-extensions/</url>
    <content><![CDATA[<p>(这个库很简单,直接转发别人的了.)<br/></p>
<p>在开发某些网站的时候，比如有些不经常或者长时间不会变更的数据，但是，用户会经常查询的数据，为了避免多次查询数据库给数据库带来太大的压力，我们可以及将这些经常被查询的数据，在被查询一次之后，可以在存放在redis缓存中，下次再进行查询的时候，可以直接从redis进行获取，而不需要再查询存储数据的（例如mysql）数据库了；</p>
<a id="more"></a>

<p>在Django REST framework中使用缓存，可以通过drf-extensions扩展来实现。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install drf-extensions</span><br></pre></td></tr></table></figure>
<p>最新版本是0.5.0,兼容py3以及drf3.9以上的版本,如果要在py2.7和drf3.6的版本上使用,需要安装<code>0.3.1</code>版本.</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1-使用装饰器"><a href="#1-使用装饰器" class="headerlink" title="1.使用装饰器"></a>1.使用装饰器</h4><p>可以在使用<code>rest_framework_extensions.cache.decorators</code>中的<code>cache_response</code>装饰器来装饰返回数据的类视图的对象方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CityView</span><span class="params">(views.APIView)</span>:</span></span><br><span class="line"><span class="meta">    @cache_response()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br></pre></td></tr></table></figure>
<p><code>cache_response</code>装饰器可以接收两个参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@cache_response(timeout=60*60, cache='default')</span></span><br></pre></td></tr></table></figure>
<p>timeout 缓存时间<br/><br>cache 缓存使用的Django缓存后端（即CACHES配置中的键名称）<br/><br>如果在使用cache_response装饰器时未指明timeout或者cache参数，则会使用配置文件中的默认配置，可以通过在settings.py中进行全局方法配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF扩展 </span></span><br><span class="line">REST_FRAMEWORK_EXTENSIONS = &#123; </span><br><span class="line">    <span class="comment"># 缓存时间 </span></span><br><span class="line">    <span class="string">'DEFAULT_CACHE_RESPONSE_TIMEOUT'</span>: <span class="number">60</span> * <span class="number">60</span>, </span><br><span class="line">    <span class="comment"># 缓存存储 </span></span><br><span class="line">    <span class="string">'DEFAULT_USE_CACHE'</span>: <span class="string">'default'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，cache_response装饰器既可以装饰在类视图中的get方法上，也可以装饰在REST framework扩展类提供的list或retrieve方法上。使用cache_response装饰器无需使用method_decorator进行转换。</p>
<h4 id="使用drf-extensions提供的扩展类"><a href="#使用drf-extensions提供的扩展类" class="headerlink" title="使用drf-extensions提供的扩展类"></a>使用drf-extensions提供的扩展类</h4><p>drf-extensions扩展对于缓存提供了三个扩展类：</p>
<pre><code>ListCacheResponseMixin
用于缓存返回列表数据的视图，与ListModelMixin扩展类配合使用，实际是为list方法添加了cache_response装饰器

RetrieveCacheResponseMixin
用于缓存返回单一数据的视图，与RetrieveModelMixin扩展类配合使用，实际是为retrieve方法添加了cache_response装饰器

CacheResponseMixin
为视图集同时补充List和Retrieve两种缓存，与ListModelMixin和RetrieveModelMixin一起配合使用。</code></pre><p>三个扩展类都是在rest_framework_extensions.cache.mixins中。</p>
<p>这个扩展类在使用的时候，只要需要进行缓存处理的视图函数在继承的时候，继承相关的扩展类，在全部的settings中进行缓存有效期和缓存使用的后端即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CityView</span><span class="params">(CacheResponseMixin, ReadOnlyModelViewSet)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DRF扩展 </span></span><br><span class="line">REST_FRAMEWORK_EXTENSIONS = &#123; </span><br><span class="line"><span class="comment"># 缓存时间 </span></span><br><span class="line">    <span class="string">'DEFAULT_CACHE_RESPONSE_TIMEOUT'</span>: <span class="number">60</span> * <span class="number">60</span>, </span><br><span class="line"><span class="comment"># 缓存存储 </span></span><br><span class="line">    <span class="string">'DEFAULT_USE_CACHE'</span>: <span class="string">'default'</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/gymaisyl/article/details/84452994</span><br><span class="line">https://github.com/chibisov/drf-extensions/releases</span><br><span class="line">http://chibisov.github.io/drf-extensions/docs/#0-3-1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>使用faker库随机产生虚拟数据</title>
    <url>/2020/05/23/%E4%BD%BF%E7%94%A8faker%E5%BA%93%E9%9A%8F%E6%9C%BA%E4%BA%A7%E7%94%9F%E8%99%9A%E6%8B%9F%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>安装:<br/><br><code>pip install faker</code></p>
<a id="more"></a>

<p>使用:<br/></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author   : FELIX</span></span><br><span class="line"><span class="comment"># @Date     : 2018/6/30 9:49</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Factory</span><br><span class="line"></span><br><span class="line"><span class="comment"># zh_CN 表示中国大陆版</span></span><br><span class="line">fake = Factory().create(<span class="string">'zh_CN'</span>)</span><br><span class="line"><span class="comment"># 产生随机手机号</span></span><br><span class="line">print(fake.phone_number())</span><br><span class="line"><span class="comment"># 产生随机姓名</span></span><br><span class="line">print(fake.name())</span><br><span class="line"><span class="comment"># 产生随机地址</span></span><br><span class="line">print(fake.address())</span><br><span class="line"><span class="comment"># 随机产生国家名</span></span><br><span class="line">print(fake.country())</span><br><span class="line"><span class="comment"># 随机产生国家代码</span></span><br><span class="line">print(fake.country_code())</span><br><span class="line"><span class="comment"># 随机产生城市名</span></span><br><span class="line">print(fake.city_name())</span><br><span class="line"><span class="comment"># 随机产生城市</span></span><br><span class="line">print(fake.city())</span><br><span class="line"><span class="comment"># 随机产生省份</span></span><br><span class="line">print(fake.province())</span><br><span class="line"><span class="comment"># 产生随机email</span></span><br><span class="line">print(fake.email())</span><br><span class="line"><span class="comment"># 产生随机IPV4地址</span></span><br><span class="line">print(fake.ipv4())</span><br><span class="line"><span class="comment"># 产生长度在最大值与最小值之间的随机字符串</span></span><br><span class="line">print(fake.pystr(min_chars=<span class="number">0</span>, max_chars=<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机产生车牌号</span></span><br><span class="line">print(fake.license_plate())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机产生颜色</span></span><br><span class="line">print(fake.rgb_color())  <span class="comment"># rgb</span></span><br><span class="line">print(fake.safe_hex_color())  <span class="comment"># 16进制</span></span><br><span class="line">print(fake.color_name())  <span class="comment"># 颜色名字</span></span><br><span class="line">print(fake.hex_color()) <span class="comment"># 16进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机产生公司名</span></span><br><span class="line">print(fake.company())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机产生工作岗位</span></span><br><span class="line">print(fake.job())</span><br><span class="line"><span class="comment"># 随机生成密码</span></span><br><span class="line">print(fake.password(length=<span class="number">10</span>, special_chars=<span class="literal">True</span>, digits=<span class="literal">True</span>, upper_case=<span class="literal">True</span>, lower_case=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 随机生成uuid</span></span><br><span class="line">print(fake.uuid4())</span><br><span class="line"><span class="comment"># 随机生成sha1</span></span><br><span class="line">print(fake.sha1(raw_output=<span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 随机生成md5</span></span><br><span class="line">print(fake.md5(raw_output=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成女性名字</span></span><br><span class="line">print(fake.name_female())</span><br><span class="line"><span class="comment"># 男性名字</span></span><br><span class="line">print(fake.name_male())</span><br><span class="line"><span class="comment"># 随机生成名字</span></span><br><span class="line">print(fake.name())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成基本信息</span></span><br><span class="line">print(fake.profile(fields=<span class="literal">None</span>, sex=<span class="literal">None</span>))</span><br><span class="line">print(fake.simple_profile(sex=<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成浏览器头user_agent</span></span><br><span class="line">print(fake.user_agent())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机产生时间</span></span><br><span class="line">fake.month_name()</span><br><span class="line"><span class="comment"># 'September'</span></span><br><span class="line">fake.date_time_this_century(before_now=<span class="literal">True</span>, after_now=<span class="literal">False</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2010, 7, 21, 18, 52, 43)</span></span><br><span class="line">fake.time_object(end_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.time(6, 39, 26)</span></span><br><span class="line">fake.date_time_between(start_date=<span class="string">"-30y"</span>, end_date=<span class="string">"now"</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2013, 10, 11, 18, 43, 40)</span></span><br><span class="line">fake.future_date(end_date=<span class="string">"+30d"</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.date(2018, 7, 8)</span></span><br><span class="line">fake.date_time(tzinfo=<span class="literal">None</span>, end_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2006, 9, 4, 20, 46, 6)</span></span><br><span class="line">fake.date(pattern=<span class="string">"%Y-%m-%d"</span>, end_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># '1998-08-02'</span></span><br><span class="line">fake.date_time_this_month(before_now=<span class="literal">True</span>, after_now=<span class="literal">False</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2018, 6, 8, 9, 56, 24)</span></span><br><span class="line">fake.timezone()</span><br><span class="line"><span class="comment"># 'Africa/Conakry'</span></span><br><span class="line">fake.date_time_this_decade(before_now=<span class="literal">True</span>, after_now=<span class="literal">False</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2017, 6, 27, 21, 18, 28)</span></span><br><span class="line">fake.month()</span><br><span class="line"><span class="comment"># '04'</span></span><br><span class="line">fake.day_of_week()</span><br><span class="line"><span class="comment"># 'Wednesday'</span></span><br><span class="line">fake.iso8601(tzinfo=<span class="literal">None</span>, end_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># '1988-02-28T09:22:29'</span></span><br><span class="line">fake.time_delta(end_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.timedelta(10832, 82660)</span></span><br><span class="line">fake.date_object(end_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.date(2005, 8, 18)</span></span><br><span class="line">fake.date_this_decade(before_today=<span class="literal">True</span>, after_today=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># datetime.date(2015, 1, 5)</span></span><br><span class="line">fake.date_this_century(before_today=<span class="literal">True</span>, after_today=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># datetime.date(2000, 6, 1)</span></span><br><span class="line">fake.date_this_month(before_today=<span class="literal">True</span>, after_today=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># datetime.date(2018, 6, 13)</span></span><br><span class="line">fake.am_pm()</span><br><span class="line"><span class="comment"># 'AM'</span></span><br><span class="line">fake.past_datetime(start_date=<span class="string">"-30d"</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2018, 6, 25, 7, 41, 34)</span></span><br><span class="line">fake.date_this_year(before_today=<span class="literal">True</span>, after_today=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># datetime.date(2018, 2, 24)</span></span><br><span class="line">fake.date_time_between_dates(datetime_start=<span class="literal">None</span>, datetime_end=<span class="literal">None</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2018, 6, 26, 14, 40, 5)</span></span><br><span class="line">fake.date_time_ad(tzinfo=<span class="literal">None</span>, end_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(673, 1, 28, 18, 17, 55)</span></span><br><span class="line">fake.date_between_dates(date_start=<span class="literal">None</span>, date_end=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.date(2018, 6, 26)</span></span><br><span class="line">fake.future_datetime(end_date=<span class="string">"+30d"</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2018, 7, 4, 10, 53, 6)</span></span><br><span class="line">fake.century()</span><br><span class="line"><span class="comment"># 'IX'</span></span><br><span class="line">fake.past_date(start_date=<span class="string">"-30d"</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.date(2018, 5, 30)</span></span><br><span class="line">fake.time(pattern=<span class="string">"%H:%M:%S"</span>, end_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># '01:32:14'</span></span><br><span class="line">fake.day_of_month()</span><br><span class="line"><span class="comment"># '19'</span></span><br><span class="line">fake.unix_time(end_datetime=<span class="literal">None</span>, start_datetime=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 1284297794</span></span><br><span class="line">fake.date_time_this_year(before_now=<span class="literal">True</span>, after_now=<span class="literal">False</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># datetime.datetime(2018, 5, 24, 11, 25, 25)</span></span><br><span class="line">fake.date_between(start_date=<span class="string">"-30y"</span>, end_date=<span class="string">"today"</span>)</span><br><span class="line"><span class="comment"># datetime.date(2003, 1, 11)</span></span><br><span class="line">fake.year()</span><br><span class="line"><span class="comment"># '1993'</span></span><br><span class="line">fake.time_series(start_date=<span class="string">"-30d"</span>, end_date=<span class="string">"now"</span>, precision=<span class="literal">None</span>, distrib=<span class="literal">None</span>, tzinfo=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># &lt;generator object time_series at 0x7f44e702a620&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机产生文件</span></span><br><span class="line">fake.file_extension(category=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 'xls'</span></span><br><span class="line">fake.file_name(category=<span class="literal">None</span>, extension=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># '表示.csv'</span></span><br><span class="line">fake.file_path(depth=<span class="number">1</span>, category=<span class="literal">None</span>, extension=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># '/教育/客户.js'</span></span><br><span class="line">fake.unix_device(prefix=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># '/dev/sdf'</span></span><br><span class="line">fake.unix_partition(prefix=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># '/dev/vdf0'</span></span><br><span class="line">fake.mime_type(category=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 'multipart/form-data'</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>[转]super没那么简单</title>
    <url>/2020/05/23/%E8%BD%AC-super%E6%B2%A1%E9%82%A3%E4%B9%88%E7%AE%80%E5%8D%95/</url>
    <content><![CDATA[<p>说到 super， 大家可能觉得很简单呀，不就是用来调用父类方法的嘛。如果真的这么简单的话也就不会有这篇文章了，且听我细细道来。?</p>
<h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>在开始之前我们来约定一下本文所使用的 Python 版本。默认用的是 Python 3，也就是说：本文所定义的类都是新式类。如果你用到是 Python 2 的话，记得继承 object:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认， Python 3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>Python 3 和 Python 2 的另一个区别是: Python 3 可以使用直接使用 super().xxx 代替 super(Class, self).xxx :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认，Python 3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        super().add(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        super(B, self).add(x)</span><br></pre></td></tr></table></figure>
<p>所以，你如果用的是 Python 2 的话，记得将本文的 super() 替换为 suepr(Class, self) 。</p>
<p>如果还有其他不兼容 Python 2 的情况，我会在文中注明的。</p>
<h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><p>在单继承中 super 就像大家所想的那样，主要是用来调用父类的方法的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.n = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        print(<span class="string">'self is &#123;0&#125; @A.add'</span>.format(self))</span><br><span class="line">        self.n += m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        print(<span class="string">'self is &#123;0&#125; @B.add'</span>.format(self))</span><br><span class="line">        super().add(m)</span><br><span class="line">        self.n += <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>你觉得执行下面代码后， b.n 的值是多少呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = B()</span><br><span class="line">b.add(<span class="number">2</span>)</span><br><span class="line">print(b.n)</span><br></pre></td></tr></table></figure>
<p>执行结果如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self <span class="keyword">is</span> &lt;__main__.B object at <span class="number">0x106c49b38</span>&gt; @B.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.B object at <span class="number">0x106c49b38</span>&gt; @A.add</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>这个结果说明了两个问题:</p>
<pre><code>super().add(m) 确实调用了父类 A 的 add 方法。
super().add(m) 调用父类方法 def add(self, m) 时, 此时父类中 self 并不是父类的实例而是子类的实例, 所以 b.add(2) 之后的结果是 5 而不是 4 。</code></pre><p>不知道这个结果是否和你想到一样呢？下面我们来看一个多继承的例子。</p>
<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>这次我们再定义一个 class C，一个 class D:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.n = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        print(<span class="string">'self is &#123;0&#125; @C.add'</span>.format(self))</span><br><span class="line">        super().add(m)</span><br><span class="line">        self.n += <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.n = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        print(<span class="string">'self is &#123;0&#125; @D.add'</span>.format(self))</span><br><span class="line">        super().add(m)</span><br><span class="line">        self.n += <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>下面的代码又输出啥呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = D()</span><br><span class="line">d.add(<span class="number">2</span>)</span><br><span class="line">print(d.n)</span><br></pre></td></tr></table></figure>
<p>这次的输出如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @D.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @B.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @C.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @A.add</span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure>
<p>你说对了吗？你可能会认为上面代码的输出类似: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @D.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @B.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @A.add</span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>为什么会跟预期的不一样呢？下面我们将一起来看看 super 的奥秘。</p>
<h3 id="super-是个类"><a href="#super-是个类" class="headerlink" title="super 是个类"></a>super 是个类</h3><p>当我们调用 super() 的时候，实际上是实例化了一个 super 类。你没看错， super 是个类，既不是关键字也不是函数等其他数据结构:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = super(A)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(s)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">super</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<p>在大多数情况下， super 包含了两个非常重要的信息: 一个 MRO 以及 MRO 中的一个类。当以如下方式调用 super 时: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">super(a_type, obj)</span><br></pre></td></tr></table></figure>
<p>MRO 指的是 type(obj) 的 MRO, MRO 中的那个类就是 a_type , 同时 isinstance(obj, a_type) == True 。<br>当这样调用时: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">super(type1, type2)</span><br></pre></td></tr></table></figure>
<p>MRO 指的是 type2 的 MRO, MRO 中的那个类就是 type1 ，同时 issubclass(type2, type1) == True 。<br>那么， super() 实际上做了啥呢？简单来说就是：提供一个 MRO 以及一个 MRO 中的类 C ， super() 将返回一个从 MRO 中 C 之后的类中查找方法的对象。<br>也就是说，查找方式时不是像常规方法一样从所有的 MRO 类中查找，而是从 MRO 的 tail 中查找。<br>举个栗子, 有个 MRO: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[A, B, C, D, E, object]</span><br></pre></td></tr></table></figure>
<p>下面的调用: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">super(C, A).foo()</span><br></pre></td></tr></table></figure>
<p>super 只会从 C 之后查找，即: 只会在 D 或 E 或 object 中查找 foo 方法。</p>
<h3 id="多继承中-super-的工作方式"><a href="#多继承中-super-的工作方式" class="headerlink" title="多继承中 super 的工作方式"></a>多继承中 super 的工作方式</h3><p>再回到前面的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = D()</span><br><span class="line">d.add(<span class="number">2</span>)</span><br><span class="line">print(d.n)</span><br></pre></td></tr></table></figure>
<p>现在你可能已经有点眉目，为什么输出会是 :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @D.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @B.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @C.add</span><br><span class="line">self <span class="keyword">is</span> &lt;__main__.D object at <span class="number">0x10ce10e48</span>&gt; @A.add</span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure>
<p>下面我们来具体分析一下:</p>
<pre><code>D 的 MRO 是: [D, B, C, A, object] 。 备注: 可以通过 D.mro() (Python 2 使用 D.__mro__ ) 来查看 D 的 MRO 信息）
详细的代码分析如下:</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.n = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        <span class="comment"># 第四步</span></span><br><span class="line">        <span class="comment"># 来自 D.add 中的 super</span></span><br><span class="line">        <span class="comment"># self == d, self.n == d.n == 5</span></span><br><span class="line">        print(<span class="string">'self is &#123;0&#125; @A.add'</span>.format(self))</span><br><span class="line">        self.n += m</span><br><span class="line">        <span class="comment"># d.n == 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        <span class="comment"># 第二步</span></span><br><span class="line">        <span class="comment"># 来自 D.add 中的 super</span></span><br><span class="line">        <span class="comment"># self == d, self.n == d.n == 5</span></span><br><span class="line">        print(<span class="string">'self is &#123;0&#125; @B.add'</span>.format(self))</span><br><span class="line">        <span class="comment"># 等价于 suepr(B, self).add(m)</span></span><br><span class="line">        <span class="comment"># self 的 MRO 是 [D, B, C, A, object]</span></span><br><span class="line">        <span class="comment"># 从 B 之后的 [C, A, object] 中查找 add 方法</span></span><br><span class="line">        super().add(m)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第六步</span></span><br><span class="line">        <span class="comment"># d.n = 11</span></span><br><span class="line">        self.n += <span class="number">3</span></span><br><span class="line">        <span class="comment"># d.n = 14</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.n = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        <span class="comment"># 第三步</span></span><br><span class="line">        <span class="comment"># 来自 B.add 中的 super</span></span><br><span class="line">        <span class="comment"># self == d, self.n == d.n == 5</span></span><br><span class="line">        print(<span class="string">'self is &#123;0&#125; @C.add'</span>.format(self))</span><br><span class="line">        <span class="comment"># 等价于 suepr(C, self).add(m)</span></span><br><span class="line">        <span class="comment"># self 的 MRO 是 [D, B, C, A, object]</span></span><br><span class="line">        <span class="comment"># 从 C 之后的 [A, object] 中查找 add 方法</span></span><br><span class="line">        super().add(m)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第五步</span></span><br><span class="line">        <span class="comment"># d.n = 7</span></span><br><span class="line">        self.n += <span class="number">4</span></span><br><span class="line">        <span class="comment"># d.n = 11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.n = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        <span class="comment"># 第一步</span></span><br><span class="line">        print(<span class="string">'self is &#123;0&#125; @D.add'</span>.format(self))</span><br><span class="line">        <span class="comment"># 等价于 super(D, self).add(m)</span></span><br><span class="line">        <span class="comment"># self 的 MRO 是 [D, B, C, A, object]</span></span><br><span class="line">        <span class="comment"># 从 D 之后的 [B, C, A, object] 中查找 add 方法</span></span><br><span class="line">        super().add(m)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第七步</span></span><br><span class="line">        <span class="comment"># d.n = 14</span></span><br><span class="line">        self.n += <span class="number">5</span></span><br><span class="line">        <span class="comment"># self.n = 19</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.add(<span class="number">2</span>)</span><br><span class="line">print(d.n)</span><br></pre></td></tr></table></figure>
<p>调用过程图如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D.mro() == [D, B, C, A, object]</span><br><span class="line">d = D()</span><br><span class="line">d.n == <span class="number">5</span></span><br><span class="line">d.add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span>          <span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span>            <span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span>             <span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span>       <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span>      <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span>       <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        super().add(m)  1.---&gt;  super().add(m) 2.---&gt;  super().add(m)  3.---&gt;  self.n += m</span><br><span class="line">        self.n += <span class="number">5</span>   &lt;-----<span class="number">-6.</span> self.n += <span class="number">3</span>    &lt;---<span class="number">-5.</span> self.n += <span class="number">4</span>     &lt;---<span class="number">-4.</span> &lt;--|</span><br><span class="line">        (<span class="number">14</span>+<span class="number">5</span>=<span class="number">19</span>)               (<span class="number">11</span>+<span class="number">3</span>=<span class="number">14</span>)              (<span class="number">7</span>+<span class="number">4</span>=<span class="number">11</span>)                (<span class="number">5</span>+<span class="number">2</span>=<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<p>现在你知道为什么 d.add(2) 后 d.n 的值是 19 了吧 ;)</p>
<h3 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h3><p><a href="https://segmentfault.com/a/1190000008150517" target="_blank" rel="noopener">super 没那么简单</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>使用gevent实现并发请求网络链接</title>
    <url>/2020/05/23/%E4%BD%BF%E7%94%A8gevent%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E8%AF%B7%E6%B1%82%E7%BD%91%E7%BB%9C%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<h4 id="正常访问"><a href="#正常访问" class="headerlink" title="正常访问"></a>正常访问</h4><p>耗时:<code>&gt;&gt;&gt;total_time = 61.8569815158844</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_urls</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">               <span class="string">'https://www.baidu.com'</span>,</span><br><span class="line">               <span class="string">'https://www.zhihu.com'</span>,</span><br><span class="line">               <span class="string">'http://moonmonsters.pythonanywhere.com'</span>,</span><br><span class="line">               <span class="string">'http://sina.com'</span>,</span><br><span class="line">               <span class="string">'https://www.missshi.cn/api/view/blog/5a98e4fe5b925d0aae000005'</span></span><br><span class="line">           ] * <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_request_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url).content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> _urls():</span><br><span class="line">        _request_url(url)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt;total_time = '</span> + str(time.time() - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="并发访问"><a href="#并发访问" class="headerlink" title="并发访问"></a>并发访问</h3><p>耗时:<code>&gt;&gt;&gt;total_time = 29.00442862510681</code></p>
<p>对于gevent而言，我们需要准备一个任务列表。</p>
<p>任务列表中每一个元素都是一个gevent.spawn()对象。</p>
<p>其中，gevent.spawn()函数可以接收一至多个参数。</p>
<p>第一个参数为任务需要执行的函数，后续的参数为函数对应的输入参数。</p>
<p>最终，当我们得到完成的任务列表后，可以调用gevent.joinall()来执行该列表中的任务。</p>
<p>需要注意的是，当我们引入猴子补丁后，会对已经以后的方法进行改写。</p>
<p>因此，不建议在全局范围内引入猴子补丁，最好是在哪部分为并发执行函数，则在哪部分引入猴子补丁。</p>
<p>在引入猴子补丁后，当运行到网络请求时，则会切换至其他任务继续执行，而不是在当前任务中继续等待。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_urls</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">               <span class="string">'https://www.baidu.com'</span>,</span><br><span class="line">               <span class="string">'https://www.zhihu.com'</span>,</span><br><span class="line">               <span class="string">'http://moonmonsters.pythonanywhere.com'</span>,</span><br><span class="line">               <span class="string">'http://sina.com'</span>,</span><br><span class="line">               <span class="string">'https://www.missshi.cn/api/view/blog/5a98e4fe5b925d0aae000005'</span></span><br><span class="line">           ] * <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_request_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 猴子补丁</span></span><br><span class="line">    <span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">    monkey.patch_socket()</span><br><span class="line">    <span class="keyword">return</span> requests.get(url).content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    task_list = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> _urls():</span><br><span class="line">        task_list.append(gevent.spawn(_request_url, url))</span><br><span class="line"></span><br><span class="line">    gevent.joinall(task_list)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'&gt;&gt;&gt;total_time = '</span> + str(time.time() - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>django --- 设置缓存的几种方式</title>
    <url>/2020/05/23/django-%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="缓存类型"><a href="#缓存类型" class="headerlink" title="缓存类型"></a>缓存类型</h3><h4 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h4><p><code>Memcached</code> 是一个高性能的分布式内存对象缓存系统。python使用它需要安装 <code>python-memcached</code> 依赖。 并且支持分布式缓存服务器:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.memcached.MemcachedCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: [</span><br><span class="line">            <span class="string">'172.19.26.xxx:11211'</span>,</span><br><span class="line">            <span class="string">'172.19.26.xxx:11211'</span>,</span><br><span class="line">            <span class="string">'172.19.26.xxx:11213'</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment"># 'LOCATION': '127.0.0.1:11211', # 如果只有单台</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>memchache的缓存完全是在内存中的，也就是，服务器一旦崩溃或重启，所有数据都不复存在，因此，决不能将缓存作为唯一的数据存储方式。</p>
<a id="more"></a>

<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>redis也是内存型缓存，但相比memcached，多了持久化的功能，更推荐使用这个。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="comment"># "LOCATION": "redis://:xxx@192.168.0.7:6379/3",</span></span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/3"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>这种缓存方式就不怕断电丢失数据了，建表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py createcachetable [cache_table_name]</span><br></pre></td></tr></table></figure>
<p>表名不要和其他冲突就行了，没什么需要注意的了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.db.DatabaseCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'my_cache_table'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h4><p>文件路径需用 绝对路径，并且记得赋予读写权限。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.filebased.FileBasedCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'/var/tmp/django_cache'</span>,</span><br><span class="line">        <span class="comment">#'LOCATION': 'c:/foo/bar',#windows下的示例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="本地内存"><a href="#本地内存" class="headerlink" title="本地内存"></a>本地内存</h4><p>如果有内存有点，但没能力运行memcache，就可以考虑采用本地内存缓存，这个缓存是多进程和线程安全的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.locmem.LocMemCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'unique-snowflake'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>缓存LOCATION用来区分每个内存存储，如果你只有一个本地内存缓存，你可以忽略这个设置；但如果你有多个的时候，你需要至少给他们中一个赋予名字以区分他们。</p>
<p>注意每个进程都有它们自己的私有缓存实例，所以跨进程缓存是不可能的，因此，本地内存缓存不是特别有效率的，建议你只是在内部开发测时使用，不建议在生产环境中使用。</p>
<h4 id="虚拟缓存"><a href="#虚拟缓存" class="headerlink" title="虚拟缓存"></a>虚拟缓存</h4><p>不是真实的缓存，只是实现了缓存的接口而已。当如果你需要在开发和测试中不想使用缓存，但不想修改缓存相关的代码，这种情况就可以使用虚拟缓存了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.dummy.DummyCache'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><p>有些缓存行为需要额外的参数来控制：</p>
<pre><code>TIMEOUT:缓存的默认过期时间，以秒为单位， 这个参数默认是 300 seconds (5 分钟).
OPTIONS: 这个参数应该被传到缓存后端。有效的可选项列表根据缓存的后端不同而不同，由第三方库所支持的缓存将会把这些选项直接配置到底层的缓存库。
    MAX_ENTRIES:高速缓存允许的最大条目数，超出这个数则旧值将被删除. 这个参数默认是300.
    CULL_FREQUENCY:当达到MAX_ENTRIES 的时候,被删除的条目比率。 实际比率是 1 / CULL_FREQUENCY, 所以设置CULL_FREQUENCY 为2会在达到MAX_ENTRIES 所设置值时删去一半的缓存。这个参数应该是整数，默认为 3。 把 CULL_FREQUENCY的值设置为 0 意味着当达到MAX_ENTRIES时,缓存将被清空。
KEY_PREFIX：将自动包含（默认情况下预置为）Django服务器使用的所有缓存键的字符串。
VERSION：由Django服务器生成的缓存键的默认版本号。
KEY_FUNCTION包含函数的虚线路径的字符串，定义如何将前缀，版本和键组成最终缓存键。</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.filebased.FileBasedCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'/var/tmp/django_cache'</span>,</span><br><span class="line">        <span class="string">'TIMEOUT'</span>: <span class="number">60</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'MAX_ENTRIES'</span>: <span class="number">1000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://hongweipeng.com/index.php/archives/1163/" target="_blank" rel="noopener">缓存架构</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django --- 多数据库使用外键错误</title>
    <url>/2020/05/23/django-%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8%E5%A4%96%E9%94%AE%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>在项目中，A数据库中的某张表，想要关联上B数据库的User表，在使用<code>makemigrations</code>和<code>migrate</code>命令时都是正常的，数据表也可创建，但在插入数据，关联User对象时，报了错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unable to save with save_model using database router</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h3><p>在stackoverflow上找到了同样的bug，解释如下：</p>
<p>The problem you are encountering arises from the difficulty of storing relations between objects that are stored in two distinct databases. In your example, you stated that you have created one database to store all Django contributed objects, which includes User objects created by the auth app. Meanwhile, the second model’s objects will be stored in a distinct and entirely separate database. When you attempt to create a relationship between the new object stored in one database and the User object, you are attempting cross-database relations.</p>
<p>Cross-database relations are a difficult problem which has not been solved yet when using multiple databases in Django. If you would like more information about this issue, the Django documentation has a brief note about this problem (copied below for clarity).</p>
<blockquote>
</blockquote>
<pre><code>Django doesn’t currently provide any support for foreign key or many-to-many relationships spanning multiple databases. If you have used a router to partition models to different databases, any foreign key and many-to-many relationships defined by those models must be internal to a single database.

This is because of referential integrity. In order to maintain a relationship between two objects, Django needs to know that the primary key of the related object is valid. If the primary key is stored on a separate database, it’s not possible to easily evaluate the validity of a primary key.

If you’re using Postgres, Oracle, or MySQL with InnoDB, this is enforced at the database integrity level – database level key constraints prevent the creation of relations that can’t be validated.

However, if you’re using SQLite or MySQL with MyISAM tables, there is no enforced referential integrity; as a result, you may be able to ‘fake’ cross database foreign keys. However, this configuration is not officially supported by Django.</code></pre><p>​<br>不想翻译，看的懂就行，总结一句话就是，django没有实现这个功能。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>…那么就不使用外键关联了，直接在A数据库的表中存入一个字段名为<code>user_id</code>的int类型数据即可，虽然之后的操作会稍微绕一下，但并不会影响功能的实现。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/26579231/unable-to-save-with-save-model-using-database-router" target="_blank" rel="noopener">unable-to-save-with-save-model-using-database-router</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>django-rest-framework --- ListSerializer的使用及源码分析</title>
    <url>/2020/05/23/django-rest-framework-ListSerializer%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>想根据不同的情况，例如登录用户的身份，权限等，可添加或删除返回的数据中的字段。</p>
<p>最开始以为只需要定义一个序列化类然后重写data方法即可，但发现返回多条数据时，要删除的字段一直存在。翻看了官方文档，结合源码才发现还需要其他操作。</p>
<p>解决了这个问题，特简单 记录下。</p>
<a id="more"></a>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentListSerializer</span><span class="params">(serializers.ListSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(self)</span>:</span></span><br><span class="line">        _data = super(StudentListSerializer, self).data</span><br><span class="line">        <span class="comment"># 列表</span></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> _data:</span><br><span class="line">            d.pop(<span class="string">'id'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        <span class="comment"># 重要</span></span><br><span class="line">        <span class="comment"># 当序列化操作为many时，调用的序列化类</span></span><br><span class="line">        list_serializer_class = StudentListSerializer</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 单条数据</span></span><br><span class="line">        _data = super(StudentSerializer, self).data</span><br><span class="line">        <span class="comment"># 移除掉id字段</span></span><br><span class="line">        _data.pop(<span class="string">'id'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _data</span><br></pre></td></tr></table></figure>



<h4 id="视图类"><a href="#视图类" class="headerlink" title="视图类"></a>视图类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> pagination</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> demo.serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentView</span><span class="params">(mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                  viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    queryset = Student.objects.all()</span><br><span class="line">    pagination_class = pagination.PageNumberPagination</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDetailView</span><span class="params">(mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                        viewsets.GenericViewSet)</span>:</span></span><br><span class="line">    serializer_class = StudentSerializer</span><br><span class="line">    queryset = Student.objects.all()</span><br></pre></td></tr></table></figure>



<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="ListModelMixin"><a href="#ListModelMixin" class="headerlink" title="ListModelMixin"></a>ListModelMixin</h4><p>在视图中，使用了mixin模式，继承了<code>ListModelMixin</code>类，该类下，在返回序列化对象时，会传入<code>many=True</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListModelMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List a queryset.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 需要返回一组数据，需要传入many=True参数</span></span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>



<h4 id="ger-serializer"><a href="#ger-serializer" class="headerlink" title="ger_serializer"></a>ger_serializer</h4><p>这个没什么好说的，就是返回在View中定义的视图类对象，并传入参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">serializer_class = StudentSerializer</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">    serializer_class = self.get_serializer_class()</span><br><span class="line">    kwargs[<span class="string">'context'</span>] = self.get_serializer_context()</span><br><span class="line">    <span class="keyword">return</span> serializer_class(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> self.serializer_class <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, (</span><br><span class="line">        <span class="string">"'%s' should either include a `serializer_class` attribute, "</span></span><br><span class="line">        <span class="string">"or override the `get_serializer_class()` method."</span></span><br><span class="line">        % self.__class__.__name__</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.serializer_class</span><br></pre></td></tr></table></figure>



<h4 id="data"><a href="#data" class="headerlink" title="data()"></a>data()</h4><p>在返回数据时，都是使用序列化对象调用data方法，像<code>serializer.data</code>。</p>
<p>所以要想添加或删除返回的数据字段时，就需要重写data方法了。</p>
<p><code>ModelSerializer</code>类下没有data方法;</p>
<p><code>ListSerializer</code>下的data方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(self)</span>:</span></span><br><span class="line">    ret = super(ListSerializer, self).data</span><br><span class="line">    <span class="keyword">return</span> ReturnList(ret, serializer=self)</span><br></pre></td></tr></table></figure>

<p>最终都是调用父类<code>BaseSerializer</code>下的data方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> hasattr(self, <span class="string">'initial_data'</span>) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_validated_data'</span>):</span><br><span class="line">        msg = (</span><br><span class="line">            <span class="string">'When a serializer is passed a `data` keyword argument you '</span></span><br><span class="line">            <span class="string">'must call `.is_valid()` before attempting to access the '</span></span><br><span class="line">            <span class="string">'serialized `.data` representation.\n'</span></span><br><span class="line">            <span class="string">'You should either call `.is_valid()` first, '</span></span><br><span class="line">            <span class="string">'or access `.initial_data` instead.'</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">raise</span> AssertionError(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_data'</span>):</span><br><span class="line">        <span class="keyword">if</span> self.instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> getattr(self, <span class="string">'_errors'</span>, <span class="literal">None</span>):</span><br><span class="line">            self._data = self.to_representation(self.instance)</span><br><span class="line">        <span class="keyword">elif</span> hasattr(self, <span class="string">'_validated_data'</span>) <span class="keyword">and</span> <span class="keyword">not</span> getattr(self, <span class="string">'_errors'</span>, <span class="literal">None</span>):</span><br><span class="line">            self._data = self.to_representation(self.validated_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._data = self.get_initial()</span><br><span class="line">    <span class="keyword">return</span> self._data</span><br></pre></td></tr></table></figure>



<h4 id="new"><a href="#new" class="headerlink" title="__new__"></a>__new__</h4><p>在创建序列化对象时，会判断是否传入了<code>many</code>参数，如果为True的话，就会调用<code>many_init</code>方法，最终执行的代码是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断Serializer类中是否定义了Meta类</span></span><br><span class="line">meta = getattr(cls, <span class="string">'Meta'</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 如果Meta中没有设置list_serializer_class字段，那么就默认使用ListSerializer序列化类</span></span><br><span class="line">list_serializer_class = getattr(meta, <span class="string">'list_serializer_class'</span>, ListSerializer)</span><br></pre></td></tr></table></figure>

<p>再回到<code>StudentListSerializer</code>中，如果要想重写<code>data</code>方法生效，那么就需要设置该字段 了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    model = Student</span><br><span class="line">    list_serializer_class = StudentListSerializer</span><br><span class="line">    fields = <span class="string">'__all__'</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> kwargs.pop(<span class="string">'many'</span>, <span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.many_init(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> super(BaseSerializer, cls).__new__(cls, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">many_init</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">    allow_empty = kwargs.pop(<span class="string">'allow_empty'</span>, <span class="literal">None</span>)</span><br><span class="line">    child_serializer = cls(*args, **kwargs)</span><br><span class="line">    list_kwargs = &#123;</span><br><span class="line">        <span class="string">'child'</span>: child_serializer,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> allow_empty <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        list_kwargs[<span class="string">'allow_empty'</span>] = allow_empty</span><br><span class="line">    list_kwargs.update(&#123;</span><br><span class="line">        key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items()</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> LIST_SERIALIZER_KWARGS</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment"># 如果序列化对象中没有设置list_serializer_class属性，那么就使用默认的ListSerializer序列化器</span></span><br><span class="line">    meta = getattr(cls, <span class="string">'Meta'</span>, <span class="literal">None</span>)</span><br><span class="line">    list_serializer_class = getattr(meta, <span class="string">'list_serializer_class'</span>, ListSerializer)</span><br><span class="line">    <span class="keyword">return</span> list_serializer_class(*args, **list_kwargs)</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.django-rest-framework.org/api-guide/serializers/#listserializer" target="_blank" rel="noopener">ListSerializer</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>django --- 多数据库及分库实现</title>
    <url>/2020/05/23/django-%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E5%88%86%E5%BA%93%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>在django项目中, 一个工程中存在多个APP应用很常见. 有时候希望不同的APP连接不同的数据库，这个时候需要建立多个数据库连接。</p>
<h3 id="修改项目的-settings-配置"><a href="#修改项目的-settings-配置" class="headerlink" title="修改项目的 settings 配置"></a>修改项目的 settings 配置</h3><p>在settings.py中配置多个数据库，给个数据库有自己的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'customs'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'xx'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'xx'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'xx.xx.0.10'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'xxx'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'xxx'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'xxx'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'xx.xx.0.10'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'init_command'</span>: <span class="string">'SET storage_engine=MyISAM'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="设置数据库的路由规则方法"><a href="#设置数据库的路由规则方法" class="headerlink" title="设置数据库的路由规则方法"></a>设置数据库的路由规则方法</h3><p>在 settings.py 中配置 DATABASE_ROUTERS</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库分库</span></span><br><span class="line"><span class="comment"># User, Group, HumanRole三张表使用xxx的数据库，其他的使用默认的</span></span><br><span class="line"><span class="comment"># DatabaseAppsRouter是路由类的路径</span></span><br><span class="line">DATABASE_ROUTERS = [<span class="string">'proutils.db_router.DatabaseAppsRouter'</span>]</span><br><span class="line"><span class="comment"># 每个APP要连接哪个数据库，需要在做匹配设置</span></span><br><span class="line"><span class="comment"># 如果没有配置的，将使用default数据库</span></span><br><span class="line">DATABASE_APPS_MAPPING = &#123;</span><br><span class="line">    <span class="string">'auth'</span>: <span class="string">'xxx'</span>,</span><br><span class="line">    <span class="string">'xxx_human'</span>: <span class="string">'xxx'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建数据库路由规则"><a href="#创建数据库路由规则" class="headerlink" title="创建数据库路由规则"></a>创建数据库路由规则</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = 'ChenTao'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">DATABASE_MAPPING = settings.DATABASE_APPS_MAPPING</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseAppsRouter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    数据库分库设置</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    A router to control all database operations on models for different</span></span><br><span class="line"><span class="string">    databases.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    In case an app is not set in settings.DATABASE_APPS_MAPPING, the router</span></span><br><span class="line"><span class="string">    will fallback to the `default` database.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Settings example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    DATABASE_APPS_MAPPING = &#123;'app1': 'db1', 'app2': 'db2'&#125;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_read</span><span class="params">(self, model, **hints)</span>:</span></span><br><span class="line">        <span class="string">""""Point all read operations to the specific database."""</span></span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING[model._meta.app_label]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_for_write</span><span class="params">(self, model, **hints)</span>:</span></span><br><span class="line">        <span class="string">"""Point all write operations to the specific database."""</span></span><br><span class="line">        <span class="keyword">if</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING[model._meta.app_label]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_relation</span><span class="params">(self, obj1, obj2, **hints)</span>:</span></span><br><span class="line">        <span class="string">"""Allow any relation between apps that use the same database."""</span></span><br><span class="line">        db_obj1 = DATABASE_MAPPING.get(obj1._meta.app_label)</span><br><span class="line">        db_obj2 = DATABASE_MAPPING.get(obj2._meta.app_label)</span><br><span class="line">        <span class="keyword">if</span> db_obj1 <span class="keyword">and</span> db_obj2:</span><br><span class="line">            <span class="keyword">if</span> db_obj1 == db_obj2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_syncdb</span><span class="params">(self, db, model)</span>:</span></span><br><span class="line">        <span class="string">"""Make sure that apps only appear in the related database."""</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> DATABASE_MAPPING.values():</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING.get(model._meta.app_label) == db</span><br><span class="line">        <span class="keyword">elif</span> model._meta.app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_migrate</span><span class="params">(self, db, app_label, model=None, **hints)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Make sure the auth app only appears in the 'auth_db'</span></span><br><span class="line"><span class="string">        database.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> db <span class="keyword">in</span> DATABASE_MAPPING.values():</span><br><span class="line">            <span class="keyword">return</span> DATABASE_MAPPING.get(app_label) == db</span><br><span class="line">        <span class="keyword">elif</span> app_label <span class="keyword">in</span> DATABASE_MAPPING:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<h3 id="Models创建样例"><a href="#Models创建样例" class="headerlink" title="Models创建样例"></a>Models创建样例</h3><p>例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanRole</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        app_label = <span class="string">'xxx_human'</span></span><br></pre></td></tr></table></figure>
<p>之后在路由分发的时候，会根据app_label的值从<code>DATABASE_APPS_MAPPING</code>得到不同的数据库名，然后使用。</p>
<h3 id="生成数据表"><a href="#生成数据表" class="headerlink" title="生成数据表"></a>生成数据表</h3><p>在使用django的 migrate 创建生成表的时候，需要加上 –database 参数，如果不加则将 未 指定 app_label 的 APP的models中的表创建到default指定的数据库中,如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py  migrate account --database=db01</span><br></pre></td></tr></table></figure>
<p>以上创建完成后,其它所有的创建、查询、删除等操作就和普通一样操作就可以了,无需再使用类似<br><code>models.User.objects.using(dbname).all(）</code><br>这样的方式来操作</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django --- 日志配置</title>
    <url>/2020/05/23/django-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line">LOGGING &#x3D; &#123;</span><br><span class="line">    # 指明dictConnfig的版本</span><br><span class="line">    &#39;version&#39;: 1,</span><br><span class="line">    # 是否禁用所有的已经存在的日志配置</span><br><span class="line">    &#39;disable_existing_loggers&#39;: True,</span><br><span class="line">    &#39;formatters&#39;: &#123;</span><br><span class="line">        &#39;standard&#39;: &#123;</span><br><span class="line">            # 配置打印log格式</span><br><span class="line">            &#39;format&#39;: &#39;%(asctime)s [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s] %(message)s&#39;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    # 过滤器</span><br><span class="line">    &#39;filters&#39;: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    # 用来定义具体处理日志的方式，可以定义多种</span><br><span class="line">    &#39;handlers&#39;: &#123;</span><br><span class="line">        &#39;mail_admins&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;ERROR&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;django.utils.log.AdminEmailHandler&#39;,</span><br><span class="line">            &#39;include_html&#39;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">        # 默认类型</span><br><span class="line">        &#39;default&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,</span><br><span class="line">            # 保存的文件</span><br><span class="line">            &#39;filename&#39;: &#39;&#123;&#125;&#x2F;Log&#x2F;QWebFX_&#123;&#125;.log&#39;.format(BASE_DIR, datetime.datetime.now().date()),  # 日志输出文件</span><br><span class="line">            # 文件大小</span><br><span class="line">            &#39;maxBytes&#39;: 1024 * 1024 * 5,</span><br><span class="line">            # 备份份数</span><br><span class="line">            &#39;backupCount&#39;: 5,</span><br><span class="line">            # 使用哪种formatters日志格式</span><br><span class="line">            &#39;formatter&#39;: &#39;standard&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;django_backends&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,</span><br><span class="line">            # 保存的文件</span><br><span class="line">            &#39;filename&#39;: &#39;&#123;&#125;&#x2F;Log&#x2F;backends_&#123;&#125;.log&#39;.format(BASE_DIR, datetime.datetime.now().date()),  # 日志输出文件</span><br><span class="line">            # 文件大小</span><br><span class="line">            &#39;maxBytes&#39;: 1024 * 1024 * 5,</span><br><span class="line">            # 备份份数</span><br><span class="line">            &#39;backupCount&#39;: 5,</span><br><span class="line">            # 使用哪种formatters日志格式</span><br><span class="line">            &#39;formatter&#39;: &#39;standard&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;error&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;ERROR&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,</span><br><span class="line">            &#39;filename&#39;: &#39;&#123;&#125;&#x2F;Log&#x2F;Error&#x2F;QWebFX_Error_&#123;&#125;.log&#39;.format(BASE_DIR, datetime.datetime.now().date()),</span><br><span class="line">            &#39;maxBytes&#39;: 1024 * 1024 * 5,</span><br><span class="line">            &#39;backupCount&#39;: 5,</span><br><span class="line">            &#39;formatter&#39;: &#39;standard&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        # 打印log到控制台</span><br><span class="line">        &#39;console&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.StreamHandler&#39;,</span><br><span class="line">            &#39;formatter&#39;: &#39;standard&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;request_handler&#39;: &#123;</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,</span><br><span class="line">            &#39;filename&#39;: &#39;&#123;&#125;&#x2F;Log&#x2F;Request&#x2F;QWebFX_Request_&#123;&#125;.log&#39;.format(BASE_DIR, datetime.datetime.now().date()),</span><br><span class="line">            &#39;maxBytes&#39;: 1024 * 1024 * 5,</span><br><span class="line">            &#39;backupCount&#39;: 5,</span><br><span class="line">            &#39;formatter&#39;: &#39;standard&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;scripts_handler&#39;: &#123;</span><br><span class="line">            # 只有INFO及以上级别的log才会写入文件中</span><br><span class="line">            &#39;level&#39;: &#39;INFO&#39;,</span><br><span class="line">            &#39;class&#39;: &#39;logging.handlers.RotatingFileHandler&#39;,</span><br><span class="line">            &#39;filename&#39;: &#39;&#123;&#125;&#x2F;Log&#x2F;Script&#x2F;QWebFX_Script_&#123;&#125;.log&#39;.format(BASE_DIR, datetime.datetime.now().date()),</span><br><span class="line">            &#39;maxBytes&#39;: 1024 * 1024 * 5,</span><br><span class="line">            &#39;backupCount&#39;: 5,</span><br><span class="line">            &#39;formatter&#39;: &#39;standard&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;loggers&#39;: &#123;</span><br><span class="line">        # django 表示就是django本身默认的控制台输出，就是原本在控制台里面输出的内容</span><br><span class="line">        &#39;django&#39;: &#123;</span><br><span class="line">            # 使用default类型的处理器进行处理</span><br><span class="line">            &#39;handlers&#39;: [&#39;default&#39;],</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;propagate&#39;: False</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;django.request&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;request_handler&#39;],</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;propagate&#39;: False,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;scripts&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;scripts_handler&#39;],</span><br><span class="line">            # 只有INFO及以上级别的消息才会调用此handler</span><br><span class="line">            &#39;level&#39;: &#39;INFO&#39;,</span><br><span class="line">            &#39;propagate&#39;: False</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;console&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;console&#39;],</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;propagate&#39;: True</span><br><span class="line">        &#125;,</span><br><span class="line">        # API&#x2F;Views 模块的日志处理</span><br><span class="line">        &#39;views&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;default&#39;, &#39;error&#39;],</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;propagate&#39;: True</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;util&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;error&#39;],</span><br><span class="line">            &#39;level&#39;: &#39;ERROR&#39;,</span><br><span class="line">            &#39;propagate&#39;: True</span><br><span class="line">        &#125;,</span><br><span class="line">        # 保存所有的数据库操作</span><br><span class="line">        &#39;django.db.backends&#39;: &#123;</span><br><span class="line">            &#39;handlers&#39;: [&#39;django_backends&#39;],  # 指定file handler处理器，表示只写入到文件</span><br><span class="line">            &#39;level&#39;: &#39;DEBUG&#39;,</span><br><span class="line">            &#39;propagate&#39;: True,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>使用方式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">log = logging.getLogger(<span class="string">'views'</span>)</span><br><span class="line">log.debug(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>
<p><code>getLogger</code>中传入的值会获取<code>loggers</code>中的数据，然后根据<code>handler</code>的值执行相应的操作。</p>
<h3 id="level-级别"><a href="#level-级别" class="headerlink" title="level:级别"></a>level:级别</h3><br/>
一个记录器是日志系统的一个实体，每一个记录器是一个已经命名好的可以将消息为进程写入的“桶”。
每一个记录器都会有一个日志等级，每个等级描述了记录器即将处理的信息的严重性，python定义了以下六个等级：
级别值描述
**CRITICAL 50** 关键错误/消息,描述已经发生的严重问题 <br/>
**ERROR 40** 错误,描述已经发生的主要问题 <br/>
**WARNING 30** 警告消息,描述已经发生的小问题 <br/>
**INFO 20** 通知消息,普通的系统信息列表内容 <br/>
**DEBUG 10** 调试,出于调试目的的低层次系统信息 <br/>
**NOTSET 0** 无级别<br/>

<h3 id="处理器-记录器-关键字参数"><a href="#处理器-记录器-关键字参数" class="headerlink" title="处理器/记录器 关键字参数"></a>处理器/记录器 关键字参数</h3><br/>
**filename** 将日志消息附加到指定文件名的文件 <br/>
**filemode** 指定用于打开文件模式, 文件打开方式，在指定了filename时使用这个参数，默认值为“a”还可指定为“w”。 <br/>
**format** 用于生成日志消息的格式字符串 <br/>
**datefmt** 用于输出日期和时间的格式字符串 <br/>
**level** 设置记录器的级别 <br/>
**propagate** 可以基于每个记录器控制该传播。 如果您不希望特定记录器传播到其父项，则可以关闭此行为。 <br/>
**stream** 提供打开的文件，用于把日志消息发送到文件。可以指定输出到sys.stderr,sys.stdout或者文件，默认为sys.stderr。 <br/>
若同时列出了filename和stream两个参数，则stream参数会被忽略。

<h3 id="format-日志消息格式"><a href="#format-日志消息格式" class="headerlink" title="format: 日志消息格式"></a>format: 日志消息格式</h3><br/>
**%(name)s** 记录器的名称 <br/>
**%(levelno)s** 数字形式的日志记录级别 <br/>
**%(levelname)s** 日志记录级别的文本名称 <br/>
**%(filename)s** 执行日志记录调用的源文件的文件名称 <br/>
**%(pathname)s** 执行日志记录调用的源文件的路径名称 <br/>
**%(funcName)s** 执行日志记录调用的函数名称 <br/>
**%(module)s** 执行日志记录调用的模块名称 <br/>
**%(lineno)s** 执行日志记录调用的行号 <br/>
**%(created)s** 执行日志记录的时间 <br/>
**%(asctime)s** 日期和时间 <br/>
**%(msecs)s** 毫秒部分 <br/>
**%(thread)d** 线程ID <br/>
**%(threadName)s** 线程名称 <br/>
**%(process)d** 进程ID <br/>
**%(message)s** 记录的消息<br/>


<h3 id="内置处理器"><a href="#内置处理器" class="headerlink" title="内置处理器"></a>内置处理器</h3><br/>
logging模块提供了一些处理器，可以通过各种方式处理日志消息。使用addHandler()方法将这些处理器添加给Logger对象。另外还可以为每个处理器配置它自己的筛选和级别。 <br/>
**logging.StreamHandler** 可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息 <br/>
**logging.FileHandler** 将日志消息写入文件filename。 <br/>
**logging.handlers.DatagramHandler(host，port)** 发送日志消息给位于制定host和port上的UDP服务器。使用UDP协议，将日志信息发送到网络 <br/>
**logging.handlers.HTTPHandler(host, url)** 使用HTTP的GET或POST方法将日志消息上传到一台HTTP 服务器。 <br/>
**logging.handlers.RotatingFileHandler(filename)** 将日志消息写入文件filename。如果文件的大小超出maxBytes制定的值，那么它将被备份为filenamel。 <br/>
**logging.handlers.SocketHandler** 使用TCP协议，将日志信息发送到网络。 <br/>
**logging.handlers.SysLogHandler** 日志输出到syslog <br/>
**logging.handlers.NTEventLogHandler** 远程输出日志到Windows NT/2000/XP的事件日志 
**logging.handlers.SMTPHandler** 远程输出日志到邮件地址 <br/>
**logging.handlers.MemoryHandler** 日志输出到内存中的制定buffer <br/>
注意：由于内置处理器还有很多，如果想更深入了解。可以查看官方手册。


<h3 id="django提供的内置记录器"><a href="#django提供的内置记录器" class="headerlink" title="django提供的内置记录器"></a>django提供的内置记录器</h3><br/>
**django** 在Django层次结构中的所有消息记录器。没有使用此名称发布消息，而是使用下面的记录器之一。 <br/>
**django.request** 与请求处理相关的日志消息。5xx响应被提升为错误消息；4xx响应被提升为警告消息。 <br/>
**django.server** 与由RunServer命令调用的服务器所接收的请求的处理相关的日志消息。HTTP 5XX响应被记录为错误消息，4XX响应被记录为警告消息，其他一切都被记录为INFO。 <br/>
**django.template** 与模板呈现相关的日志消息 <br/>
**django.db.backends** 有关代码与数据库交互的消息。例如，请求执行的每个应用程序级SQL语句都在调试级别记录到此记录器。<br/>


<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;dev&#x2F;topics&#x2F;logging&#x2F;#topic-logging-parts-formatters</span><br><span class="line">https:&#x2F;&#x2F;www.jb51.net&#x2F;article&#x2F;161439.htm</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_34416649&#x2F;article&#x2F;details&#x2F;87073006</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;haeasringnar&#x2F;article&#x2F;details&#x2F;82053714</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django-rest-framework --- 视图集中附加action的声明</title>
    <url>/2020/05/23/django-rest-framework-%E8%A7%86%E5%9B%BE%E9%9B%86%E4%B8%AD%E9%99%84%E5%8A%A0action%E7%9A%84%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<p>在视图集(<code>ViewSet</code>)中，如果想要让Router自动帮助我们为自定义的动作生成路由信息，需要使用rest_framework.decorators.action装饰器。<br>以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。</p>
<p><code>@action</code>可以接收四个参数: </p>
<ul>
<li>methods: 声明该action对应的请求方式，列表传递</li>
<li>detail: 声明该action的路径是否与单一资源对应，及是否是xxx/<pk>/action方法名/<ul>
<li>True 表示路径格式是xxx/<pk>/action方法名/</li>
<li>False 表示路径格式是xxx/action方法名/</li>
</ul>
</li>
<li>url_path: 重设访问该函数的路径,默认是通过函数名<code>func.__name__</code>来访问</li>
<li>url_name: 改函数对应的name,可用来设置跳转链接,例如revese(‘’)等.</li>
</ul>
<a id="more"></a>

<p>示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBSIndex</span><span class="params">(HandleExceptionMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">               mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">               mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">               viewsets.GenericViewSet)</span>:</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta">    @action(methods=['GET'], detail=True, url_path='test')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_data</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">'message'</span>: <span class="string">'test action'</span>&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'all'</span>, views.BBSIndex, base_name=<span class="string">'articles'</span>)</span><br><span class="line"></span><br><span class="line">url(<span class="string">r''</span>, include(router.urls)),</span><br></pre></td></tr></table></figure>

<p>如果没有设置url_path的话,那么访问该函数的方式为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.60:10000&#x2F;bbs&#x2F;all&#x2F;13&#x2F;test_data&#x2F;</span><br></pre></td></tr></table></figure>
<p>而设置了url_path,则变成了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.0.60:10000&#x2F;bbs&#x2F;all&#x2F;13&#x2F;test&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>django --- 中间件介绍</title>
    <url>/2020/05/23/django-%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在http请求到达函数之前和函数return之后,django会根据自己的规则在合适的时机执行中间件中相应的方法.因为改变的是全局,所以谨慎使用.</p>
<p>中间件是一个与django的请求/响应处理相关的框架,是一种轻的,低层次的”插件”系统,用于django的全局的输入/输出.</p>
<p>如果你想修改请求，例如被传送到view中的HttpRequest对象。<br>或者你想修改view返回的HttpResponse对象，这些都可以通过中间件来实现。<br>可能你还想在view执行之前做一些操作，这种情况就可以用 middleware来实现。</p>
<a id="more"></a>

<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>流程图:<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/55-1.jpg" alt="流程"></p>
<p>在django==1.8.2的django.core.handlers.base.BaseHandler类中,有这么个函数load_middleware,其中有段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_request'</span>):</span><br><span class="line">    request_middleware.append(mw_instance.process_request)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">    self._view_middleware.append(mw_instance.process_view)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">    self._template_response_middleware.insert(<span class="number">0</span>,</span><br><span class="line">mw_instance.process_template_response)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_response'</span>):</span><br><span class="line">    self._response_middleware.insert(<span class="number">0</span>, mw_instance.process_response)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">    self._exception_middleware.insert(<span class="number">0</span>, mw_instance.process_exception)</span><br></pre></td></tr></table></figure>

<p>但在django==2.0中,这部分代码被拆分到了两个类中</p>
<p>django.util.deprecation:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        super().__init__()</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_request'</span>):</span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        response = response <span class="keyword">or</span> self.get_response(request)</span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_response'</span>):</span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>以及, django.core.handlers.base.BaseHandler.load_middleware函数中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">    self._view_middleware.insert(<span class="number">0</span>, mw_instance.process_view)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">self._template_response_middleware.append(mw_instance.process_template_response)</span><br><span class="line"><span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">self._exception_middleware.append(mw_instance.process_exception)</span><br></pre></td></tr></table></figure>

<p>大致流程是,在函数没有返回值的情况下,会按照settings.py中的中间件的顺序先后执行process_request和process_view函数,但执行完视图函数后,会按照逆向顺序执行process_exception,<br>process_template_response 和 process_response.<br>创建完django项目后,会在settings.py中自动添加以下中间件(django1.8.0中是MIDDLEWARE_CLASSES)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>那么在没有任何返回值以及异常的情况下,<br>process_request的执行顺序是<br>SecurityMiddleware–&gt;SessionMiddleware–&gt;CommonMiddleware–&gt;…<br>process_view同上,<br>但后三者的执行顺序会是<br>XFrameOptionMiddleware–&gt;MessageMiddleware–&gt;AuthenticationMiddleware–&gt;…<br>其实从代码就可以大致看出来,前两者用的是<code>append</code>,后三者用的是<code>insert</code>.</p>
<h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><p>按需要实现5个函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">process_request(self,request)</span><br><span class="line">process_view(self, request, view_func, view_args, view_kwargs)</span><br><span class="line">process_template_response(self,request,response)</span><br><span class="line">process_exception(self, request, exception)</span><br><span class="line">process_response(self, request, response)</span><br></pre></td></tr></table></figure>
<p>以上方法的返回值可以是None或一个HttpResponse对象，如果是None，则继续按django定义的规则向后继续执行，如果是HttpResponse对象，则直接将该对象返回给用户。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>md1.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    MiddlewareMixin = object</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareTest1</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'md1.process_request'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'md1.process_view'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'md1.process_template_response'</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(<span class="string">'md1.process_exception'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'md1.process_response'</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>md2.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    MiddlewareMixin = object</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareTest2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'md2.process_request'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, view_func, view_args, view_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'md2.process_view'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'md2.process_template_response'</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(<span class="string">'md2.process_exception'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'md2.process_response'</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'IndexApiView.get'</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'demo/index.html'</span>)</span><br><span class="line">        <span class="comment"># return Response(&#123;'result': True&#125;)</span></span><br></pre></td></tr></table></figure>

<p>需要注意几点:<br>1.<br>MiddlewareMixin在django==1.8.0中是没有的,所以需要捕获异常,重写5个函数跟是否继承MiddlrewareMixin无关<br>2. process_template_response 和 process_response必须要返回一个response值</p>
<h4 id="返回HTML模板"><a href="#返回HTML模板" class="headerlink" title="返回HTML模板"></a>返回HTML模板</h4><p>如果在视图中返回一个html模板,流程会是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md1.process_request</span><br><span class="line">md2.process_request</span><br><span class="line">md1.process_view</span><br><span class="line">md2.process_view</span><br><span class="line">IndexApiView.get</span><br><span class="line">md2.process_response</span><br><span class="line">md1.process_response</span><br></pre></td></tr></table></figure>
<p>没有执行process_exception 和 process_template_response函数.</p>
<h4 id="返回HttpResponse对象"><a href="#返回HttpResponse对象" class="headerlink" title="返回HttpResponse对象"></a>返回HttpResponse对象</h4><p>当返回HttpResponse对象时打印的LOG:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md1.process_request</span><br><span class="line">md2.process_request</span><br><span class="line">md1.process_view</span><br><span class="line">md2.process_view</span><br><span class="line">IndexApiView.get</span><br><span class="line">md2.process_template_response</span><br><span class="line">md1.process_template_response</span><br><span class="line">md2.process_response</span><br><span class="line">md1.process_response</span><br></pre></td></tr></table></figure>
<p>相比上一条,多执行了process_template_response函数</p>
<h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><p>如果在视图中抛出异常:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md1.process_request</span><br><span class="line">md2.process_request</span><br><span class="line">md1.process_view</span><br><span class="line">md2.process_view</span><br><span class="line">IndexApiView.get</span><br><span class="line">md2.process_exception</span><br><span class="line">md1.process_exception</span><br><span class="line">Exception: 抛出异常</span><br><span class="line">md2.process_response</span><br><span class="line">md1.process_response</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="process-request"><a href="#process-request" class="headerlink" title="process_request"></a>process_request</h5><p>1.<br>process_request有一个参数，就是request，这个request和视图函数中的request是一样的。<br>2.<br>它的返回值可以是None也可以是HttpResponse对象。返回值是None的话，按正常流程继续走，交给下一个中间件处理，如果是HttpResponse对象，Django将不执行视图函数，而将相应对象返回给浏览器.<br>3. 中间件的process_request方法是在执行视图函数之前执行的。<br>4.<br>当配置多个中间件时，会按照MIDDLEWARE中的注册顺序，也就是列表的索引值，从前到后依次执行的。<br>不同中间件之间传递的request都是同一个对象<br>5. 返回None,不错任何处理直接进行下一步<br>6. 返回值<br>2.返回响应对象，直接跳出（后续中间件的process_request、不执行urls.py和views.py）返回响应</p>
<h5 id="process-view"><a href="#process-view" class="headerlink" title="process_view"></a>process_view</h5><p>该方法有四个参数<br>request是HttpRequest对象。<br>view_func是Django即将使用的视图函数。<br>（它是实际的函数对象，而不是函数的名称作为字符串。）<br>view_args是将传递给视图的位置参数的列表.<br>view_kwargs是将传递给视图的关键字参数的字典。<br>view_args和view_kwargs都不包含第一个视图参数（request）。<br>Django会在调用视图函数之前调用process_view方法。<br>它应该返回None或一个HttpResponse对象。<br>如果返回None，Django将继续处理这个请求，执行任何其他中间件的process_view方法，然后在执行相应的视图。<br>如果它返回一个HttpResponse对象，Django不会调用适当的视图函数。<br>它将执行中间件的process_response方法并将应用到该HttpResponse并返回结果<br>process_view方法是在process_request之后，视图函数之前执行的，执行顺序按照MIDDLEWARE中的注册顺序从前到后顺序执行的</p>
<ol>
<li>在urls.py之后在执行真正的视图函数之前</li>
<li>按照在列表中注册的顺序依次执行</li>
<li>返回None,放行</li>
<li>返回响应对象，就直接跳出，倒序依次执行所有中间件的process_response方法</li>
</ol>
<h5 id="process-response"><a href="#process-response" class="headerlink" title="process_response"></a>process_response</h5><p>它有两个参数，一个是request，一个是response，request就是上述例子中一样的对象，response是视图函数返回的HttpResponse对象。<br>该方法的返回值也必须是HttpResponse对象。<br>process_response方法是在视图函数之后执行的，并且顺序是逆向的.<br>多个中间件中的process_response方法是按照MIDDLEWARE中的注册顺序倒序执行的，也就是说第一个中间件的process_request方法首先执行，<br>而它的process_response方法最后执行，最后一个中间件的process_request方法最后一个执行，它的process_response方法是最先执行。</p>
<ol>
<li>在views.py返回响应对象之后执行</li>
<li>执行的顺序按照在列表中注册的倒序依次执行</li>
<li>返回值必须要有返回值，返回要是响应对象</li>
</ol>
<h5 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a>process_exception</h5><p>该方法两个参数:一个HttpRequest对象，另一个exception是视图函数异常产生的Exception对象。<br>这个方法只有在视图函数中出现异常了才执行，它返回的值可以是一个None也可以是一个HttpResponse对象。如果是HttpResponse对象，Django将调用模板和中间件中的process_response方法，并返回给浏览器，否则将默认处理异常。如果返回一个None，则交给下一个中间件的process_exception方法来处理异常。它的执行顺序也是按照中间件注册顺序的倒序执行。</p>
<h5 id="process-template-response"><a href="#process-template-response" class="headerlink" title="process_template_response"></a>process_template_response</h5><p>它的参数，一个HttpRequest对象，response是TemplateResponse对象（由视图函数或者中间件产生）。<br>process_template_response是在视图函数执行完成后立即执行，但是它有一个前提条件，那就是视图函数返回的对象有一个render()方法<br>视图函数执行完之后，立即执行了中间件的process_template_response方法，顺序是倒序，先执行MD1的，在执行MD2的，接着执行了视图函数返回的HttpResponse对象的render方法，返回了一个新的HttpResponse对象，接着执行中间件的process_response方法。</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol>
<li>request请求经过WSGI后，先进入中间件，依然开始先走process_request函数，然后走路由关系映射后，这里注意并没有直接进入视图函数，而是从头开始执行process_view()函数；然后再去执行与urls.py匹配的视图函数；</li>
<li>如果视图函数没有报错，那就直接挨个反过来从最后一个中间件开始，依次将返回的实例对象(也就是我们在视图函数中写的<br>return HttpResponse()等等)传递给每个中间件的process_response函数；最后再交给客户端浏览器；</li>
<li>如果执行视图函数出错，那就反过来从最后一个中间件开始，将错误信息传递给每个中间件的process_exception()函数，走完所有后，然后最终再走procss_response后，最终再交给客户端浏览器注意：视图函数的错误是由process_exception()函数处理的，从最后一个中间件开始，依次逐级提交捕捉到的异常然后最终交给procss_response()函数，将最终的错误信息交给客户端浏览器。</li>
<li>过程<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/55-2.jpg" alt="过程"></li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/39275116</span><br><span class="line">https://blog.csdn.net/mbl114/article/details/78220606</span><br><span class="line">https://blog.csdn.net/lm_is_dc/article/details/80527298</span><br><span class="line">https://code.ziqiangxuetang.com/django/django-middleware.html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉查找树转变为有序双向链表</title>
    <url>/2020/05/23/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E8%BD%AC%E5%8F%98%E4%B8%BA%E6%9C%89%E5%BA%8F%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>一道微软的面试题: 输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-5-24 22:40</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, left=None, right=None)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree2DoubleLink</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.root:</span><br><span class="line">            self.root = Node(value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.__insert(value, self.root)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__insert</span><span class="params">(self, value, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            node = Node(value)</span><br><span class="line">        <span class="keyword">elif</span> value &lt;= node.value:</span><br><span class="line">            node.left = self.__insert(value, node.left)</span><br><span class="line">        <span class="keyword">elif</span> value &gt; node.value:</span><br><span class="line">            node.right = self.__insert(value, node.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mid_order</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># 中序遍历</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            self.mid_order(node.left)</span><br><span class="line">            print(node.value, end=<span class="string">' '</span>)</span><br><span class="line">            self.mid_order(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tree_to_link</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="comment"># 将二叉排序树转成双向链表</span></span><br><span class="line">        <span class="comment"># 添加</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'head'</span>):</span><br><span class="line">            <span class="comment"># 头结点</span></span><br><span class="line">            self.head = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># 移动的节点</span></span><br><span class="line">            self.cur = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 中序遍历</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            self.tree_to_link(node.left)</span><br><span class="line">            <span class="comment"># 创建头结点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">                self.head = node</span><br><span class="line">            <span class="comment"># 移动的节点</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> self.cur:</span><br><span class="line">                self.cur = node</span><br><span class="line">                <span class="comment"># 头结点指向第二个节点</span></span><br><span class="line">                self.head.right = self.cur</span><br><span class="line">                <span class="comment"># 第二个节点的左指针指向头节点</span></span><br><span class="line">                self.cur.left = self.head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 前一个节点的右指针指向当前节点</span></span><br><span class="line">                self.cur.right = node</span><br><span class="line">                <span class="comment"># 当前节点的左指针指向前一个节点</span></span><br><span class="line">                node.left = self.cur</span><br><span class="line">                <span class="comment"># 替换</span></span><br><span class="line">                self.cur = node</span><br><span class="line">            self.tree_to_link(node.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tree = Tree2DoubleLink()</span><br><span class="line">    <span class="comment"># 随机输入</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]:</span><br><span class="line">        tree.insert(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    tree.mid_order(tree.root)</span><br><span class="line">    print(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转成双向链表</span></span><br><span class="line">    head = tree.tree_to_link(tree.root)</span><br><span class="line">    <span class="comment"># 从头节点开始输出</span></span><br><span class="line">    <span class="keyword">while</span> head <span class="keyword">and</span> head.right:</span><br><span class="line">        print(head.value, end=<span class="string">' '</span>)</span><br><span class="line">        head = head.right</span><br><span class="line">    print(head.value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从尾节点开始输出</span></span><br><span class="line">    tail = head</span><br><span class="line">    <span class="keyword">while</span> tail:</span><br><span class="line">        print(tail.value, end=<span class="string">' '</span>)</span><br><span class="line">        tail = tail.left</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>判断单链表是否有环的两种方法</title>
    <url>/2020/05/23/%E5%88%A4%E6%96%AD%E5%8D%95%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有环单链表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, next=None)</span>:</span></span><br><span class="line">      self.data = data</span><br><span class="line">      self.next = next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleLinklist</span><span class="params">(object)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      self.head = <span class="literal">None</span></span><br><span class="line">      self.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, node)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> self.length == <span class="number">0</span>:</span><br><span class="line">         self.head = node</span><br><span class="line">         self.length += <span class="number">1</span></span><br><span class="line">         <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      cur = self.head</span><br><span class="line">      <span class="keyword">while</span> cur.next:</span><br><span class="line">         cur = cur.next</span><br><span class="line"></span><br><span class="line">      cur.next = node</span><br><span class="line">      self.length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self)</span>:</span></span><br><span class="line">      cur = self.head</span><br><span class="line">      <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         print(cur.data)</span><br><span class="line">         cur = cur.next</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">judge_circle_quick_slow_pointer</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="string">"""</span></span><br><span class="line"><span class="string">      判断单链表是否有环</span></span><br><span class="line"><span class="string">      如果在某个时候,快指针追上了慢指针,那么便说明有环</span></span><br><span class="line"><span class="string">      """</span></span><br><span class="line">      <span class="comment"># 快指针,每次走两个节点</span></span><br><span class="line">      quick = self.head</span><br><span class="line">      <span class="comment"># 慢指针,每次走一个节点</span></span><br><span class="line">      slow = self.head</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 标志,判断是否有环</span></span><br><span class="line">      flag = <span class="literal">False</span></span><br><span class="line">      <span class="comment"># 每个指针的步数</span></span><br><span class="line">      count = <span class="number">0</span></span><br><span class="line">      <span class="comment"># 加上try-except，因为在没环的情况下，快指针会出错</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">         <span class="comment"># 循环终止条件,如果某个节点的next为空,就说明没有环了</span></span><br><span class="line">         <span class="keyword">while</span> quick.next.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> slow.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 排除第一次相等的情况</span></span><br><span class="line">            <span class="comment"># 用后面那个条件做判断不是个好想法，万一环的起点就是head，然后节点个数又是偶数的话，不会停止了吧</span></span><br><span class="line">            <span class="keyword">if</span> quick.data == slow.data <span class="keyword">and</span> count != <span class="number">1</span>:  <span class="comment"># quick != self.head</span></span><br><span class="line">               print(<span class="string">'快指针追上慢指针时的节点的值: '</span>,quick.data)</span><br><span class="line">               flag = <span class="literal">True</span></span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 一次跨两个节点</span></span><br><span class="line">            quick = quick.next.next</span><br><span class="line">            <span class="comment"># 一次跨一个节点</span></span><br><span class="line">            slow = slow.next</span><br><span class="line">      <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">         print(e.args)</span><br><span class="line">         print(<span class="string">'quick条件报错，说明没有环'</span>)</span><br><span class="line">      <span class="keyword">finally</span>:</span><br><span class="line">         print(<span class="string">'步数: '</span>, count)</span><br><span class="line">         print(<span class="string">'是否有环: '</span>, flag)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">judge_circle_by_traversing</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="string">"""</span></span><br><span class="line"><span class="string">      将每个遍历过的节点保存到集合中，如果下一次遍历的节点在集合中了，就说明有环</span></span><br><span class="line"><span class="string">      这个方法很傻，但却可以得到环的点是哪个</span></span><br><span class="line"><span class="string">      快慢指针只能判断是否有环，不能得到环的起点</span></span><br><span class="line"><span class="string">      """</span></span><br><span class="line">      nodes = []</span><br><span class="line">      cur = self.head</span><br><span class="line">      <span class="keyword">while</span> cur <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         <span class="keyword">if</span> cur <span class="keyword">not</span> <span class="keyword">in</span> nodes:</span><br><span class="line">            nodes.append(cur)</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'有环，环的值是: '</span>, cur.data)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         cur = cur.next</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">         print(<span class="string">'没有环'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   cl = CircleLinklist()</span><br><span class="line">   nodes = []</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'ABCDEFGHIJKLMN'</span>:</span><br><span class="line">      nodes.append(Node(i))</span><br><span class="line">   nodes[len(nodes) - <span class="number">1</span>].next = nodes[<span class="number">5</span>]  <span class="comment"># 将最后一个节点的next指向F</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">      cl.insert(node)</span><br><span class="line"></span><br><span class="line">   <span class="comment"># cl.traverse()</span></span><br><span class="line"></span><br><span class="line">   cl.judge_circle_quick_slow_pointer()</span><br><span class="line">   print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line">   cl.judge_circle_by_traversing()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>django-rest-framework --- 限流</title>
    <url>/2020/05/23/django-rest-framework-%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>限流就是限制访问,就是通常一个用户在多次请求一个页面，或者点击一个链接的时候，前几次点击是没有问题的，但是一旦连续几次之后，就会出现访问受限，离下一次访问还有50秒等的字样，在django<br>rest framework 中有一个专门的组件来做限制访问.</p>
<a id="more"></a>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="自定义Throttle类"><a href="#自定义Throttle类" class="headerlink" title="自定义Throttle类"></a>自定义Throttle类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllUserThrottle</span><span class="params">(throttling.SimpleRateThrottle)</span>:</span></span><br><span class="line">    <span class="comment"># 使用的缓存方式</span></span><br><span class="line">    cache = cache</span><br><span class="line">    <span class="comment"># 必填</span></span><br><span class="line">    scope = <span class="string">'all_user'</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">            <span class="comment"># 如果是登录用户,则使用scope=user</span></span><br><span class="line">            AllUserThrottle.scope = <span class="string">'user'</span></span><br><span class="line">            ident = request.user.username</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果是未登录用户,则使用scope='anonymous'</span></span><br><span class="line">            AllUserThrottle.scope = <span class="string">'anonymous'</span></span><br><span class="line">            ident = self.get_ident(request)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> self.cache_format % &#123;</span><br><span class="line">            <span class="string">'scope'</span>: self.scope,</span><br><span class="line">            <span class="string">'ident'</span>: ident</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class="line">        <span class="string">'anonymous'</span>: <span class="string">'5/m'</span>,</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'10/m'</span>,</span><br><span class="line">        <span class="string">'all_user'</span>: <span class="string">'15/m'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThrottleApiView</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    queryset = UserInfo.objects.all()</span><br><span class="line">    <span class="comment"># 使用限流的方式</span></span><br><span class="line">    throttle_classes = [AllUserThrottle]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        userinfo = [qs.user.username <span class="keyword">for</span> qs <span class="keyword">in</span> self.get_queryset()]</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> JsonResponse(json.dumps(userinfo), safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>当用户登录状态访问ThrottleApiView时,只能每分钟访问10次,如果是未登录状态访问,只能每分钟访问5次.<br>上面的代码写法没太大必要,可以仿照drf的AnonRateThrottle和UserRateThrottle,根据不同的状态来调用不同的限流类,而不是用一个限流类根据不同的状态来使用不同的scope,太低级了.</p>
<h3 id="AnonRateThrottle-和-UserRateThrottle"><a href="#AnonRateThrottle-和-UserRateThrottle" class="headerlink" title="AnonRateThrottle 和 UserRateThrottle"></a>AnonRateThrottle 和 UserRateThrottle</h3><p>对于根据用户是否登录来限制访问次数,drf提供了AnonRateThrottle 和<br>UserRateThrottle两个类,只需要在配置文件中配置下即可限制登录用户访问10次/分钟,未登录用户限制5次/分钟了.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_THROTTLE_CLASSES&#39;:[</span><br><span class="line">      &#39;rest_framework.throttling.AnonRateThrottle&#39;,</span><br><span class="line">      &#39;rest_framework.throttling.UserRateThrottle&#39;,</span><br><span class="line">    ],</span><br><span class="line">    &#39;DEFAULT_THROTTLE_RATES&#39;: &#123;</span><br><span class="line">        &#39;anon&#39;: &#39;5&#x2F;m&#39;,</span><br><span class="line">        &#39;user&#39;: &#39;10&#x2F;m&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然,不推荐上述写法,最好把限流类写入视图类中,不要全局定义.</p>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><h4 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h4><p>rest_framework.views.APIView:<br>会在初始化时,检查限流</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initial</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    self.check_throttles(request)</span><br></pre></td></tr></table></figure>
<h4 id="check-throttles"><a href="#check-throttles" class="headerlink" title="check_throttles"></a>check_throttles</h4><p>rest_framework.views.APIView:<br>会获取自定义的throttle_classes列表(如果没有则使用默认的),调用allow_request函数判断是否被限流,如果限流了就<br>抛出异常,并提示还需要多久才能再次访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_throttles</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Check if request should be throttled.</span></span><br><span class="line"><span class="string">    Raises an appropriate exception if the request is throttled.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> throttle <span class="keyword">in</span> self.get_throttles():</span><br><span class="line">        <span class="comment"># 当返回None或者False会抛出异常</span></span><br><span class="line">        <span class="comment"># 返回为True,表示可以正常访问</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> throttle.allow_request(request, self):</span><br><span class="line">            self.throttled(request, throttle.wait())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取throttle_class列表数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_throttles</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Instantiates and returns the list of throttles that this view uses.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> [throttle() <span class="keyword">for</span> throttle <span class="keyword">in</span> self.throttle_classes]</span><br><span class="line"><span class="comment"># 默认值</span></span><br><span class="line">throttle_classes = api_settings.DEFAULT_THROTTLE_CLASSES</span><br></pre></td></tr></table></figure>

<h4 id="SimpleRateThrottle"><a href="#SimpleRateThrottle" class="headerlink" title="SimpleRateThrottle"></a>SimpleRateThrottle</h4><p>rest_framework.throttling:<br>一般我们自定义限流类都会继承该类,并且重写scope属性,以及get_cache_key()函数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleRateThrottle</span><span class="params">(BaseThrottle)</span>:</span></span><br><span class="line">    <span class="comment"># 使用哪种缓存</span></span><br><span class="line">    cache = default_cache</span><br><span class="line">    <span class="comment"># 时间戳</span></span><br><span class="line">    timer = time.time</span><br><span class="line">    <span class="comment"># 存入缓存时的key值</span></span><br><span class="line">    cache_format = <span class="string">'throttle_%(scope)s_%(ident)s'</span></span><br><span class="line">    <span class="comment"># 自定义时必须重写</span></span><br><span class="line">    scope = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 频率设置 &#123; ‘user’: ‘10/m’ &#125;</span></span><br><span class="line">    THROTTLE_RATES = api_settings.DEFAULT_THROTTLE_RATES</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(self, <span class="string">'rate'</span>, <span class="literal">None</span>):</span><br><span class="line">            self.rate = self.get_rate()</span><br><span class="line">        <span class="comment"># 配置文件中一定访问时间内的访问次数</span></span><br><span class="line">        self.num_requests, self.duration = self.parse_rate(self.rate)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 自定义时必须重写,放回某限流下的唯一值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">'.get_cache_key() must be overridden'</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_rate</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 没有scope时抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> getattr(self, <span class="string">'scope'</span>, <span class="literal">None</span>):</span><br><span class="line">            msg = (<span class="string">"You must set either `.scope` or `.rate` for '%s'</span></span><br><span class="line"><span class="string">throttle"</span> %</span><br><span class="line">                   self.__class__.__name__)</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 返回频率,类似 ‘10/m’之类</span></span><br><span class="line">            <span class="keyword">return</span> self.THROTTLE_RATES[self.scope]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            msg = <span class="string">"No default throttle rate set for '%s' scope"</span> %</span><br><span class="line">self.scope</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(msg)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 返回频率元祖</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_rate</span><span class="params">(self, rate)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">        num, period = rate.split(<span class="string">'/'</span>)</span><br><span class="line">        num_requests = int(num)</span><br><span class="line">        duration = &#123;<span class="string">'s'</span>: <span class="number">1</span>, <span class="string">'m'</span>: <span class="number">60</span>, <span class="string">'h'</span>: <span class="number">3600</span>, <span class="string">'d'</span>: <span class="number">86400</span>&#125;[period[<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">return</span> (num_requests, duration)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">allow_request</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="comment"># 是否限制访问频率</span></span><br><span class="line">        <span class="comment"># 当限制的频率为空时,不会抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> self.rate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 获取用户的唯一标志</span></span><br><span class="line">        self.key = self.get_cache_key(request, view)</span><br><span class="line">        <span class="keyword">if</span> self.key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 获取用户的历史访问次数</span></span><br><span class="line">        self.history = self.cache.get(self.key, [])</span><br><span class="line">        <span class="comment"># 当前时间</span></span><br><span class="line">        self.now = self.timer()</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">如果之前已经访问过该链接,但距离当前时间最长的一次访问超过了duration,</span><br><span class="line">        <span class="comment"># 就将其删除</span></span><br><span class="line">        <span class="comment"># 循环判断</span></span><br><span class="line">        <span class="keyword">while</span> self.history <span class="keyword">and</span> self.history[<span class="number">-1</span>] &lt;= self.now -</span><br><span class="line">self.duration:</span><br><span class="line">            self.history.pop()</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">删除<span class="string">"过期"</span>时间后,剩下的访问次数仍然大于等于限制次数,那么就限制访问</span><br><span class="line">        <span class="keyword">if</span> len(self.history) &gt;= self.num_requests:</span><br><span class="line">            <span class="keyword">return</span> self.throttle_failure()</span><br><span class="line">        <span class="comment"># 正常访问</span></span><br><span class="line">        <span class="keyword">return</span> self.throttle_success()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 可以正常访问</span></span><br><span class="line">    <span class="comment"># 将访问时间插入列表首位</span></span><br><span class="line">    <span class="comment"># 更新缓存信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttle_success</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.history.insert(<span class="number">0</span>, self.now)</span><br><span class="line">        self.cache.set(self.key, self.history, self.duration)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 限制访问</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">throttle_failure</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 不可访问时的等待时间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 如果有访问记录,就返回限制时间-最新一次访问时间</span></span><br><span class="line">        <span class="comment"># 否则返回总的限制时间</span></span><br><span class="line">        <span class="keyword">if</span> self.history:</span><br><span class="line">            remaining_duration = self.duration - (self.now -</span><br><span class="line">self.history[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            remaining_duration = self.duration</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># TODO 没看懂</span></span><br><span class="line">        available_requests = self.num_requests - len(self.history) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> available_requests &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> remaining_duration / float(available_requests)</span><br></pre></td></tr></table></figure>

<h4 id="get-ident"><a href="#get-ident" class="headerlink" title="get_ident"></a>get_ident</h4><p>rest_framework.BaseThrottle:<br>如果用户没有返回唯一的值,那么可以调用该函数,用ip地址做唯一值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ident</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    xff = request.META.get(<span class="string">'HTTP_X_FORWARDED_FOR'</span>)</span><br><span class="line">    remote_addr = request.META.get(<span class="string">'REMOTE_ADDR'</span>)</span><br><span class="line">    num_proxies = api_settings.NUM_PROXIES</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> num_proxies <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> num_proxies == <span class="number">0</span> <span class="keyword">or</span> xff <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> remote_addr</span><br><span class="line">        addrs = xff.split(<span class="string">','</span>)</span><br><span class="line">        client_addr = addrs[-min(num_proxies, len(addrs))]</span><br><span class="line">        <span class="keyword">return</span> client_addr.strip()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(xff.split()) <span class="keyword">if</span> xff <span class="keyword">else</span> remote_addr</span><br></pre></td></tr></table></figure>

<h4 id="drf定义限流类介绍"><a href="#drf定义限流类介绍" class="headerlink" title="drf定义限流类介绍"></a>drf定义限流类介绍</h4><p>rest_framework.throttling:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRateThrottle</span><span class="params">(SimpleRateThrottle)</span>:</span></span><br><span class="line">    scope = <span class="string">'user'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="comment"># 如果登录了,则返回pk</span></span><br><span class="line">        <span class="comment"># 否则返回ip</span></span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">            ident = request.user.pk</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ident = self.get_ident(request)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 需要拼接字符串</span></span><br><span class="line">        <span class="keyword">return</span> self.cache_format % &#123;</span><br><span class="line">            <span class="string">'scope'</span>: self.scope,</span><br><span class="line">            <span class="string">'ident'</span>: ident</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonRateThrottle</span><span class="params">(SimpleRateThrottle)</span>:</span></span><br><span class="line">    scope = <span class="string">'anon'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span><span class="params">(self, request, view)</span>:</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">为了避免与user的冲突,如果在设置anon时,如果已经登录了,那么就返回<span class="literal">None</span>,不记录次数</span><br><span class="line">        <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># Only throttle unauthenticated requests.</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 拼接字符串</span></span><br><span class="line">        <span class="keyword">return</span> self.cache_format % &#123;</span><br><span class="line">            <span class="string">'scope'</span>: self.scope,</span><br><span class="line">            <span class="string">'ident'</span>: self.get_ident(request)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义throttle异常"><a href="#自定义throttle异常" class="headerlink" title="自定义throttle异常"></a>自定义throttle异常</h4><p>在APIView类下有个throttled()函数,重写该函数就可实现自定义异常<br>rest_framework.views.APIView:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">throttled</span><span class="params">(self, request, wait)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    If request is throttled, determine what kind of exception to raise.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">raise</span> exceptions.Throttled(wait)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># rest_framework.exceptions:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Throttled</span><span class="params">(APIException)</span>:</span></span><br><span class="line">    status_code = status.HTTP_429_TOO_MANY_REQUESTS</span><br><span class="line">    default_detail = _(<span class="string">'Request was throttled.'</span>)</span><br><span class="line">    extra_detail_singular = <span class="string">'Expected available in &#123;wait&#125; second.'</span></span><br><span class="line">    extra_detail_plural = <span class="string">'Expected available in &#123;wait&#125; seconds.'</span></span><br><span class="line">    default_code = <span class="string">'throttled'</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, wait=None, detail=None, code=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> detail <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            detail = force_text(self.default_detail)</span><br><span class="line">        <span class="keyword">if</span> wait <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            wait = math.ceil(wait)</span><br><span class="line">            detail = <span class="string">' '</span>.join((</span><br><span class="line">                detail,</span><br><span class="line">force_text(ungettext(self.extra_detail_singular.format(wait=wait),</span><br><span class="line">self.extra_detail_plural.format(wait=wait),</span><br><span class="line">                                     wait))))</span><br><span class="line">        self.wait = wait</span><br><span class="line">        super(Throttled, self).__init__(detail, code)</span><br></pre></td></tr></table></figure>
<p>例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">throttled</span><span class="params">(self, request, wait)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyThrottled</span><span class="params">(exceptions.Throttled)</span>:</span></span><br><span class="line">        default_detail = <span class="string">'请求被限制.'</span></span><br><span class="line">        extra_detail_singular = <span class="string">'Expected available in &#123;wait&#125; second.'</span></span><br><span class="line">        extra_detail_plural = <span class="string">'还需要再等待&#123;wait&#125;'</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">raise</span> MyThrottled(wait)</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;cjaaron&#x2F;p&#x2F;10443725.html</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;eric_yi&#x2F;p&#x2F;8424424.html</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_42487752&#x2F;article&#x2F;details&#x2F;85328307</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;supery007&#x2F;p&#x2F;8423769.html</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;welan&#x2F;p&#x2F;10138615.html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>django --- 请求到响应源码分析</title>
    <url>/2020/05/23/django-%E8%AF%B7%E6%B1%82%E5%88%B0%E5%93%8D%E5%BA%94%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>web应用或者网站本质上都是围绕着请求-响应的方式来运作的。当你通过浏览器访问网站时，浏览器会向web服务器发送请求。当web服务器收到请求后，服务器会对请求进行相应的处理，然后返回相应的响应给浏览器，最后浏览器呈现给你。</p>
<h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>这是web服务器转发请求到django应用的地方，也是返回响应的地方。</p>
<p>路径: <code>xxx.wsgi.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core.wsgi <span class="keyword">import</span> get_wsgi_application</span><br><span class="line"><span class="comment"># 设置django要使用的配置文件</span></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'JwtDemo.settings'</span>)</span><br><span class="line"></span><br><span class="line">application = get_wsgi_application()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="WSGIHandler"><a href="#WSGIHandler" class="headerlink" title="WSGIHandler"></a>WSGIHandler</h3><p>初始化请求，并返回响应数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        <span class="comment"># 加载django应用中配置的中间件，该方法是父类BaseHandler中的</span></span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        set_script_prefix(get_script_name(environ))</span><br><span class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">        <span class="comment"># 初始化request请求</span></span><br><span class="line">        request = self.request_class(environ)</span><br><span class="line">        <span class="comment"># 开始处理请求，并生成响应</span></span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        response._handler_class = self.__class__</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 状态码，状态描述</span></span><br><span class="line">        status = <span class="string">'%d %s'</span> % (response.status_code, response.reason_phrase)</span><br><span class="line">        <span class="comment"># 响应头信息</span></span><br><span class="line">        response_headers = list(response.items())</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> response.cookies.values():</span><br><span class="line">            response_headers.append((<span class="string">'Set-Cookie'</span>, c.output(header=<span class="string">''</span>)))</span><br><span class="line">        start_response(status, response_headers)</span><br><span class="line">        <span class="keyword">if</span> getattr(response, <span class="string">'file_to_stream'</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> environ.get(<span class="string">'wsgi.file_wrapper'</span>):</span><br><span class="line">            response = environ[<span class="string">'wsgi.file_wrapper'</span>](response.file_to_stream)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="加载中间件"><a href="#加载中间件" class="headerlink" title="加载中间件"></a>加载中间件</h3><h4 id="load-middleware"><a href="#load-middleware" class="headerlink" title="load_middleware"></a>load_middleware</h4><p>路径:<code>django.core.handlers.base.BaseHandler.load_middleware</code><br>WSGIHandler中调用的load_middleware函数是父类BaseHandler中的，在这个函数中，会按顺序加载所有配置的中间件。<br>主循环会对所有的中间件逆序遍历，而将中间件函数加入列表的顺序也跟实际的执行顺序一致。<br><code>process_view</code>会按照中间件的先后顺序执行，所以采用了insert(0,xx),而<code>process_template_response</code>和<code>process_exception</code>则采用了append操作。<br>这个看着有点绕..<br>以下面的中间件配置为例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>因为采用了逆序遍历，那么执行顺序就是<code>XFrameOptionsMiddleware -&gt; MessageMiddleware -&gt; ... -&gt;SecurityMiddleware</code>，而<code>process_view</code>采用了insert(0,xx)的方法，所以<code>_view_middleware</code>中<code>process_view</code>函数的顺序就是<code>SecurityMiddleware.process_view -&gt; ... -&gt; SecurityMiddleware.process_view</code>了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_middleware</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 加载中间件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中间件中的process_view函数列表</span></span><br><span class="line">    self._view_middleware = []</span><br><span class="line">    <span class="comment"># 中间件中的process_template_response函数列表</span></span><br><span class="line">    self._template_response_middleware = []</span><br><span class="line">    <span class="comment"># 中间件中的process_exception函数列表</span></span><br><span class="line">    self._exception_middleware = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是一个装饰器，装饰器内返回了response，只不过包裹了exception数据</span></span><br><span class="line">    handler = convert_exception_to_response(self._get_response)</span><br><span class="line">    <span class="comment"># middleware_path是字符串</span></span><br><span class="line">    <span class="keyword">for</span> middleware_path <span class="keyword">in</span> reversed(settings.MIDDLEWARE):</span><br><span class="line">        <span class="comment"># 转换成具体的类</span></span><br><span class="line">        middleware = import_string(middleware_path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            mw_instance = middleware(handler)</span><br><span class="line">        <span class="keyword">except</span> MiddlewareNotUsed <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">                <span class="keyword">if</span> str(exc):</span><br><span class="line">                    logger.debug(<span class="string">'MiddlewareNotUsed(%r): %s'</span>, middleware_path, exc)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logger.debug(<span class="string">'MiddlewareNotUsed: %r'</span>, middleware_path)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mw_instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                <span class="string">'Middleware factory %s returned None.'</span> % middleware_path</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对不同的中间件函数，使用不同的插入顺序，随他们的处理顺序</span></span><br><span class="line">        <span class="comment"># process_view正序插入</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">            self._view_middleware.insert(<span class="number">0</span>, mw_instance.process_view)</span><br><span class="line">        <span class="comment"># process_template_response逆序插入</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">            self._template_response_middleware.append(mw_instance.process_template_response)</span><br><span class="line">        <span class="comment"># process_exception逆序插入</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">            self._exception_middleware.append(mw_instance.process_exception)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新处理</span></span><br><span class="line">        handler = convert_exception_to_response(mw_instance)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是一个修饰器函数，最内层是_get_response，外层是中间件</span></span><br><span class="line">    self._middleware_chain = handler</span><br></pre></td></tr></table></figure>

<h4 id="MiddlewareMixin"><a href="#MiddlewareMixin" class="headerlink" title="MiddlewareMixin"></a>MiddlewareMixin</h4><p>使用了mixin模式，当自定义中间件时，需要自己实现<code>process_request</code>和<code>process_response</code>两个函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 处理proecess_request函数</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_request'</span>):</span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        response = response <span class="keyword">or</span> self.get_response(request)</span><br><span class="line">        <span class="comment"># 处理process_response函数</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_response'</span>):</span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h4 id="get-response"><a href="#get-response" class="headerlink" title="get_response"></a>get_response</h4><p>路径:<code>django.core.handlers.base.get_response</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"""Return an HttpResponse object for the given HttpRequest."""</span></span><br><span class="line">    <span class="comment"># 设置开始位置的url</span></span><br><span class="line">    set_urlconf(settings.ROOT_URLCONF)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 包装了self._get_response的装饰器</span></span><br><span class="line">    response = self._middleware_chain(request)</span><br><span class="line"></span><br><span class="line">    response._closable_objects.append(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the exception handler returns a TemplateResponse that has not</span></span><br><span class="line">    <span class="comment"># been rendered, force it to be rendered.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> getattr(response, <span class="string">'is_rendered'</span>, <span class="literal">True</span>) <span class="keyword">and</span> callable(getattr(response, <span class="string">'render'</span>, <span class="literal">None</span>)):</span><br><span class="line">        response = response.render()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code &gt;= <span class="number">400</span>:</span><br><span class="line">        log_response(</span><br><span class="line">            <span class="string">'%s: %s'</span>, response.reason_phrase, request.path,</span><br><span class="line">            response=response,</span><br><span class="line">            request=request,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h4 id="get-response-1"><a href="#get-response-1" class="headerlink" title="_get_response"></a>_get_response</h4><p>路径: <code>django.core.handlers.base._get_response</code><br>这个函数是真正的调用视图函数或者视图类的地方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_response</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Resolve and call the view, then apply view, exception, and</span></span><br><span class="line"><span class="string">    template_response middleware. This method is everything that happens</span></span><br><span class="line"><span class="string">    inside the request/response middleware.</span></span><br><span class="line"><span class="string">    实际上调用视图函数的地方</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    response = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> hasattr(request, <span class="string">'urlconf'</span>):</span><br><span class="line">        urlconf = request.urlconf</span><br><span class="line">        set_urlconf(urlconf)</span><br><span class="line">        resolver = get_resolver(urlconf)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resolver = get_resolver()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过url操作，获取实际的执行函数</span></span><br><span class="line">    resolver_match = resolver.resolve(request.path_info)</span><br><span class="line">    callback, callback_args, callback_kwargs = resolver_match</span><br><span class="line">    request.resolver_match = resolver_match</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行proecess_view中间件函数</span></span><br><span class="line">    <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._view_middleware:</span><br><span class="line">        <span class="comment"># 调用process_view函数</span></span><br><span class="line">        response = middleware_method(request, callback, callback_args, callback_kwargs)</span><br><span class="line">        <span class="comment"># 如果某个中间件的process_view返回了值，那么就停止继续执行</span></span><br><span class="line">        <span class="keyword">if</span> response:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># callback是实际上要执行的视图函数或者视图类</span></span><br><span class="line">        wrapped_callback = self.make_view_atomic(callback)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 执行实际函数，获取返回的response</span></span><br><span class="line">            response = wrapped_callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            response = self.process_exception_by_middleware(e, request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Complain if the view returned None (a common error).</span></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> isinstance(callback, types.FunctionType):    <span class="comment"># FBV</span></span><br><span class="line">            view_name = callback.__name__</span><br><span class="line">        <span class="keyword">else</span>:                                           <span class="comment"># CBV</span></span><br><span class="line">            view_name = callback.__class__.__name__ + <span class="string">'.__call__'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">            <span class="string">"The view %s.%s didn't return an HttpResponse object. It "</span></span><br><span class="line">            <span class="string">"returned None instead."</span> % (callback.__module__, view_name)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the response supports deferred rendering, apply template</span></span><br><span class="line">    <span class="comment"># response middleware and then render the response</span></span><br><span class="line">    <span class="comment"># 判断是否需要执行中间件中的process_template_response函数</span></span><br><span class="line">    <span class="keyword">elif</span> hasattr(response, <span class="string">'render'</span>) <span class="keyword">and</span> callable(response.render):</span><br><span class="line">        <span class="comment"># 遍历执行process_template_response函数</span></span><br><span class="line">        <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._template_response_middleware:</span><br><span class="line">            response = middleware_method(request, response)</span><br><span class="line">            <span class="comment"># 如果某个process_template_response函数返回了None，则抛出异常</span></span><br><span class="line">            <span class="comment"># 自定义process_template_response函数时，需要返回response</span></span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(</span><br><span class="line">                    <span class="string">"%s.process_template_response didn't return an "</span></span><br><span class="line">                    <span class="string">"HttpResponse object. It returned None instead."</span></span><br><span class="line">                    % (middleware_method.__self__.__class__.__name__)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 调用HttpResponse的render()函数，获取真正的返回值</span></span><br><span class="line">            response = response.render()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            response = self.process_exception_by_middleware(e, request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>


<h4 id="HttpResponse-render"><a href="#HttpResponse-render" class="headerlink" title="HttpResponse.render"></a>HttpResponse.render</h4><p>路径:<code>django.template.response.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Render (thereby finalizing) the content of the response.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If the content has already been rendered, this is a no-op.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Return the baked response instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    retval = self</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._is_rendered:</span><br><span class="line">        self.content = self.rendered_content</span><br><span class="line">        <span class="keyword">for</span> post_callback <span class="keyword">in</span> self._post_render_callbacks:</span><br><span class="line">            newretval = post_callback(retval)</span><br><span class="line">            <span class="keyword">if</span> newretval <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                retval = newretval</span><br><span class="line">    <span class="keyword">return</span> retval</span><br></pre></td></tr></table></figure>

<h3 id="执行流程总结"><a href="#执行流程总结" class="headerlink" title="执行流程总结"></a>执行流程总结</h3><p>→ wsgi.py是一次请求的入口<br>→ get_wsgi_application()，返回WSGI调用对象<br>→ WSGIHandler()，接收请求\返回响应对象的类<br>→ load_middleware()，在创建WSGIHandler()对象时，会调用此函数，加载配置文件中的中间件，在一次服务器启动期间，只执行一次<br>→ 将_get_response函数做参数传入convert_exception_to_response函数，执行函数会返回handler，该handler实际上是一个包裹了exception和_get_response函数的装饰器<br>→ 将handler赋值给_middleware_chain<br>→ 中间件加载完毕<br>→ 一次请求到达django时，会调用django的<strong>call</strong>函数，在该函数中，会调用get_response（定义在父类BaseHandler中）函数<br>→ 在get_response函数中，会执行response = self._middleware_chain(request)这一行代码，从上面的步骤看，也就相当于执行了_get_response函数<br>→ 在_get_response函数中，会执行真正的视图函数(callback和wrapped_callback)，返回的结果response对象<br>→ _get_response执行完毕后，返回response，回到get_response函数中<br>→ get_response函数拿到_get_response返回的response对象继续执行之后的代码，最后将response对象返回<br>→ get_response函数结束后，回到WSGIHandler的<strong>call</strong>函数中，执行后续代码，返回response到前端</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面代码分析，我们已经大致了解了Django请求响应的流程。大致如下<br>用户请求首先会到web服务器；<br>web服务器会把请求发到django.core.handlers.wsgi的BaseHandler；<br>生成request，response，view， exception，template_response中间件链表；<br>按中间件配置顺序应用request中间件来处理request，如果这中间生成response，则直接返回；<br>通过urlresolvers.resolve匹配请求的url来找到对应的view；<br>应用view中间件，如果有response，则直接返回；<br>调用对应的view，这个过程和和models进行交互，比如从数据库获取数据等，并渲染模板；<br>接着response中间件会被应用来处理repsonse；<br>这其中忽略了一些其他重要的步骤，比如异常中间件的调用。</p>
<p>用网上的一张图总结以上：<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/django-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94.png" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;1ff05dfb3d0d</span><br><span class="line">http:&#x2F;&#x2F;hongweipeng.com&#x2F;index.php&#x2F;archives&#x2F;1369&#x2F;#menu_index_1</span><br><span class="line">http:&#x2F;&#x2F;www.php.cn&#x2F;python-tutorials-416971.html</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;time-read&#x2F;p&#x2F;10650988.html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>python 四种单例模式写法</title>
    <url>/2020/05/23/python-%E5%9B%9B%E7%A7%8D%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%86%99%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">通过单例模式，可以保证系统中的这个类只产生一个对象且容易被外界访问，方便控制个例个数以及节省资源</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        确保每次通过__new__函数，返回的对象都是同一个即可</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls,<span class="string">'_instance'</span>):</span><br><span class="line">            <span class="comment">#orig = super(Singleton,cls)</span></span><br><span class="line">            <span class="comment">#cls._instance = orig.__new__(cls,*args,**kwargs)</span></span><br><span class="line">            <span class="comment"># or</span></span><br><span class="line">            cls._instance = super().__new__(cls,*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Singleton)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">a1 = A()</span><br><span class="line">a2 = A()</span><br><span class="line">a3 = A()</span><br><span class="line"></span><br><span class="line">print(id(a1),id(a2),id(a3))</span><br><span class="line">a1.num = <span class="number">100</span></span><br><span class="line">print(a2.num,a3.num,A.num)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span><span class="params">(object)</span>:</span></span><br><span class="line">    _state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,*args,**kwargs)</span>:</span></span><br><span class="line">        single = super().__new__(cls,*args,**kwargs)</span><br><span class="line">        single.__dict__ = cls._state</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> single</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Singleton2)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">b1 = B()</span><br><span class="line">b2 = B()</span><br><span class="line">b3 = B()</span><br><span class="line"><span class="comment"># 每次返回的对象都不一样</span></span><br><span class="line">print(id(b1),id(b2),id(b3))</span><br><span class="line"></span><br><span class="line">b1.num = <span class="number">100</span></span><br><span class="line">print(b2.num,b3.num,B.num)</span><br><span class="line"><span class="comment"># 但贡献了__dict__的魔法方法，即具有的属性，数据都是一样的，一个对象修改，其他对象跟着修改</span></span><br><span class="line">print(b1.__dict__,b2.__dict__,b3.__dict__)</span><br><span class="line">print(b1._state)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">跟第一种方法效果一样，都是只生成一个对象</span></span><br><span class="line"><span class="string">使用一个dict存储类对象，在使用装饰器时先判断cls是否已经存在，如果存在则取出，否则创建存入再取出</span></span><br><span class="line"><span class="string">就能确保每次都是只使用同一个对象</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(object)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c1 = C()</span><br><span class="line">c2 = C()</span><br><span class="line">c3 = C()</span><br><span class="line">print(id(c1),id(c2),id(c3))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-'</span> * <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">模块导入，在python中，模块是天然的单例模式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 在 single.py 中的类</span></span><br><span class="line"><span class="string">class Singleton4(object):</span></span><br><span class="line"><span class="string">    num = 0</span></span><br><span class="line"><span class="string">    def foo(self):</span></span><br><span class="line"><span class="string">        print(self.num)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">single = Singleton4()</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> single <span class="keyword">import</span> single,Singleton4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但仅限于把已经创建好的实例对象导入进来</span></span><br><span class="line">single.num = <span class="number">100</span></span><br><span class="line">single.foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是导入了类，然后创建了实例对象，那么跟普通类没有区别</span></span><br><span class="line">s1 = Singleton4()</span><br><span class="line">s2 = Singleton4()</span><br><span class="line">s3 = Singleton4()</span><br><span class="line">print(id(s1),id(s2),id(s3))</span><br><span class="line"></span><br><span class="line">s1.num = <span class="number">500</span></span><br><span class="line">print(s2.num,s3.num,Singleton4.num)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>装饰器的几种用法</title>
    <url>/2020/05/23/%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>装饰器是python的一种特殊工具，提供了一种在函数外部修改函数的灵活能力，可以改变函数本身的行为，简单说，就是在不修改函数代码的情况下，给函数增加新的功能。例如常用的<code>staticmethod</code>和<code>classmethod</code>等。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fprint</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fprint</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="带参数用法"><a href="#带参数用法" class="headerlink" title="带参数用法"></a>带参数用法</h3><p>如果要使用带参数的装饰器，则需要在基本使用上再添加一层函数，该层函数可以用来接收传递的参数。<br>在每一个函数中，都需要返回内层函数对象，最内层的执行func的函数除外。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fprint</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'&gt;&gt;&gt;name = '</span> + str(name))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@fprint('hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'foo...'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="使用类来实现装饰器"><a href="#使用类来实现装饰器" class="headerlink" title="使用类来实现装饰器"></a>使用类来实现装饰器</h3><p>绝大多数装饰器都是基于函数和闭包实现的，但这并非制造装饰器的唯一方式。事实上，python对某个对象是否能通过装饰器形式使用只有一个要求:</p>
<blockquote>
<p>decorator必须是一个“可被调用(callable)的对象”<br>函数自然是“可被调用”的对象。但除了函数外，类也是可调用的，只要实现<code>__call__</code>魔法方法即可。基于这个 特性，我们可以很方便地使用类来实现装饰器。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-6-2 15:44</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayFunc</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, duration, func)</span>:</span></span><br><span class="line">        self.duration = duration</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">f'Wait for <span class="subst">&#123;self.duration&#125;</span> seconds...'</span>)</span><br><span class="line">        time.sleep(self.duration)</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eager_call</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'No Wait...'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delay</span><span class="params">(duration)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> functools.partial(DelayFunc, duration)</span><br><span class="line"></span><br><span class="line"><span class="meta">@delay(1)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">'add..'</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add实际上时DelayFunc的实例对象，当像函数一样调用时，会调用__call__方法</span></span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 不延时执行函数</span></span><br><span class="line">print(add.eager_call(<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>上面的代码实现了一个简单的add功能，并且使用了装饰器+偏函数，实际上的调用跟以下代码功能一致。把函数当参数传入类属性中，然后调用<code>__call__</code>魔法方法时，执行该函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelayFunc</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, duration, func)</span>:</span></span><br><span class="line">        self.duration = duration</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">f'Wait for <span class="subst">&#123;self.duration&#125;</span> seconds...'</span>)</span><br><span class="line">        time.sleep(self.duration)</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eager_call</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'No Wait...'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.func(*args, **kwargs)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delay</span><span class="params">(duration)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            df = DelayFunc(duration, func)</span><br><span class="line">            <span class="keyword">return</span> df(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    print(<span class="string">'add..'</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">    </span><br><span class="line">add_func = delay(<span class="number">1</span>)(add)</span><br><span class="line"><span class="comment"># print(add_func)</span></span><br><span class="line">print(add_func(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h3 id="使用wrapt模块编写更扁平的装饰器"><a href="#使用wrapt模块编写更扁平的装饰器" class="headerlink" title="使用wrapt模块编写更扁平的装饰器"></a>使用wrapt模块编写更扁平的装饰器</h3><p>在编写装饰器时，有两件事会显得特别麻烦，1.实现带参数的装饰器时，层层嵌套的函数代码特别难写，难读 2.因为函数和类方法的不同，为某者编写的装饰器往往不能直接用在另一个上。<br>wrapt模块时一个专门帮助编写装饰器的工具库，利用它，我们可以非常方便的改造装饰器函数，完美解决以上两个问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> wrapt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_num</span><span class="params">(min_num, max_num)</span>:</span></span><br><span class="line"><span class="meta">	@wrapt.decorator</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(wrapped, instance, args, kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">		:param wrapped: 被装饰的函数或者类方法</span></span><br><span class="line"><span class="string">		:param instance: 1.如果被装饰者时普通类方法，该值为类实例</span></span><br><span class="line"><span class="string">					2.如果被装饰者时classmethod方法，该值为类</span></span><br><span class="line"><span class="string">					3.如果被装饰者时类/函数/静态方法，该值为None</span></span><br><span class="line"><span class="string">		:param args: 调用时的位置参数（没有*符号）</span></span><br><span class="line"><span class="string">		:param kwargs: 调用时的关键字参数（没有**符号）</span></span><br><span class="line"><span class="string">		"""</span></span><br><span class="line">        num = random.randint(min_num, max_num)</span><br><span class="line"></span><br><span class="line">        args = (num,) + args</span><br><span class="line">        <span class="keyword">return</span> wrapped(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@random_num(10, 100)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">f'random num is <span class="subst">&#123;num&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	@random_num(100, 1000)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        print(<span class="string">f'random num in class is <span class="subst">&#123;num&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line">t = Test()</span><br><span class="line">t.test()</span><br></pre></td></tr></table></figure>
<p>使用wrapt编写的装饰器，具有以下优势:</p>
<ul>
<li>嵌套层级少：使用<code>wrapt.decorator</code>可以将两层嵌套减少为一层</li>
<li>更简单: 处理位置与关键字参数时，可以忽略类实例等特别情况</li>
<li>更灵活: 针对<code>instance</code>值进行判断后，更容易让装饰器变得通用。</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>django-rest-framework 常用视图函数</title>
    <url>/2020/05/23/django-rest-framework-%E5%B8%B8%E7%94%A8%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># 设置分页</span></span><br><span class="line">    <span class="string">'DEFAULT_PAGINATION_CLASS'</span>: <span class="string">'rest_framework.pagination.PageNumberPagination'</span>,</span><br><span class="line">    <span class="string">'DEFAULT_VERSIONING_CLASS'</span>: <span class="string">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class="line">    <span class="string">'DEFAULT_PERMISSOIN_CLASSES'</span>:[</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAdminUser'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># 每一页数量</span></span><br><span class="line">    <span class="string">'PAGE_SIZE'</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">SEX_CHOICES = (</span><br><span class="line">    (<span class="number">1</span>, <span class="string">'男'</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">'女'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classes</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">16</span>, null=<span class="literal">False</span>, verbose_name=<span class="string">'学生姓名'</span>)</span><br><span class="line">    sex = models.CharField(max_length=<span class="number">16</span>, choices=SEX_CHOICES, default=<span class="number">1</span>)</span><br><span class="line">    classes = models.ForeignKey(Classes, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Score</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    score = models.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    student = models.ForeignKey(Student, on_delete=models.CASCADE)</span><br><span class="line">    course = models.OneToOneField(Course, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.score</span><br></pre></td></tr></table></figure>


<h3 id="serializers-py"><a href="#serializers-py" class="headerlink" title="serializers.py"></a>serializers.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-26 23:31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> Classes, Student, Course, Score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassesSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Classes</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Student</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'sex'</span>, <span class="string">'classes'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Course</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    student = StudentSerializer(many=<span class="literal">False</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    course = CourseSerializer(many=<span class="literal">False</span>, read_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Score</span><br><span class="line">        fields = (<span class="string">'id'</span>, <span class="string">'score'</span>, <span class="string">'student'</span>, <span class="string">'course'</span>)</span><br></pre></td></tr></table></figure>


<h3 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h3><h4 id="views-classes-py"><a href="#views-classes-py" class="headerlink" title="views_classes.py"></a>views_classes.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-26 23:57</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> Classes</span><br><span class="line"><span class="keyword">from</span> demo.serializers <span class="keyword">import</span> ClassesSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassesList</span><span class="params">(mixins.ListModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">				  mixins.CreateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">				  generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Classes.objects.all()</span><br><span class="line">    serializer_class = ClassesSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.list(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassesDetail</span><span class="params">(mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">					mixins.UpdateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">					mixins.DestroyModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">					generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Classes.objects.all()</span><br><span class="line">    serializer_class = ClassesSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>


<h4 id="views-course-py"><a href="#views-course-py" class="headerlink" title="views_course.py"></a>views_course.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> Course</span><br><span class="line"><span class="keyword">from</span> demo.serializers <span class="keyword">import</span> CourseSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">course_list</span><span class="params">(request: Request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        course = Course.objects.all()</span><br><span class="line">        serializer = CourseSerializer(course, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        serializer = CourseSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">course_detail</span><span class="params">(request: Request, pk)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        course = Course.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Course.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        serializer = CourseSerializer(course)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'PUT'</span>:</span><br><span class="line">        serializer = CourseSerializer(course, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'DELETE'</span>:</span><br><span class="line">        course.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure>


<h4 id="views-score-py"><a href="#views-score-py" class="headerlink" title="views_score.py"></a>views_score.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-27 00:02</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> Score</span><br><span class="line"><span class="keyword">from</span> demo.serializers <span class="keyword">import</span> ScoreSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Score.objects.all()</span><br><span class="line">    serializer_class = ScoreSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreDetail</span><span class="params">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></span><br><span class="line">    queryset = Score.objects.all()</span><br><span class="line">    serializer_class = ScoreSerializer</span><br></pre></td></tr></table></figure>


<h4 id="views-student-py"><a href="#views-student-py" class="headerlink" title="views_student.py"></a>views_student.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-26 23:46</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo.models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> demo.serializers <span class="keyword">import</span> StudentSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentList</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        stu = Student.objects.all()</span><br><span class="line">        serializer = StudentSerializer(stu, many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        serializer = StudentSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDetail</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self, pk)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Student.objects.get(pk)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Student.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line">        stu = self.get_object(pk)</span><br><span class="line">        serializer = StudentSerializer(stu)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line">        stu = self.get_object(pk)</span><br><span class="line">        serializer = StudentSerializer(stu, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line"></span><br><span class="line">        stu = self.get_object(pk)</span><br><span class="line">        stu.delete()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure>


<h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-27 00:03</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> demo <span class="keyword">import</span> views_classes, views_course, views_score, views_student</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'cls/'</span>, views_classes.ClassesList.as_view()),</span><br><span class="line">    re_path(<span class="string">'cls/(?P&lt;pk&gt;[0-9]+)/'</span>, views_classes.ClassesDetail.as_view()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    path(<span class="string">'stu/'</span>, views_student.StudentList.as_view()),</span><br><span class="line">    re_path(<span class="string">'stu/(?P&lt;pk&gt;[0-9]+)/'</span>, views_student.StudentDetail.as_view())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    path(<span class="string">'cou/'</span>, views_course.course_list),</span><br><span class="line">    re_path(<span class="string">'cou/(?P&lt;pk&gt;[0-9]+)/'</span>, views_course.course_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    path(<span class="string">'sco/'</span>, views_score.ScoreList.as_view()),</span><br><span class="line">    re_path(<span class="string">'sco/(?P&lt;pk&gt;[0-9]+)'</span>, views_score.ScoreDetail.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>django-rest-framework --- mixin模式</title>
    <url>/2020/05/23/django-rest-framework-mixin%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>假设存在这个三个类，Bird, Fish, Animal，分别具有不同的功能，像fly, swim, run等。现有某种虚拟Animal具有以上三种功能，那么便使用继承就可实现 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'can fly'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swim</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'can swim'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'can run'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VirtualAnimal</span><span class="params">(Bird, Fish, Animal)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">can</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fly()</span><br><span class="line">        self.swim()</span><br><span class="line">        self.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">va = VirtualAnimal()</span><br><span class="line">va.can()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>可这么做就会出现一个 问题，当你看到VirtualAnimal这个类时，如果你事先不清楚它是Animal的话，单看这个类，你不会知道它到底是Bird, Fish 还是Animal。</p>
<p>如果使用mixin模式，即把类名改成MixinBird, MixinFish，那么类的继承就写成了</p>
<p><code>class VirtualAnimal(MixinBird, MixinFish, Animal):</code></p>
<p>虽然只是更改了类名，代码没有发生任何变化，但这是一种默认申明，该生物是Animal但具有fly(), swim()功能。</p>
<p>drf框架中，大量使用这种写法。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>django-rest-framework</tag>
      </tags>
  </entry>
  <entry>
    <title>python使用单分派泛函数实现函数`重载`功能</title>
    <url>/2020/05/23/python%E4%BD%BF%E7%94%A8%E5%8D%95%E5%88%86%E6%B4%BE%E6%B3%9B%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0-%E9%87%8D%E8%BD%BD-%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>众所周知,python中没有类似Java中的函数重载功能,当定义多个函数名一样但参数不一样的函数时,最后一个会前面前的同名函数覆盖.</p>
<a id="more"></a>

<h3 id="模块中使用"><a href="#模块中使用" class="headerlink" title="模块中使用"></a>模块中使用</h3><ul>
<li><p>我们使用singledispatch装饰器来实现”重载”功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch, partial</span><br><span class="line">    </span><br><span class="line"><span class="meta">@singledispatch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pprint</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@&lt;主函数&gt;.register(type)</code>来装饰同名函数.分派函数可以有任意多个参数,但是具体调用哪一部分只由第一个参数类型决定,也就是<code>register(type)</code>中的type决定. </p>
</li>
<li><p>对于单分派而言,函数名无关紧要,但不能同名就是了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pprint.register(str)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pprint</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'---&gt;str类型: <span class="subst">&#123;obj&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pprint.register(Integral)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'--&gt;int类型: <span class="subst">&#123;obj&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数参数可以有多个,但如果有多个同类型的单分派函数,最后一个会覆盖前面的,在调用下面的函数时,必须传入两个参数,第一个是类型,第二个随意</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pprint.register(str)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pprint</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'---&gt;str类型: <span class="subst">&#123;obj&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pprint.register(str)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pprint</span><span class="params">(obj1, obj2)</span>:</span></span><br><span class="line">    print(<span class="string">f'---&gt;str类型,两个参数: <span class="subst">&#123;obj1&#125;</span>, <span class="subst">&#123;obj2&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以识别的类型随意</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numbers <span class="keyword">import</span> Integral</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(A.__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pprint.register(Integral)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'--&gt;Integral类型: <span class="subst">&#123;obj&#125;</span>'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@pprint.register(A)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'自定义类型: <span class="subst">&#123;obj&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以同时注册多种类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pprint.register(float)</span></span><br><span class="line"><span class="meta">@pprint.register(dict)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;obj&#125;</span>.type = '</span> + str(type(obj)))</span><br></pre></td></tr></table></figure>
</li>
<li><p>也可结合偏函数使用,当然,其实跟普通函数用法没什么区别</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">printstr = partial(pprint, <span class="string">'固定第一个参数'</span>)</span><br><span class="line">printstr(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>完整代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-5-15 21:48</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch, partial</span><br><span class="line"><span class="keyword">from</span> numbers <span class="keyword">import</span> Integral</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(A.__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singledispatch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pprint</span><span class="params">(obj)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @pprint.register(str)</span></span><br><span class="line"><span class="comment"># def _pprint(obj):</span></span><br><span class="line"><span class="comment"># 	print(f'---&gt;str类型: &#123;obj&#125;')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pprint.register(str)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_pprint</span><span class="params">(obj1, obj2)</span>:</span></span><br><span class="line">    print(<span class="string">f'---&gt;str类型,两个参数: <span class="subst">&#123;obj1&#125;</span>, <span class="subst">&#123;obj2&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pprint.register(Integral)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'---&gt;int类型: <span class="subst">&#123;obj&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pprint.register(float)</span></span><br><span class="line"><span class="meta">@pprint.register(dict)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'---&gt;<span class="subst">&#123;obj&#125;</span>.type = '</span> + str(type(obj)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pprint.register(A)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">    print(<span class="string">f'---&gt;自定义类型: <span class="subst">&#123;obj&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printstr = partial(pprint, <span class="string">'固定第一个参数'</span>)</span><br><span class="line"></span><br><span class="line">pprint(<span class="string">'hello'</span>, <span class="string">'world'</span>)</span><br><span class="line">pprint(<span class="number">100</span>)</span><br><span class="line">pprint(<span class="number">1.34</span>)</span><br><span class="line">pprint(&#123;<span class="string">'name'</span>: <span class="string">'chen'</span>&#125;)</span><br><span class="line">pprint(A())</span><br><span class="line">printstr(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">---&gt;str类型,两个参数: hello, world</span><br><span class="line">---&gt;int类型: 100</span><br><span class="line">---&gt;1.34.type = &lt;class 'float'&gt;</span><br><span class="line">---&gt;&#123;'name': 'chen'&#125;.type = &lt;class 'dict'&gt;</span><br><span class="line">---&gt;自定义类型: A</span><br><span class="line">---&gt;str类型,两个参数: 固定第一个参数, hello</span><br></pre></td></tr></table></figure>

<h3 id="类中使用"><a href="#类中使用" class="headerlink" title="类中使用"></a>类中使用</h3><p>只测试出这一种写法,无法使用self,不能添加staticmethod和classmethod,感觉实用意义不大.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerPrint</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	@singledispatch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cprint</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        print(<span class="string">'default--&gt;'</span>, obj)</span><br><span class="line"></span><br><span class="line"><span class="meta">	@cprint.register(str)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">        print(<span class="string">'str--&gt;'</span>, obj)</span><br><span class="line"></span><br><span class="line"><span class="meta">	@cprint.register(int)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(obj)</span>:</span></span><br><span class="line">        print(<span class="string">'int--&gt;'</span>, obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CustomerPrint.cprint(<span class="string">'h'</span>)</span><br><span class="line">CustomerPrint.cprint(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode ---  分隔链表</title>
    <url>/2020/05/23/leetcode-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/partition-list/submissions/" target="_blank" rel="noopener">分隔链表</a><br><br/></p>
<p>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。<br>你应当保留两个分区中每个节点的初始相对位置。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: head &#x3D; 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x &#x3D; 3</span><br><span class="line">输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>也是一个很简单的问题，熟悉一下golang的语法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val  <span class="keyword">int</span></span><br><span class="line">    Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(head *ListNode, x <span class="keyword">int</span>)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> smallNode *ListNode</span><br><span class="line">    <span class="keyword">var</span> smallFirst *ListNode</span><br><span class="line">    <span class="keyword">var</span> bigNode *ListNode</span><br><span class="line">    <span class="keyword">var</span> bigFirst *ListNode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> head.Val &lt; x &#123;</span><br><span class="line">            <span class="keyword">if</span> smallNode == <span class="literal">nil</span> &#123;</span><br><span class="line">                smallNode = head</span><br><span class="line">                smallFirst = head</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                smallNode.Next = head</span><br><span class="line">                smallNode = smallNode.Next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> head.Val &gt;= x &#123;</span><br><span class="line">            <span class="keyword">if</span> bigNode == <span class="literal">nil</span> &#123;</span><br><span class="line">                bigNode = head</span><br><span class="line">                bigFirst = head</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bigNode.Next = head</span><br><span class="line">                bigNode = bigNode.Next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最容易出错的地方</span></span><br><span class="line">    <span class="keyword">if</span> bigNode != <span class="literal">nil</span> &#123;</span><br><span class="line">        bigNode.Next = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> smallNode != <span class="literal">nil</span> &#123;</span><br><span class="line">        smallNode.Next = bigFirst</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> node *ListNode</span><br><span class="line">    <span class="keyword">if</span> smallFirst != <span class="literal">nil</span> &#123;</span><br><span class="line">        node = smallFirst</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node = bigFirst</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test86</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//	1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3</span></span><br><span class="line">    x := <span class="number">0</span></span><br><span class="line">    n1 := ListNode&#123;Val: <span class="number">1</span>&#125;</span><br><span class="line">    n2 := ListNode&#123;Val: <span class="number">4</span>&#125;</span><br><span class="line">    n3 := ListNode&#123;Val: <span class="number">3</span>&#125;</span><br><span class="line">    n4 := ListNode&#123;Val: <span class="number">2</span>&#125;</span><br><span class="line">    n5 := ListNode&#123;Val: <span class="number">5</span>&#125;</span><br><span class="line">    n6 := ListNode&#123;Val: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">    n1.Next = &amp;n2</span><br><span class="line">    n2.Next = &amp;n3</span><br><span class="line">    n3.Next = &amp;n4</span><br><span class="line">    n4.Next = &amp;n5</span><br><span class="line">    n5.Next = &amp;n6</span><br><span class="line"></span><br><span class="line">    node := partition(&amp;n1, x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(node.Val)</span><br><span class="line">        node = node.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode ---  颜色分类</title>
    <url>/2020/05/23/leetcode-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">颜色分类</a><br><br/><br>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>
<p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p>
<p>注意:<br>不能使用代码库中的排序函数来解决这道题。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,0,2,1,1,0]</span><br><span class="line">输出: [0,0,1,1,2,2]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目虽然是中等难度，但还是很简单吧，就是桶排序的意思。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortColors</span><span class="params">(nums []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> colors = [<span class="number">3</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        colors[nums[i]] += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    index := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(colors); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; colors[i]; j++ &#123;</span><br><span class="line">            nums[index] = i</span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 最大子序和</title>
    <url>/2020/05/23/leetcode-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">最大子序和</a></p>
<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>示例:</p>
<blockquote>
</blockquote>
<p>输入: [-2,1,-3,4,-1,2,1,-5,4],<br/><br>输出: 6 <br/><br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。<br/></p>
<a id="more"></a>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题很熟悉了，那时候大学时候在mooc上学习数据结构时就讲到了这道题，然后过了这么多年 ，每次刷题都能遇到，使用一个for循环就搞定。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        tmp += v</span><br><span class="line">        <span class="keyword">if</span> tmp &gt; result &#123;</span><br><span class="line">            result = tmp</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> tmp &lt; <span class="number">0</span> &#123;</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test53</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> nums = []<span class="keyword">int</span>&#123;<span class="number">-2</span>, <span class="number">1</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>&#125;</span><br><span class="line">    fmt.Println(maxSubArray(nums))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 爬楼梯</title>
    <url>/2020/05/23/leetcode-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">爬楼梯</a><br><br/><br>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>注意：给定 n 是一个正整数。</p>
<p>示例 1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 2 </span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br></pre></td></tr></table></figure>

<p>示例 2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>很常见的一道题目了，用常规的递归解决就可以了。<br>没想到的是，加上map做缓存后，耗时竟然是0ms，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行用时 :0 ms, 在所有 Go 提交中击败了100.00% 的用户</span><br><span class="line">内存消耗 :1.9 MB, 在所有 Go 提交中击败了76.09%的用户</span><br></pre></td></tr></table></figure>

<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存每一个n的值</span></span><br><span class="line"><span class="keyword">var</span> cache = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// 递归的结束条件</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取缓存</span></span><br><span class="line">    <span class="keyword">if</span> _, ok := cache[n]; ok &#123;</span><br><span class="line">        <span class="keyword">return</span> cache[n]</span><br><span class="line">    &#125;</span><br><span class="line">    m := climbStairs(n<span class="number">-1</span>) + climbStairs(n<span class="number">-2</span>)</span><br><span class="line">    cache[n] = m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test70</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(climbStairs(<span class="number">2</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 字符串相乘</title>
    <url>/2020/05/23/leetcode-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/multiply-strings/" target="_blank" rel="noopener">字符串相乘</a><br/><br>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。<br>示例1:</p>
<blockquote>
</blockquote>
<p>输入: num1 = “2”, num2 = “3”<br>输出: “6”</p>
<p>示例2:</p>
<blockquote>
</blockquote>
<p>输入: num1 = “123”, num2 = “456”<br>输出: “56088”</p>
<p>说明:</p>
<blockquote>
</blockquote>
<p>num1 和 num2 的长度小于110。<br/><br>num1 和 num2 只包含数字 0-9。<br/><br>num1 和 num2 均不以零开头，除非是数字 0 本身。<br/><br>不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。<br/></p>
<a id="more"></a>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>感觉做起来饶了一大圈的样子，还是python的整数舒服，都不需要在意溢出的问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = 'ChenTao'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(self, num1: str, num2: str)</span> -&gt; str:</span></span><br><span class="line">        alist = list(num1)</span><br><span class="line">        blist = list(num2)</span><br><span class="line">        result = list()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 得到乘法的中间过程</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">                1 2 3</span></span><br><span class="line"><span class="string">            *   4 5 6</span></span><br><span class="line"><span class="string">            --------------    中间过程</span></span><br><span class="line"><span class="string">                7 3 8</span></span><br><span class="line"><span class="string">              6 1 5 0</span></span><br><span class="line"><span class="string">            4 9 2 0 0</span></span><br><span class="line"><span class="string">            ---------------   结果</span></span><br><span class="line"><span class="string">            5 6 0 8 8</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 逆序相乘，从个位开始计算</span></span><br><span class="line">        <span class="comment"># i是从右数第几个位置，方便添加0</span></span><br><span class="line">        <span class="comment"># 此步做乘法</span></span><br><span class="line">        <span class="keyword">for</span> i, m <span class="keyword">in</span> enumerate(alist[::<span class="number">-1</span>]):</span><br><span class="line">            <span class="comment"># 低位补充0</span></span><br><span class="line">            temp = [<span class="string">'0'</span>] * i</span><br><span class="line">            <span class="comment"># 进位数，例如 9 * 9 = 81，那么p=8</span></span><br><span class="line">            p = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> blist[::<span class="number">-1</span>]:</span><br><span class="line">                <span class="comment"># 计算当前位置，并加上进位数</span></span><br><span class="line">                x = int(m) * int(n) + p</span><br><span class="line">                <span class="comment"># 将个位数字保存</span></span><br><span class="line">                temp.insert(<span class="number">0</span>, str(x % <span class="number">10</span>))</span><br><span class="line">                <span class="comment"># 十位数进位</span></span><br><span class="line">                p = x // <span class="number">10</span></span><br><span class="line">            <span class="comment"># 不要忘记最后的进位数要加上</span></span><br><span class="line">            <span class="keyword">if</span> p &gt; <span class="number">0</span>:</span><br><span class="line">                temp.insert(<span class="number">0</span>, str(p))</span><br><span class="line">            <span class="comment"># 保存中间过程</span></span><br><span class="line">            <span class="comment"># 逆序保存，方便之后的加法运算</span></span><br><span class="line">            result.append(temp[::<span class="number">-1</span>])</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 与上面一样，不过此步是做加法，将中间过程的所有数相加</span></span><br><span class="line">        end = list()</span><br><span class="line">        p = <span class="number">0</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># index处所有数相加的临时结果</span></span><br><span class="line">            tmp_result = <span class="number">0</span></span><br><span class="line">            <span class="comment"># 用来判断是否所有的数都加上过了</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">                <span class="comment"># 如果中间过程的数中，此位置上还有数</span></span><br><span class="line">                <span class="keyword">if</span> len(r) &gt; index:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    tmp_result += int(r[index])</span><br><span class="line"></span><br><span class="line">            tmp_result += p</span><br><span class="line">            end.insert(<span class="number">0</span>, str(tmp_result % <span class="number">10</span>))</span><br><span class="line">            p = tmp_result // <span class="number">10</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 说明所有的数都已经计算完毕</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 位置往前挪</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str(int(<span class="string">''</span>.join(end)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">n1 = <span class="string">"123"</span></span><br><span class="line">n2 = <span class="string">"456"</span></span><br><span class="line">print(s.multiply(n1, n2))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 最接近的三数之和</title>
    <url>/2020/05/23/leetcode-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/3sum-closest/" target="_blank" rel="noopener">最接近的三数之和</a><br/><br>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>
<blockquote>
</blockquote>
<p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1. 与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p>
<a id="more"></a>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = 'ChenTao'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums: list, target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="comment"># 最大偏差</span></span><br><span class="line">        tmp = [sys.maxsize, sys.maxsize, sys.maxsize]</span><br><span class="line">        <span class="keyword">for</span> first <span class="keyword">in</span> range(len(nums) - <span class="number">2</span>):</span><br><span class="line">            second = first + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 第三个数从最右边开始</span></span><br><span class="line">            third = len(nums) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保证有效范围</span></span><br><span class="line">            <span class="keyword">while</span> second &lt; third &lt; len(nums):</span><br><span class="line">                x = nums[first] + nums[second] + nums[third]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> x == target:</span><br><span class="line">                    tmp = [nums[first], nums[second], nums[third]]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 计算差值的绝对值</span></span><br><span class="line">                <span class="keyword">elif</span> abs(x - target) &lt; abs(sum(tmp) - target):</span><br><span class="line">                    tmp = [nums[first], nums[second], nums[third]]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 挪动</span></span><br><span class="line">                <span class="keyword">if</span> x &lt; target:</span><br><span class="line">                    second += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    third -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum(tmp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="comment"># nums = [0, 2, 1, -3]</span></span><br><span class="line"><span class="comment"># nums = [1, 1, -1, -1, 3]</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>]</span><br><span class="line">target = <span class="number">82</span></span><br><span class="line">print(s.threeSumClosest(nums, target))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 打印零与奇偶数</title>
    <url>/2020/05/23/leetcode-%E6%89%93%E5%8D%B0%E9%9B%B6%E4%B8%8E%E5%A5%87%E5%81%B6%E6%95%B0/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/print-zero-even-odd/" target="_blank" rel="noopener">打印零与奇偶数</a></p>
<p>假设有这么一个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZeroEvenOdd</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ZeroEvenOdd</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; ... &#125;      <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zero</span><span class="params">(printNumber)</span> </span>&#123; ... &#125;  <span class="comment">// 仅打印出 0</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">even</span><span class="params">(printNumber)</span> </span>&#123; ... &#125;  <span class="comment">// 仅打印出 偶数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">odd</span><span class="params">(printNumber)</span> </span>&#123; ... &#125;   <span class="comment">// 仅打印出 奇数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相同的一个 ZeroEvenOdd 类实例将会传递给三个不同的线程：</p>
<pre><code>线程 A 将调用 zero()，它只输出 0 。
线程 B 将调用 even()，它只输出偶数。
线程 C 将调用 odd()，它只输出奇数。</code></pre><p>每个线程都有一个 printNumber 方法来输出一个整数。请修改给出的代码以输出整数序列 010203040506… ，其中序列的长度必须为 2n。<br>示例1:<br>输入：n = 2<br/><br>输出：”0102”<br/><br>说明：三条线程异步执行，其中一个调用 zero()，另一个线程调用 even()，最后一个线程调用odd()。正确的输出为 “0102”。<br>示例2:<br>输入：n = 5<br/><br>输出：”0102030405”</p>
<a id="more"></a>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = 'ChenTao'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZeroEvenOdd</span>:</span></span><br><span class="line">    BREAKPOINT = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.cur = <span class="number">0</span></span><br><span class="line">        self.index = <span class="number">1</span></span><br><span class="line">        self.condition = threading.Condition()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">(self, printNumber)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">with</span> self.condition:</span><br><span class="line">                <span class="comment"># 判断是否等待唤醒</span></span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self.__is_zero():</span><br><span class="line">                    self.condition.wait()</span><br><span class="line">                <span class="comment"># 退出循环</span></span><br><span class="line">                <span class="keyword">if</span> self.cur == self.BREAKPOINT:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 打印</span></span><br><span class="line">                printNumber(self.cur)</span><br><span class="line">                <span class="comment"># 计算下一次打印的数字</span></span><br><span class="line">                self.__continue()</span><br><span class="line">                <span class="comment"># 唤醒</span></span><br><span class="line">                self.condition.notify_all()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">even</span><span class="params">(self, printNumber)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">with</span> self.condition:</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self.__is_even():</span><br><span class="line">                    self.condition.wait()</span><br><span class="line">                <span class="keyword">if</span> self.cur == self.BREAKPOINT:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                printNumber(self.cur)</span><br><span class="line">                self.__continue()</span><br><span class="line">                self.condition.notify_all()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">(self, printNumber)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">with</span> self.condition:</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">not</span> self.__is_odd():</span><br><span class="line">                    self.condition.wait()</span><br><span class="line">                <span class="keyword">if</span> self.cur == self.BREAKPOINT:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                printNumber(self.cur)</span><br><span class="line">                self.__continue()</span><br><span class="line">                self.condition.notify_all()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__is_zero</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        打印数字0</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.cur == <span class="number">0</span> <span class="keyword">or</span> self.cur == self.BREAKPOINT</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__is_even</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        打印奇数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> (self.cur != <span class="number">0</span> <span class="keyword">and</span> self.cur % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">or</span> self.cur == self.BREAKPOINT</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__is_odd</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        打印偶数</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> (self.cur != <span class="number">0</span> <span class="keyword">and</span> self.cur % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">or</span> self.cur == self.BREAKPOINT</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__continue</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index &lt;= self.n:</span><br><span class="line">            <span class="keyword">if</span> self.cur == <span class="number">0</span>:</span><br><span class="line">                self.cur = self.index</span><br><span class="line">                self.index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.cur = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.cur = self.BREAKPOINT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_number</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(num, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(ze: ZeroEvenOdd, fname: str)</span>:</span></span><br><span class="line">    _fc = getattr(ze, fname)</span><br><span class="line">    _fc(print_number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    n = <span class="number">8</span></span><br><span class="line">    ze = ZeroEvenOdd(n)</span><br><span class="line">    thrs = list()</span><br><span class="line">    thrs.append(threading.Thread(target=func, args=(ze, <span class="string">'zero'</span>)))</span><br><span class="line">    thrs.append(threading.Thread(target=func, args=(ze, <span class="string">'odd'</span>)))</span><br><span class="line">    thrs.append(threading.Thread(target=func, args=(ze, <span class="string">'even'</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> th <span class="keyword">in</span> thrs:</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> th <span class="keyword">in</span> thrs:</span><br><span class="line">        th.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 最小栈</title>
    <url>/2020/05/23/leetcode-%E6%9C%80%E5%B0%8F%E6%A0%88/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/min-stack/" target="_blank" rel="noopener">最小栈</a></p>
<a id="more"></a>

<p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p>
<pre><code>push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。</code></pre><figure class="highlight"><table><tr><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(<span class="number">-2</span>);</span><br><span class="line">minStack.push(<span class="number">0</span>);</span><br><span class="line">minStack.push(<span class="number">-3</span>);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -2.</span><br></pre></td></tr></table></figure>



<h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="1-第一种解法-list-min"><a href="#1-第一种解法-list-min" class="headerlink" title="1. 第一种解法: list + min"></a>1. 第一种解法: list + min</h4><p>第一种解法就是利用<code>list</code>存放数据，然后在获取最小值的时，使用内置函数<code>min</code>。</p>
<p>PS:没考虑异常的情况了，例如空列表的处理之类的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__stack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.__stack.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.__stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.__stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> min(self.__stack)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">stack = MinStack()</span><br><span class="line">nums = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(<span class="string">'nums: '</span> + str(nums))</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    stack.push(num)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'min: '</span> + str(stack.getMin()))</span><br><span class="line">stack.pop()</span><br><span class="line">stack.pop()</span><br><span class="line">stack.pop()</span><br><span class="line">stack.pop()</span><br><span class="line">print(<span class="string">'min: '</span> + str(stack.getMin()))</span><br><span class="line">print(<span class="string">'top: '</span> + str(stack.top()))</span><br></pre></td></tr></table></figure>

<p>leetcode的算法复杂度，用时<code>988ms</code></p>
<h4 id="第二种解法-双deque"><a href="#第二种解法-双deque" class="headerlink" title="第二种解法: 双deque"></a>第二种解法: 双deque</h4><p>这种解法利用了python自带的 deque数据结构，用空间换时间来解的 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__stack = deque()</span><br><span class="line">        self.__min_stack = deque()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.__stack.append(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.__min_stack <span class="keyword">or</span> self.__min_stack[<span class="number">-1</span>] &gt;= x:</span><br><span class="line">            self.__min_stack.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        x = self.__stack.pop()</span><br><span class="line">        <span class="keyword">if</span> self.__min_stack <span class="keyword">and</span> self.__min_stack[<span class="number">-1</span>] == x:</span><br><span class="line">            self.__min_stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.__stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.__min_stack[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">stack = MinStack()</span><br><span class="line">nums = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(<span class="string">'nums: '</span> + str(nums))</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    stack.push(num)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'min: '</span> + str(stack.getMin()))</span><br><span class="line">stack.pop()</span><br><span class="line">stack.pop()</span><br><span class="line">stack.pop()</span><br><span class="line">stack.pop()</span><br><span class="line">print(<span class="string">'min: '</span> + str(stack.getMin()))</span><br><span class="line">print(<span class="string">'top: '</span> + str(stack.top()))</span><br></pre></td></tr></table></figure>

<p>leetcode上通过时间是<code>148ms</code></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 返回删除节点后的森林中的每棵树</title>
    <url>/2020/05/23/leetcode-%E8%BF%94%E5%9B%9E%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E5%90%8E%E7%9A%84%E6%A3%AE%E6%9E%97%E4%B8%AD%E7%9A%84%E6%AF%8F%E6%A3%B5%E6%A0%91/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>这个题目是leetcode上随机产生的一个面试题，所以没有链接了。</p>
<p>给出二叉树的根节点 <code>root</code>，树上每个节点都有一个不同的值。</p>
<p>如果节点值在 <code>to_delete</code> 中出现，我们就把该节点从树上删去，最后得到一个森林（一些不相交的树构成的集合）。</p>
<p>返回森林中的每棵树。你可以按任意顺序组织答案。</p>
<p>示例:</p>
<p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/blog/20190803/screen-shot-2019-07-01-at-53836-pm.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [1,2,3,4,5,6,7], to_delete &#x3D; [3,5]</span><br><span class="line">输出：[[1,2,null,4],[6],[7]]</span><br></pre></td></tr></table></figure>

<p>提示:</p>
<ul>
<li>树中的节点数最大为 <code>1000</code>。</li>
<li>每个节点都有一个介于 <code>1</code> 到 <code>1000</code> 之间的值，且各不相同。</li>
<li><code>to_delete.length &lt;= 1000</code></li>
<li><code>to_delete</code> 包含一些从 <code>1</code> 到 <code>1000</code>、各不相同的值。</li>
</ul>
<a id="more"></a>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>主要需要处理删除的节点以及子节点的问题。</p>
<p>要想通过测试用例，则需要把要删除的节点的父节点的left \ right赋值为None才行。</p>
<p>主要分析见代码注释即可。</p>
<p>特别需要注意的是，结果返回的是一个列表，列表中存放着森林中每棵二叉树的根节点，不是直接返回最终结果….</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.val)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delNodes</span><span class="params">(self, root: TreeNode, to_delete: list)</span> -&gt; list:</span></span><br><span class="line">        <span class="comment"># 过程，凡是树的根节点的都放在此列表中</span></span><br><span class="line">        <span class="comment"># 就是根节点和要删除的节点</span></span><br><span class="line">        process = list()</span><br><span class="line">        <span class="comment"># 结果</span></span><br><span class="line">        result = list()</span><br><span class="line"></span><br><span class="line">        process.append(root)</span><br><span class="line">        <span class="keyword">while</span> len(process) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 抛出一个节点</span></span><br><span class="line">            node = process.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 遍历删除</span></span><br><span class="line">            <span class="comment"># 如果这个节点不是删除的节点，并且存在，就添加进结果中</span></span><br><span class="line">            <span class="comment"># 这个判断条件不能不添加，否则会通不过这组数据</span></span><br><span class="line">            <span class="comment"># root = [1, 2, None, 4, 3]</span></span><br><span class="line">            <span class="comment"># to_delete = [2, 3]</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.traverse(node, process, to_delete) <span class="keyword">and</span> node:</span><br><span class="line">                result.append(node)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self, node, process, to_delete)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="comment"># 如果当前节点的值不是要删除的节点，那么就继续往左\右遍历</span></span><br><span class="line">            <span class="keyword">if</span> node.val <span class="keyword">not</span> <span class="keyword">in</span> to_delete:</span><br><span class="line">                <span class="comment"># 为了能通过测试提交，如果返回的是True，就表示左\右子节点删除了</span></span><br><span class="line">                <span class="comment"># 那么就需要把父节点的左\右指针置空</span></span><br><span class="line">                <span class="keyword">if</span> self.traverse(node.left, process, to_delete):</span><br><span class="line">                    node.left = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">if</span> self.traverse(node.right, process, to_delete):</span><br><span class="line">                    node.right = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 需要删除本身</span></span><br><span class="line">                <span class="comment"># 把左右两个子节点加入列表中，需要往下遍历</span></span><br><span class="line">                process.append(node.left)</span><br><span class="line">                process.append(node.right)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试代码</span></span><br><span class="line">root = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">None</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">to_delete = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 层序构造二叉树</span></span><br><span class="line">    <span class="comment"># 构造的是完全二叉树，所以此处不会存在bug</span></span><br><span class="line">    <span class="comment"># 如果是普通二叉树，不能这么写了</span></span><br><span class="line">    nodes = list()</span><br><span class="line">    <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(root):</span><br><span class="line">        node = TreeNode(num)</span><br><span class="line">        <span class="comment"># 根节点</span></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># 左孩子节点</span></span><br><span class="line">        <span class="keyword">elif</span> index % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            parent = int((index - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">            parent_node = nodes[parent]</span><br><span class="line">            parent_node.left = node</span><br><span class="line">        <span class="comment"># 右孩子节点</span></span><br><span class="line">        <span class="keyword">elif</span> index % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            parent = int((index - <span class="number">2</span>) / <span class="number">2</span>)</span><br><span class="line">            parent_node = nodes[parent]</span><br><span class="line">            parent_node.right = node</span><br><span class="line"></span><br><span class="line">        nodes.append(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nodes</span><br><span class="line"></span><br><span class="line">print(create())</span><br><span class="line">head = create()[<span class="number">0</span>]</span><br><span class="line">s = Solution()</span><br><span class="line">print(s.delNodes(head, to_delete))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 交替打印FooBar</title>
    <url>/2020/05/23/leetcode-%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0FooBar/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/print-foobar-alternately/" target="_blank" rel="noopener">交替打印FooBar</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooBar</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      print(<span class="string">"foo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      print(<span class="string">"bar"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个不同的线程将会共用一个 FooBar 实例。其中一个线程将会调用 foo() 方法，另一个线程将会调用 bar() 方法。</p>
<p>请设计修改程序，以确保 “foobar” 被输出 n 次。</p>
<p>示例1:</p>
<blockquote>
<p>输入: n = 1<br>输出: “foobar”<br>解释: 这里有两个线程被异步启动。其中一个调用 foo() 方法, 另一个调用 bar() 方法，”foobar” 将被输出一次。</p>
</blockquote>
<p>示例2:</p>
<blockquote>
<p>输入: n = 2<br>输出: “foobarfoobar”<br>解释: “foobar” 将被输出两次。</p>
</blockquote>
<a id="more"></a>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>多线程中的一个题目，用Condition类完成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Condition</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooBar</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.con = Condition()</span><br><span class="line">        self.val = <span class="string">'foo'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, printFoo: <span class="string">'Callable[[], None]'</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n):</span><br><span class="line">            <span class="comment"># printFoo() outputs "foo". Do not change or remove this line.</span></span><br><span class="line">            <span class="keyword">with</span> self.con:</span><br><span class="line">                <span class="keyword">if</span> self.val != <span class="string">'foo'</span>:</span><br><span class="line">                    self.con.wait()</span><br><span class="line">                printFoo()</span><br><span class="line">                self.val = <span class="string">'bar'</span></span><br><span class="line">                self.con.notify_all()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, printBar: <span class="string">'Callable[[], None]'</span>)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n):</span><br><span class="line">            <span class="comment"># printBar() outputs "bar". Do not change or remove this line.</span></span><br><span class="line">            <span class="keyword">with</span> self.con:</span><br><span class="line">                <span class="keyword">if</span> self.val != <span class="string">'bar'</span>:</span><br><span class="line">                    self.con.wait()</span><br><span class="line"></span><br><span class="line">                printBar()</span><br><span class="line">                self.val = <span class="string">'foo'</span></span><br><span class="line">                self.con.notify_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_printFoo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'foo'</span>, end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_printBar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo = FooBar(<span class="number">10</span>)</span><br><span class="line">thrs = list()</span><br><span class="line">thrs.append(Thread(target=foo.foo, args=(_printFoo,)))</span><br><span class="line">thrs.append(Thread(target=foo.bar, args=(_printBar,)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> th <span class="keyword">in</span> thrs:</span><br><span class="line">    th.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> th <span class="keyword">in</span> thrs:</span><br><span class="line">    th.join()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 在排序数组中查找元素的第一个和最后一个位置</title>
    <url>/2020/05/23/leetcode-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">在排序数组中查找元素的第一个和最后一个位置</a></p>
<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。<br>你的算法时间复杂度必须是 O(log n) 级别。<br>如果数组中不存在目标值，返回 [-1, -1]。</p>
<p>示例1:</p>
<blockquote>
<p>输入: nums = [5,7,7,8,8,10], target = 8<br>输出: [3,4]</p>
</blockquote>
<p>示例2:</p>
<blockquote>
<p>输入: nums = [5,7,7,8,8,10], target = 6<br>输出: [-1,-1]</p>
</blockquote>
<a id="more"></a>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>题目很简单，二分法解决。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = 'ChenTao'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums: list, target: int)</span> -&gt; list:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(nums) - <span class="number">1</span></span><br><span class="line">        min_index = <span class="number">-1</span></span><br><span class="line">        max_index = <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 找到某个位置的值，不管是第几个</span></span><br><span class="line">        cur_index = <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 二分查找</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = int((left + right) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                cur_index = mid</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 采用的是顺序遍历，会更加耗时</span></span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">        <span class="comment">#     cur_index = nums.index(target)</span></span><br><span class="line">        <span class="comment"># except:</span></span><br><span class="line">        <span class="comment">#     cur_index = -1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从找到的值的位置往前遍历，找到最小值</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(cur_index, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[index] == target:</span><br><span class="line">                min_index = index</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 往后遍历找到最大值</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(cur_index, len(nums), <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[index] == target:</span><br><span class="line">                max_index = index</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果存在值，不能返回[-1, -1]</span></span><br><span class="line">        <span class="keyword">if</span> min_index == <span class="number">-1</span> <span class="keyword">or</span> max_index == <span class="number">-1</span>:</span><br><span class="line">            min_index = max_index = max_index <span class="keyword">if</span> max_index &gt; min_index <span class="keyword">else</span> min_index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [min_index, max_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="comment"># nums = [1, 4]</span></span><br><span class="line">target = <span class="number">8</span></span><br><span class="line">print(so.searchRange(nums, target))</span><br></pre></td></tr></table></figure>

<p>然后在题解区看到了另一种解法，我一直认为 in 关键字和 list的index都是顺序遍历，为什么复杂度反而不会增加很多呢？相比于我用二分法解，时间复杂度和空间复杂度几乎没什么增加的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">in</span> nums:</span><br><span class="line">            start = nums.index(target)</span><br><span class="line">            end = len(nums) - nums[::<span class="number">-1</span>].index(target) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> [start,end]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">-1</span>,<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 实现 Trie (前缀树)</title>
    <url>/2020/05/23/leetcode-%E5%AE%9E%E7%8E%B0-Trie-%E5%89%8D%E7%BC%80%E6%A0%91/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree" target="_blank" rel="noopener">前缀树</a></p>
<p>实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。</p>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Trie trie = new Trie();</span><br><span class="line">trie.insert(<span class="string">"apple"</span>);</span><br><span class="line">trie.search(<span class="string">"apple"</span>);   // 返回 true</span><br><span class="line">trie.search(<span class="string">"app"</span>);     // 返回 false</span><br><span class="line">trie.startsWith(<span class="string">"app"</span>); // 返回 true</span><br><span class="line">trie.insert(<span class="string">"app"</span>);   </span><br><span class="line">trie.search(<span class="string">"app"</span>);     // 返回 true</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<p>你可以假设所有的输入都是由小写字母 a-z 构成的。<br>保证所有输入均为非空字符串。</p>
<p>leetcode上该代码已经通过了，自己在原基础上加了注释和遍历的功能。<br>这个就是字典树:</p>
<ul>
<li>插入一个单词时，遍历此单词各个字符</li>
<li>如果单个字符存在，则取出该字符对应的节点</li>
<li>如果字符不存在，则创建字符节点，并加入到上一个字符的子节点(next)中</li>
<li>循环</li>
</ul>
<a id="more"></a>

<p>一张图可以解释这个功能:<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/20180717203719720.png" alt="字典树"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="comment"># 节点的值</span></span><br><span class="line">        self.value = value</span><br><span class="line">        <span class="comment"># 该节点是否成为一个单词的结尾字符</span></span><br><span class="line">        self.end = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 该节点的子节点</span></span><br><span class="line">        self.next = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = Node(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a word into the trie.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cur = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            node = cur.next.get(w)</span><br><span class="line">            <span class="comment"># 判断子节点中是否存在w这个节点，如果没有则创建</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                node = Node(w)</span><br><span class="line">                <span class="comment"># 将新创建的节点更新到next中</span></span><br><span class="line">                cur.next[w] = node</span><br><span class="line">            <span class="comment"># 移动指针位置</span></span><br><span class="line">            cur = node</span><br><span class="line">        <span class="comment"># word的所有值遍历完成，将最后一个节点的end值设置为True</span></span><br><span class="line">        cur.end = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if the word is in the trie.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            node = node.next.get(w)</span><br><span class="line">            <span class="comment"># 遍历，如果node不存在，则说明该单词不存在</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 有可能word是前缀，直接返回end值即可</span></span><br><span class="line">        <span class="keyword">return</span> node.end</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix: str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> prefix:</span><br><span class="line">            node = node.next.get(p)</span><br><span class="line">            <span class="comment"># node不存在，说明前缀错误，直接返回False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># prefiex遍历完成，前缀存在，返回True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self, node, word=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        遍历所有单词</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> node.end:</span><br><span class="line">            print(word)</span><br><span class="line">        <span class="keyword">elif</span> node:</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> node.next.values():</span><br><span class="line">                self.traverse(node, word+node.value)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_words</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">''</span>.join(random.choice(string.ascii_lowercase) <span class="keyword">for</span> y <span class="keyword">in</span> range(random.randint(<span class="number">5</span>, <span class="number">15</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    words = random_words()</span><br><span class="line">    t = Trie()</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        t.insert(word)</span><br><span class="line">    t.insert(<span class="string">'hello'</span>)</span><br><span class="line">    t.insert(<span class="string">'world'</span>)</span><br><span class="line">    t.insert(<span class="string">'python'</span>)</span><br><span class="line">    <span class="comment"># t.traverse(t.root)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(<span class="string">'search python: '</span> + str(t.search(<span class="string">'python'</span>)))</span><br><span class="line">    print(<span class="string">'search time: '</span> + str(time.time() - start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 两数相加</title>
    <url>/2020/05/23/leetcode-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">两数相加</a></p>
<p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p>示例：<br>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p>
<a id="more"></a>


<p>一脸懵逼，用最正常的解法做出来的，虽然时间和空间复杂度都有点高，但还是过了。<br>看评论说，O(2n)的时间复杂度都过不去，那我这写法怎么过的？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = '_Tao'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        num1 = self.get_num(l1)</span><br><span class="line">        num2 = self.get_num(l2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.split_num(num1 + num2)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_num</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            num += node.val * pow(<span class="number">10</span>, index)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            node = node.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_num</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        s = str(num)</span><br><span class="line">        cur = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> len(s) &gt;= <span class="number">1</span>:</span><br><span class="line">            last = s[<span class="number">0</span>]</span><br><span class="line">            s = s[<span class="number">1</span>:]</span><br><span class="line">            x = ListNode(int(last))</span><br><span class="line">            x.next = cur</span><br><span class="line">            cur = x</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Solution()</span><br><span class="line">    n1 = ListNode(<span class="number">2</span>)</span><br><span class="line">    n2 = ListNode(<span class="number">4</span>)</span><br><span class="line">    n3 = ListNode(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    n1.next = n2</span><br><span class="line">    n2.next = n3</span><br><span class="line"></span><br><span class="line">    n4 = ListNode(<span class="number">5</span>)</span><br><span class="line">    n5 = ListNode(<span class="number">6</span>)</span><br><span class="line">    n6 = ListNode(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    n4.next = n5</span><br><span class="line">    n5.next = n6</span><br><span class="line"></span><br><span class="line">    x = s.addTwoNumbers(n1, n4)</span><br><span class="line">    print(s.get_num(x))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 合并两个有序链表</title>
    <url>/2020/05/23/leetcode-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">合并两个有序链表</a></p>
<p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p>示例：</p>
<p>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4<br><br/></p>
<a id="more"></a>

<p>题目很简单，就是普通链表做法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-30 15:50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        cur_node = <span class="literal">None</span></span><br><span class="line">        head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否有数据为空的情况</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历判断大小</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                val = l1.val</span><br><span class="line">                <span class="comment"># 移动节点</span></span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val = l2.val</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            <span class="comment"># 创建新节点</span></span><br><span class="line">            node = ListNode(val)</span><br><span class="line">            <span class="comment"># 设置头节点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                cur_node = node</span><br><span class="line">                head = cur_node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur_node.next = node</span><br><span class="line">                cur_node = node</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将没有遍历完的数据，追加到节点之后</span></span><br><span class="line">        <span class="keyword">while</span> l1:</span><br><span class="line">            node = ListNode(l1.val)</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            cur_node.next = node</span><br><span class="line">            cur_node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l2:</span><br><span class="line">            node = ListNode(l2.val)</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            cur_node.next = node</span><br><span class="line">            cur_node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1 = ListNode(<span class="number">1</span>)</span><br><span class="line">m2 = ListNode(<span class="number">2</span>)</span><br><span class="line">m3 = ListNode(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">m1.next = m2</span><br><span class="line">m2.next = m3</span><br><span class="line"></span><br><span class="line">n1 = ListNode(<span class="number">1</span>)</span><br><span class="line">n2 = ListNode(<span class="number">3</span>)</span><br><span class="line">n3 = ListNode(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">n1.next = n2</span><br><span class="line">n2.next = n3</span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">print(so.mergeTwoLists(m1, n1).val)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 电话号码的字母组合</title>
    <url>/2020/05/23/leetcode-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">电话号码的字母组合</a></p>
<p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>
<p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/leetcode-17.png" alt=""><br>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：&quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>用递归搞定,不难,解释看代码就行.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits: str)</span> -&gt; list:</span></span><br><span class="line">        <span class="comment"># 字母键盘对应的字符</span></span><br><span class="line">        self.__values = [</span><br><span class="line">            <span class="string">''</span>, <span class="string">''</span>,</span><br><span class="line">            <span class="string">'abc'</span>, <span class="string">'def'</span>,</span><br><span class="line">            <span class="string">'ghi'</span>, <span class="string">'jkl'</span>, <span class="string">'mno'</span>,</span><br><span class="line">            <span class="string">'qprs'</span>, <span class="string">'tuv'</span>, <span class="string">'wxyz'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理输入""的特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> digits:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        self.__result = []</span><br><span class="line">        self.__counter(digits, <span class="number">0</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.__result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__counter</span><span class="params">(self, digits, index, cur)</span>:</span></span><br><span class="line">        <span class="comment"># 处理前n-1个字符,即,如果是234,就处理23两个数字</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; len(digits) - <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># index指的是当前digits中的第几个位置的数字</span></span><br><span class="line">            <span class="comment"># 将对应index的键盘的字母读取出来,遍历</span></span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> self.__values[int(digits[index])]:</span><br><span class="line">                <span class="comment"># 处理index+1个数字,递归, cur要加当前的字符</span></span><br><span class="line">                <span class="comment"># 例如,如果输入了"23",index=0,那么递归时就时 (..., cur + a), (..., cur + b), (..., cur + c)</span></span><br><span class="line">                self.__counter(digits, index + <span class="number">1</span>, cur + d)</span><br><span class="line">        <span class="comment"># 单独处理最后一个数字</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 遍历最后一个数字对应的键盘中的字符,追加到结果中</span></span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> self.__values[int(digits[index])]:</span><br><span class="line">                self.__result.append(cur + d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.letterCombinations(<span class="string">'23'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 最长公共前缀</title>
    <url>/2020/05/23/leetcode-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    <content><![CDATA[<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure>



<a id="more"></a>

<p>常规做法:</p>
<p>从第一个字符开始，判断到最后一个字符，如果某次不相等，或者全部匹配完成，就返回保存公共前缀的临时变量，时间复杂度时O(n*m)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">		:type strs: List[str]</span></span><br><span class="line"><span class="string">		:rtype: str</span></span><br><span class="line"><span class="string">		"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> len(strs) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        cur = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                istr = strs[<span class="number">0</span>][index]</span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> strs[<span class="number">1</span>:]:</span><br><span class="line">                    <span class="keyword">if</span> s[index] != istr:</span><br><span class="line">                        <span class="keyword">return</span> cur</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index += <span class="number">1</span></span><br><span class="line">                    cur = <span class="string">''</span>.join([cur, istr])</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> cur</span><br></pre></td></tr></table></figure>



<p>看了下评论区的解法，给跪了…</p>
<p>给字符串排序，只需要判断“最大字符串”和“最小字符串”的公共前缀即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">		:type strs: List[str]</span></span><br><span class="line"><span class="string">		:rtype: str</span></span><br><span class="line"><span class="string">		"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        maxstr = max(strs)</span><br><span class="line">        minstr = min(strs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(minstr):</span><br><span class="line">            <span class="keyword">if</span> value != maxstr[index]:</span><br><span class="line">                <span class="keyword">return</span> maxstr[:index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> minstr</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode — 括号生成</title>
    <url>/2020/05/23/leetcode-%E2%80%94-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">括号生成</a></p>
<p>给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</p>
<p>例如，给出 n = 3，生成结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>使用回溯+剪枝做,先往结果中添加左括号,再添加右括号.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generateParenthesis</span><span class="params">(self, n: int)</span> -&gt; list:</span></span><br><span class="line">        self.__result = []</span><br><span class="line">        self.__add_all(<span class="number">0</span>, <span class="number">0</span>, n, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.__result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add_all</span><span class="params">(self, used_left, used_right, n, cur)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">		递归计算</span></span><br><span class="line"><span class="string">		:param used_left: 左括号已使用数量</span></span><br><span class="line"><span class="string">		:param used_right: 右括号已使用数量</span></span><br><span class="line"><span class="string">		:param n: 总数</span></span><br><span class="line"><span class="string">		:param cur: 当前结果</span></span><br><span class="line"><span class="string">		"""</span></span><br><span class="line">        <span class="comment"># 如果左括号和右括号都已经使用完了,则结束此轮递归</span></span><br><span class="line">        <span class="keyword">if</span> used_left == n <span class="keyword">and</span> used_right == n:</span><br><span class="line">            self.__result.append(cur)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果左括号还能增加</span></span><br><span class="line">        <span class="keyword">if</span> used_left &lt; n:</span><br><span class="line">            self.__add_all(used_left + <span class="number">1</span>, used_right, n, cur + <span class="string">'('</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果右括号还能增加,并且右括号的数量要小于左括号的数量</span></span><br><span class="line">        <span class="keyword">if</span> used_right &lt; n <span class="keyword">and</span> used_right &lt; used_left:</span><br><span class="line">            self.__add_all(used_left, used_right + <span class="number">1</span>, n, cur + <span class="string">')'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">print(s.generateParenthesis(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 盛最多水的容器</title>
    <url>/2020/05/23/leetcode-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">盛最多水的容器</a></p>
<p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。<br><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/question_11.jpg" alt=""><br>图中垂直线代表输入数组 (1,8,6,2,5,4,8,3,7)。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<p>示例:</p>
<p>输入: (1,8,6,2,5,4,8,3,7)<br>输出: 49</p>
<a id="more"></a>

<p>其实就是求最大面积.<br>一个索引指向最左边,一直指向最右边,然后判断两个索引处的值的大小,哪个小,就将对应的索引往中心靠,直到左边的大于等于右边即可,取得最大值.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-5-8 23:58</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span> -&gt; int:</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        end = len(height) - <span class="number">1</span></span><br><span class="line">        maxnum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> end &gt; start:</span><br><span class="line">            startnum = height[start]</span><br><span class="line">            endnum = height[end]</span><br><span class="line">            <span class="keyword">if</span> min(startnum, endnum) * (end - start) &gt; maxnum:</span><br><span class="line">                maxnum = min(startnum, endnum) * (end - start)</span><br><span class="line">            <span class="keyword">if</span> startnum &lt; endnum:</span><br><span class="line">                start += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> maxnum</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 整数反转</title>
    <url>/2020/05/23/leetcode-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">整数反转</a></p>
<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<p>示例 1:<br>输入: 123<br>输出: 321</p>
<p> 示例 2:<br>输入: -123<br>输出: -321</p>
<p>示例 3:<br>输入: 120<br>输出: 21</p>
<p>注意:<br>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2<sup>31</sup>,  2<sup>31</sup> − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<a id="more"></a>

<p>没什么难度,硬刚就成.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-5-8 23:43</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            y = int(<span class="string">''</span>.join(list(reversed(str(x)))))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y = int(str(<span class="string">'-'</span>) + <span class="string">''</span>.join(list(reversed(str(-x)))))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">-2</span> ** <span class="number">31</span> &lt; y &lt; <span class="number">2</span> ** <span class="number">31</span> - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> y</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- LRU缓存机制</title>
    <url>/2020/05/23/leetcode-LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/lru-cache/" target="_blank" rel="noopener">LRU缓存机制</a></p>
<p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p>
<p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。</p>
<p>进阶:</p>
<p>你是否可以在 O(1) 时间复杂度内完成这两种操作？</p>
<p>示例:</p>
<p>LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );</p>
<p>cache.put(1, 1);<br/><br>cache.put(2, 2);<br/><br>cache.get(1);       // 返回  1<br/><br>cache.put(3, 3);    // 该操作会使得密钥 2 作废<br/><br>cache.get(2);       // 返回 -1 (未找到)<br/><br>cache.put(4, 4);    // 该操作会使得密钥 1 作废<br/><br>cache.get(1);       // 返回 -1 (未找到)<br/><br>cache.get(3);       // 返回  3<br/><br>cache.get(4);       // 返回  4<br/></p>
<a id="more"></a>

<p>使用python collections的OrderDict做的，就不需要再自己造轮子了…<br/><br>一看跟其他语言的比较，性能真的是差的不止一点啊…<br/><br>执行用时 : 144 ms, 在LRU Cache的Python3提交中击败了84.29% 的用户<br/><br>内存消耗 : 21.8 MB, 在LRU Cache的Python3提交中击败了0.00% 的用户</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-31 15:33</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity: int)</span>:</span></span><br><span class="line">        self.__capacity = capacity</span><br><span class="line">        self.__now_count = <span class="number">0</span></span><br><span class="line">        self.__cache = OrderedDict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 如果key值不存在，在返回-1</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.__cache:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 因为时有顺序的字典，那么要实现LRU缓存功能，就需要先删除，再插入</span></span><br><span class="line">        <span class="comment"># 那么最后一个元素就是最近使用的，最前面的元素就是最开始使用的</span></span><br><span class="line">        <span class="comment"># 当达到容量上限时，就删除最前面的元素</span></span><br><span class="line">        value = self.__cache.pop(key)</span><br><span class="line">        self.__cache[key] = value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key: int, value: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="comment"># 如果要插入的元素不存在，并且容量已到上限时，就删除最开始使用的元素</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.__cache <span class="keyword">and</span> self.__now_count &gt;= self.__capacity:</span><br><span class="line">            <span class="comment"># 容量-1</span></span><br><span class="line">            self.__now_count -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 删除最前面的元素</span></span><br><span class="line">            self.__cache.popitem(last=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果要加入的元素已经存在了，那么就需要先删除</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.__cache:</span><br><span class="line">            self.__now_count -= <span class="number">1</span></span><br><span class="line">            self.__cache.pop(key)</span><br><span class="line"></span><br><span class="line">        self.__cache[key] = value</span><br><span class="line">        self.__now_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_length</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'now_count = &#123;0&#125;, cache.length = &#123;1&#125;'</span>.format(self.__now_count, len(self.__cache)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cache = LRUCache(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">cache.put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">cache.put(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">cache.print_length()</span><br><span class="line"></span><br><span class="line">print(cache.get(<span class="number">1</span>))</span><br><span class="line">cache.put(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">print(cache.get(<span class="number">2</span>))</span><br><span class="line">cache.put(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">print(cache.get(<span class="number">1</span>))</span><br><span class="line">print(cache.get(<span class="number">3</span>))</span><br><span class="line">print(cache.get(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode---无重复字符的最长子串</title>
    <url>/2020/05/23/leetcode-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">无重复字符的最长子串</a><br><br/><br>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p>
<a id="more"></a>


<p>跟以前做的从一组数字中取出最大子序列之和一样，虽然一遍通过，但复杂度O(n)貌似还是挺高的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr	/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-27 23:07</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        non_repeat = <span class="string">''</span></span><br><span class="line">        max_length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            <span class="comment"># 如果没有重复的，就追加到字符串</span></span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> non_repeat:</span><br><span class="line">                non_repeat += ch</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则，截取重复的字符之后的字符串</span></span><br><span class="line">                index = non_repeat.index(ch)</span><br><span class="line">                non_repeat = non_repeat[index + <span class="number">1</span>:] + ch</span><br><span class="line">            <span class="comment"># 获取最大长度</span></span><br><span class="line">            max_length = max(max_length, len(non_repeat))</span><br><span class="line">        <span class="keyword">return</span> max_length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sol = Solution()</span><br><span class="line">xxx = <span class="string">'bbbbb'</span></span><br><span class="line">print(sol.lengthOfLongestSubstring(xxx))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 合并K个有序链表</title>
    <url>/2020/05/23/leetcode-%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">合并K个有序链表</a></p>
<p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>
<p>示例:</p>
<p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p>
<a id="more"></a>

<br/>
<br/>
方法跟合并两个链表差不多，不过要采用分而治之的方法.....
之前采用reduce写超时了，也肯定得超时，是得多蠢...

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-30 17:10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="comment"># 几种特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> lists</span><br><span class="line">        <span class="keyword">elif</span> len(lists) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> len(lists) == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> self.mergeTwoLists(lists[<span class="number">0</span>], lists[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 求得中间的值</span></span><br><span class="line">        <span class="keyword">if</span> len(lists) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            mid = len(lists) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = (len(lists) + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        mid -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 采用分而治之的方法求</span></span><br><span class="line">        <span class="comment"># 一直二分下去，最后合并</span></span><br><span class="line">        <span class="keyword">return</span> self.mergeTwoLists(self.mergeKLists(lists[:mid]), self.mergeKLists(lists[mid:]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        cur_node = <span class="literal">None</span></span><br><span class="line">        head = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否有数据为空的情况</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历判断大小</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                val = l1.val</span><br><span class="line">                <span class="comment"># 移动节点</span></span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val = l2.val</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            <span class="comment"># 创建新节点</span></span><br><span class="line">            node = ListNode(val)</span><br><span class="line">            <span class="comment"># 设置头节点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">                cur_node = node</span><br><span class="line">                head = cur_node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur_node.next = node</span><br><span class="line">                cur_node = node</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将没有遍历完的数据，追加到节点之后</span></span><br><span class="line">        <span class="keyword">while</span> l1:</span><br><span class="line">            node = ListNode(l1.val)</span><br><span class="line">            l1 = l1.next</span><br><span class="line">            cur_node.next = node</span><br><span class="line">            cur_node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l2:</span><br><span class="line">            node = ListNode(l2.val)</span><br><span class="line">            l2 = l2.next</span><br><span class="line">            cur_node.next = node</span><br><span class="line">            cur_node = node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1 = ListNode(<span class="number">1</span>)</span><br><span class="line">m2 = ListNode(<span class="number">2</span>)</span><br><span class="line">m3 = ListNode(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">m1.next = m2</span><br><span class="line">m2.next = m3</span><br><span class="line"></span><br><span class="line">n1 = ListNode(<span class="number">1</span>)</span><br><span class="line">n2 = ListNode(<span class="number">3</span>)</span><br><span class="line">n3 = ListNode(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">n1.next = n2</span><br><span class="line">n2.next = n3</span><br><span class="line"></span><br><span class="line">x1 = ListNode(<span class="number">1</span>)</span><br><span class="line">x2 = ListNode(<span class="number">10</span>)</span><br><span class="line">x1.next = x2</span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line">node = so.mergeKLists([m1, n1, x1])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> node:</span><br><span class="line">    print(node.val)</span><br><span class="line">    node = node.next</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 二叉树的最近公共祖先</title>
    <url>/2020/05/23/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">二叉树的最近公共祖先</a></p>
<p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>
<p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/32.png" alt="示例"></p>
<p>示例 1:</p>
<p>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</p>
<p>输出: 3</p>
<p>解释: 节点 5 和节点 1 的最近公共祖先是节点 3。<br/></p>
<p>示例 2:</p>
<p>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</p>
<p>输出: 5</p>
<p>解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</p>
<p>说明:</p>
<p>所有节点的值都是唯一的。<br>p、q 为不同节点且均存在于给定的二叉树中。</p>
<a id="more"></a>


<p>解释:</p>
<p>1.如果二叉树中存在着该父节点，那么p一定在左子树上，q一定在右子树上</p>
<p>2.如果在某节点中的左子树中找到了p，右子树中找到了q，那么该节点就是最近的公共父节点</p>
<p>3.如果p，q都处于某节点的同一分支上，那么就需要沿着该分支继续遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-31 17:46</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'val = '</span> + str(self.val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: TreeNode, p: TreeNode, q: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># 如果节点不存在，那么就是已经遍历到了最后</span></span><br><span class="line">        <span class="comment"># 如果是p，q，也就不再需要继续遍历</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">or</span> root == p <span class="keyword">or</span> root == q:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历节点的左子树</span></span><br><span class="line">        left_tree = self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        <span class="comment"># 遍历节点的右子树</span></span><br><span class="line">        right_tree = self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果左子树有数据，右子树也有数据，那么就说明是最终结果了</span></span><br><span class="line">        <span class="keyword">if</span> left_tree <span class="keyword">and</span> right_tree:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="comment"># 如果p，q都在右子树上</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> left_tree <span class="keyword">and</span> right_tree:</span><br><span class="line">            <span class="keyword">return</span> right_tree</span><br><span class="line">        <span class="comment"># 如果p，q都在左子树上</span></span><br><span class="line">        <span class="keyword">elif</span> left_tree <span class="keyword">and</span> <span class="keyword">not</span> right_tree:</span><br><span class="line">            <span class="keyword">return</span> left_tree</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line"></span><br><span class="line">t3 = TreeNode(<span class="number">3</span>)</span><br><span class="line">t5 = TreeNode(<span class="number">5</span>)</span><br><span class="line">t1 = TreeNode(<span class="number">1</span>)</span><br><span class="line">t6 = TreeNode(<span class="number">6</span>)</span><br><span class="line">t2 = TreeNode(<span class="number">2</span>)</span><br><span class="line">t0 = TreeNode(<span class="number">0</span>)</span><br><span class="line">t8 = TreeNode(<span class="number">8</span>)</span><br><span class="line">t7 = TreeNode(<span class="number">7</span>)</span><br><span class="line">t4 = TreeNode(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">t3.left = t5</span><br><span class="line">t3.right = t1</span><br><span class="line"></span><br><span class="line">t5.left = t6</span><br><span class="line">t5.right = t2</span><br><span class="line"></span><br><span class="line">t1.left = t0</span><br><span class="line">t1.right = t8</span><br><span class="line"></span><br><span class="line">t2.left = t7</span><br><span class="line">t2.right = t4</span><br><span class="line"></span><br><span class="line">print(so.lowestCommonAncestor(t3, t4, t8))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 寻找两个有序数组的中位数</title>
    <url>/2020/05/23/leetcode-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。<br>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。<br>你可以假设 nums1 和 nums2 不会同时为空。</p>
<p>nums1 = [1, 3]<br>nums2 = [2]</p>
<p>则中位数是 2.0</p>
<a id="more"></a>

<p>比较简单把，两个排序好的数组，用一个循环就能搞定了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># __author__ = 'ChenTao'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1: list, nums2: list)</span> -&gt; float:</span></span><br><span class="line">        result = []</span><br><span class="line">        m, n = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> m != len(nums1) <span class="keyword">and</span> n != len(nums2):</span><br><span class="line">            <span class="keyword">if</span> nums1[m] &lt; nums2[n]:</span><br><span class="line">                result.append(nums1[m])</span><br><span class="line">                m += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(nums2[n])</span><br><span class="line">                n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        result.extend(nums1[m:])</span><br><span class="line">        result.extend(nums2[n:])</span><br><span class="line">        print(result)</span><br><span class="line">        <span class="keyword">if</span> len(result) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            mid = int(len(result) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> (result[mid - <span class="number">1</span>] + result[mid]) / <span class="number">2.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = int((len(result) - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> result[mid] * <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">nums1 = []</span><br><span class="line">nums2 = [<span class="number">1</span>]</span><br><span class="line">print(s.findMedianSortedArrays(nums1, nums2))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 二叉搜索树的最近公共祖先</title>
    <url>/2020/05/23/leetcode-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noopener">二叉搜索树的最近公共祖先</a></p>
<p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p>
<p><img src="https://qxinhai.oss-cn-shenzhen.aliyuncs.com/pic/33.png" alt="1.png"></p>
<p>示例 1:</p>
<p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</p>
<p>输出: 6</p>
<p>解释: 节点 2 和节点 8 的最近公共祖先是 6。</p>
<p>示例 2:</p>
<p>输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4<br>输出: 2</p>
<p>解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</p>
<p>说明:</p>
<p>所有节点的值都是唯一的。<br>p、q 为不同节点且均存在于给定的二叉搜索树中。</p>
<a id="more"></a>

<br/>
这题相对于直接查找最近的父节点，还是容易很多的。搜索二叉树本身就已经排序好了的，只需要判断根节点比查找的节点大小即可。

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: _Tao</span></span><br><span class="line"><span class="comment"># @Time: 19-3-31 18:18</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'val = '</span> + str(self.val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root: TreeNode, p: TreeNode, q: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="comment"># 调整顺序，因为输入的节点中，有可能会出现p的值大于q的值的情况</span></span><br><span class="line">        <span class="comment"># 调整为，p值肯定小于q值</span></span><br><span class="line">        <span class="keyword">if</span> p.val &gt; q.val:</span><br><span class="line">            p, q = q, p</span><br><span class="line">        <span class="comment"># 按照搜索二叉树的概念，当节点的值大于p值切小于q值时，那么就是最近的父节点了</span></span><br><span class="line">        <span class="comment"># 注意等号的情况</span></span><br><span class="line">        <span class="keyword">if</span> p.val &lt;= root.val &lt;= q.val:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="comment"># 如果root值大于p，q值，那么就遍历它的左子树</span></span><br><span class="line">        <span class="keyword">elif</span> root.val &gt;= p.val <span class="keyword">and</span> root.val &gt;= q.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        <span class="comment"># 如果root值小于p,q值，那么就遍历右子树</span></span><br><span class="line">        <span class="keyword">elif</span> root.val &lt;= p.val <span class="keyword">and</span> root.val &lt;= q.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">so = Solution()</span><br><span class="line"></span><br><span class="line">t3 = TreeNode(<span class="number">3</span>)</span><br><span class="line">t5 = TreeNode(<span class="number">5</span>)</span><br><span class="line">t1 = TreeNode(<span class="number">1</span>)</span><br><span class="line">t6 = TreeNode(<span class="number">6</span>)</span><br><span class="line">t2 = TreeNode(<span class="number">2</span>)</span><br><span class="line">t0 = TreeNode(<span class="number">0</span>)</span><br><span class="line">t8 = TreeNode(<span class="number">8</span>)</span><br><span class="line">t7 = TreeNode(<span class="number">7</span>)</span><br><span class="line">t4 = TreeNode(<span class="number">4</span>)</span><br><span class="line">t9 = TreeNode(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">t6.left = t2</span><br><span class="line">t6.right = t8</span><br><span class="line"></span><br><span class="line">t2.left = t0</span><br><span class="line">t2.right = t4</span><br><span class="line"></span><br><span class="line">t8.left = t7</span><br><span class="line">t8.right = t9</span><br><span class="line"></span><br><span class="line">t4.left = t3</span><br><span class="line">t4.right = t5</span><br><span class="line"></span><br><span class="line">print(so.lowestCommonAncestor(t6, t4, t3))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 有效的括号</title>
    <url>/2020/05/23/leetcode-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7-1/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">有效的括号</a><br><br/><br>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
<a id="more"></a>

<br/>
<br/>

<p>….没看清题目，以为是输入任意的字符串，然后写了以下做法.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">    alist = []</span><br><span class="line">    left = <span class="string">'&#123;[('</span></span><br><span class="line">    right = <span class="string">')]&#125;'</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> left:</span><br><span class="line">            alist.append(ch)</span><br><span class="line">        <span class="keyword">elif</span> alist:</span><br><span class="line">            ch2 = alist[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> (ch2 == <span class="string">'('</span> <span class="keyword">and</span> ch == <span class="string">')'</span>) <span class="keyword">or</span> (ch2 == <span class="string">'['</span> <span class="keyword">and</span> ch == <span class="string">']'</span>) <span class="keyword">or</span> (ch2 == <span class="string">'&#123;'</span> <span class="keyword">and</span> ch == <span class="string">'&#125;'</span>):</span><br><span class="line">                alist.pop()</span><br><span class="line">            <span class="keyword">elif</span> ch <span class="keyword">in</span> right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> ch <span class="keyword">in</span> right:</span><br><span class="line">            alist.append(ch)</span><br><span class="line">    <span class="keyword">return</span> len(alist) == <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>写的很乱，但也通过了。<br>看清楚题目后，只会输入括号，那么题目就变得很简单了.<br>只需一直循环，然后删除掉成对的括号就行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid2</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">'()'</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">'[]'</span> <span class="keyword">in</span> s:</span><br><span class="line">        s = s.replace(<span class="string">'()'</span>, <span class="string">''</span>).replace(<span class="string">'[]'</span>, <span class="string">''</span>).replace(<span class="string">'&#123;&#125;'</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s == <span class="string">''</span></span><br></pre></td></tr></table></figure>
<p>上面的写法很简单，但耗时太长，可以改成以下写法，虽然相对于其他语言的耗时，仍旧是个dd。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">    left = <span class="string">'&#123;[('</span></span><br><span class="line">    right = <span class="string">')]&#125;'</span></span><br><span class="line">    alist = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">       <span class="keyword">if</span> ch <span class="keyword">in</span> left <span class="keyword">or</span> <span class="keyword">not</span> alist:</span><br><span class="line">           <span class="keyword">if</span> <span class="keyword">not</span> alist <span class="keyword">and</span> ch <span class="keyword">in</span> right:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">           alist.append(ch)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           ch2 = alist[<span class="number">-1</span>]</span><br><span class="line">           <span class="keyword">if</span> (ch2 == <span class="string">'('</span> <span class="keyword">and</span> ch == <span class="string">')'</span>) <span class="keyword">or</span> \</span><br><span class="line">                   (ch2 == <span class="string">'['</span> <span class="keyword">and</span> ch == <span class="string">']'</span>) <span class="keyword">or</span> \</span><br><span class="line">                   (ch2 == <span class="string">'&#123;'</span> <span class="keyword">and</span> ch == <span class="string">'&#125;'</span>):</span><br><span class="line">               alist.pop()</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> len(alist) == <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode --- 环形链表</title>
    <url>/2020/05/23/leetcode%20---%20%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">环形链表</a></p>
<p>给定一个链表，判断链表中是否有环。</p>
<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>试了两种方法:</p>
<p>第一种用的是快慢指针，复杂度是60 ms\18.2 MB</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        fast = head</span><br><span class="line">        slow = fast.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast != slow:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                fast = fast.next</span><br><span class="line">                slow = slow.next.next</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<p>第二种试了下用一个 列表存下已经遍历过的节点，然后判断新的节点是否在列表中….但时间复杂度有点看不懂了，本来以为空间复杂度会很高，时间复杂度会低一点的 ： 1764 ms\18.1 MB </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line"></span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> tmp:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            tmp.append(head)</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
</search>
